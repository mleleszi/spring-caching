/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3267.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 3.0], [0.7, 4.0], [0.8, 4.0], [0.9, 5.0], [1.0, 5.0], [1.1, 6.0], [1.2, 7.0], [1.3, 9.0], [1.4, 14.0], [1.5, 48.0], [1.6, 86.0], [1.7, 93.0], [1.8, 105.0], [1.9, 121.0], [2.0, 136.0], [2.1, 144.0], [2.2, 165.0], [2.3, 198.0], [2.4, 214.0], [2.5, 227.0], [2.6, 233.0], [2.7, 242.0], [2.8, 247.0], [2.9, 253.0], [3.0, 259.0], [3.1, 269.0], [3.2, 276.0], [3.3, 282.0], [3.4, 287.0], [3.5, 293.0], [3.6, 296.0], [3.7, 299.0], [3.8, 302.0], [3.9, 306.0], [4.0, 310.0], [4.1, 315.0], [4.2, 318.0], [4.3, 321.0], [4.4, 324.0], [4.5, 326.0], [4.6, 328.0], [4.7, 330.0], [4.8, 331.0], [4.9, 333.0], [5.0, 334.0], [5.1, 336.0], [5.2, 337.0], [5.3, 338.0], [5.4, 339.0], [5.5, 341.0], [5.6, 342.0], [5.7, 343.0], [5.8, 344.0], [5.9, 345.0], [6.0, 346.0], [6.1, 347.0], [6.2, 348.0], [6.3, 348.0], [6.4, 349.0], [6.5, 349.0], [6.6, 350.0], [6.7, 351.0], [6.8, 351.0], [6.9, 352.0], [7.0, 353.0], [7.1, 353.0], [7.2, 354.0], [7.3, 354.0], [7.4, 355.0], [7.5, 356.0], [7.6, 356.0], [7.7, 357.0], [7.8, 358.0], [7.9, 358.0], [8.0, 359.0], [8.1, 360.0], [8.2, 361.0], [8.3, 363.0], [8.4, 364.0], [8.5, 365.0], [8.6, 366.0], [8.7, 367.0], [8.8, 368.0], [8.9, 368.0], [9.0, 369.0], [9.1, 370.0], [9.2, 371.0], [9.3, 372.0], [9.4, 373.0], [9.5, 374.0], [9.6, 375.0], [9.7, 376.0], [9.8, 377.0], [9.9, 378.0], [10.0, 379.0], [10.1, 380.0], [10.2, 381.0], [10.3, 381.0], [10.4, 382.0], [10.5, 383.0], [10.6, 384.0], [10.7, 384.0], [10.8, 385.0], [10.9, 386.0], [11.0, 387.0], [11.1, 388.0], [11.2, 389.0], [11.3, 390.0], [11.4, 391.0], [11.5, 392.0], [11.6, 392.0], [11.7, 393.0], [11.8, 394.0], [11.9, 394.0], [12.0, 395.0], [12.1, 396.0], [12.2, 396.0], [12.3, 397.0], [12.4, 397.0], [12.5, 398.0], [12.6, 398.0], [12.7, 399.0], [12.8, 400.0], [12.9, 400.0], [13.0, 401.0], [13.1, 401.0], [13.2, 402.0], [13.3, 402.0], [13.4, 403.0], [13.5, 403.0], [13.6, 404.0], [13.7, 404.0], [13.8, 405.0], [13.9, 405.0], [14.0, 406.0], [14.1, 406.0], [14.2, 406.0], [14.3, 407.0], [14.4, 407.0], [14.5, 407.0], [14.6, 408.0], [14.7, 408.0], [14.8, 409.0], [14.9, 409.0], [15.0, 409.0], [15.1, 410.0], [15.2, 410.0], [15.3, 411.0], [15.4, 411.0], [15.5, 412.0], [15.6, 412.0], [15.7, 413.0], [15.8, 413.0], [15.9, 413.0], [16.0, 414.0], [16.1, 414.0], [16.2, 415.0], [16.3, 415.0], [16.4, 416.0], [16.5, 416.0], [16.6, 416.0], [16.7, 417.0], [16.8, 417.0], [16.9, 417.0], [17.0, 418.0], [17.1, 418.0], [17.2, 419.0], [17.3, 419.0], [17.4, 419.0], [17.5, 420.0], [17.6, 420.0], [17.7, 421.0], [17.8, 421.0], [17.9, 421.0], [18.0, 422.0], [18.1, 422.0], [18.2, 423.0], [18.3, 423.0], [18.4, 424.0], [18.5, 424.0], [18.6, 425.0], [18.7, 425.0], [18.8, 426.0], [18.9, 426.0], [19.0, 426.0], [19.1, 427.0], [19.2, 427.0], [19.3, 428.0], [19.4, 428.0], [19.5, 428.0], [19.6, 429.0], [19.7, 429.0], [19.8, 430.0], [19.9, 430.0], [20.0, 431.0], [20.1, 431.0], [20.2, 432.0], [20.3, 433.0], [20.4, 433.0], [20.5, 434.0], [20.6, 435.0], [20.7, 435.0], [20.8, 436.0], [20.9, 437.0], [21.0, 437.0], [21.1, 438.0], [21.2, 439.0], [21.3, 440.0], [21.4, 440.0], [21.5, 441.0], [21.6, 442.0], [21.7, 442.0], [21.8, 443.0], [21.9, 444.0], [22.0, 444.0], [22.1, 445.0], [22.2, 446.0], [22.3, 446.0], [22.4, 447.0], [22.5, 447.0], [22.6, 448.0], [22.7, 448.0], [22.8, 449.0], [22.9, 449.0], [23.0, 450.0], [23.1, 450.0], [23.2, 451.0], [23.3, 451.0], [23.4, 452.0], [23.5, 452.0], [23.6, 453.0], [23.7, 453.0], [23.8, 454.0], [23.9, 454.0], [24.0, 455.0], [24.1, 456.0], [24.2, 456.0], [24.3, 457.0], [24.4, 457.0], [24.5, 458.0], [24.6, 458.0], [24.7, 458.0], [24.8, 459.0], [24.9, 459.0], [25.0, 460.0], [25.1, 460.0], [25.2, 461.0], [25.3, 461.0], [25.4, 461.0], [25.5, 462.0], [25.6, 462.0], [25.7, 463.0], [25.8, 463.0], [25.9, 463.0], [26.0, 464.0], [26.1, 464.0], [26.2, 465.0], [26.3, 465.0], [26.4, 465.0], [26.5, 466.0], [26.6, 466.0], [26.7, 467.0], [26.8, 467.0], [26.9, 467.0], [27.0, 467.0], [27.1, 468.0], [27.2, 468.0], [27.3, 469.0], [27.4, 469.0], [27.5, 469.0], [27.6, 470.0], [27.7, 470.0], [27.8, 470.0], [27.9, 471.0], [28.0, 471.0], [28.1, 472.0], [28.2, 472.0], [28.3, 472.0], [28.4, 473.0], [28.5, 473.0], [28.6, 473.0], [28.7, 474.0], [28.8, 474.0], [28.9, 475.0], [29.0, 475.0], [29.1, 475.0], [29.2, 476.0], [29.3, 476.0], [29.4, 477.0], [29.5, 477.0], [29.6, 477.0], [29.7, 478.0], [29.8, 478.0], [29.9, 478.0], [30.0, 479.0], [30.1, 479.0], [30.2, 480.0], [30.3, 480.0], [30.4, 480.0], [30.5, 481.0], [30.6, 481.0], [30.7, 482.0], [30.8, 482.0], [30.9, 482.0], [31.0, 483.0], [31.1, 483.0], [31.2, 483.0], [31.3, 484.0], [31.4, 484.0], [31.5, 484.0], [31.6, 485.0], [31.7, 485.0], [31.8, 485.0], [31.9, 486.0], [32.0, 486.0], [32.1, 486.0], [32.2, 487.0], [32.3, 487.0], [32.4, 487.0], [32.5, 488.0], [32.6, 488.0], [32.7, 489.0], [32.8, 489.0], [32.9, 489.0], [33.0, 490.0], [33.1, 490.0], [33.2, 490.0], [33.3, 491.0], [33.4, 491.0], [33.5, 492.0], [33.6, 492.0], [33.7, 492.0], [33.8, 493.0], [33.9, 493.0], [34.0, 493.0], [34.1, 494.0], [34.2, 494.0], [34.3, 494.0], [34.4, 494.0], [34.5, 495.0], [34.6, 495.0], [34.7, 495.0], [34.8, 496.0], [34.9, 496.0], [35.0, 497.0], [35.1, 497.0], [35.2, 497.0], [35.3, 498.0], [35.4, 498.0], [35.5, 498.0], [35.6, 499.0], [35.7, 499.0], [35.8, 499.0], [35.9, 499.0], [36.0, 500.0], [36.1, 500.0], [36.2, 500.0], [36.3, 501.0], [36.4, 501.0], [36.5, 502.0], [36.6, 502.0], [36.7, 502.0], [36.8, 503.0], [36.9, 503.0], [37.0, 503.0], [37.1, 504.0], [37.2, 504.0], [37.3, 505.0], [37.4, 505.0], [37.5, 505.0], [37.6, 506.0], [37.7, 506.0], [37.8, 507.0], [37.9, 507.0], [38.0, 507.0], [38.1, 508.0], [38.2, 508.0], [38.3, 509.0], [38.4, 509.0], [38.5, 510.0], [38.6, 510.0], [38.7, 510.0], [38.8, 511.0], [38.9, 511.0], [39.0, 512.0], [39.1, 512.0], [39.2, 513.0], [39.3, 513.0], [39.4, 514.0], [39.5, 514.0], [39.6, 515.0], [39.7, 515.0], [39.8, 516.0], [39.9, 516.0], [40.0, 516.0], [40.1, 517.0], [40.2, 517.0], [40.3, 518.0], [40.4, 518.0], [40.5, 518.0], [40.6, 519.0], [40.7, 519.0], [40.8, 520.0], [40.9, 520.0], [41.0, 520.0], [41.1, 521.0], [41.2, 521.0], [41.3, 522.0], [41.4, 522.0], [41.5, 522.0], [41.6, 523.0], [41.7, 523.0], [41.8, 523.0], [41.9, 524.0], [42.0, 524.0], [42.1, 524.0], [42.2, 525.0], [42.3, 525.0], [42.4, 526.0], [42.5, 526.0], [42.6, 526.0], [42.7, 526.0], [42.8, 527.0], [42.9, 527.0], [43.0, 528.0], [43.1, 528.0], [43.2, 528.0], [43.3, 529.0], [43.4, 529.0], [43.5, 530.0], [43.6, 530.0], [43.7, 530.0], [43.8, 531.0], [43.9, 531.0], [44.0, 532.0], [44.1, 532.0], [44.2, 533.0], [44.3, 533.0], [44.4, 534.0], [44.5, 535.0], [44.6, 535.0], [44.7, 536.0], [44.8, 536.0], [44.9, 536.0], [45.0, 537.0], [45.1, 537.0], [45.2, 538.0], [45.3, 538.0], [45.4, 539.0], [45.5, 539.0], [45.6, 539.0], [45.7, 540.0], [45.8, 540.0], [45.9, 541.0], [46.0, 541.0], [46.1, 542.0], [46.2, 542.0], [46.3, 542.0], [46.4, 543.0], [46.5, 543.0], [46.6, 544.0], [46.7, 545.0], [46.8, 545.0], [46.9, 546.0], [47.0, 546.0], [47.1, 547.0], [47.2, 547.0], [47.3, 548.0], [47.4, 548.0], [47.5, 549.0], [47.6, 550.0], [47.7, 550.0], [47.8, 550.0], [47.9, 551.0], [48.0, 551.0], [48.1, 552.0], [48.2, 552.0], [48.3, 553.0], [48.4, 553.0], [48.5, 554.0], [48.6, 554.0], [48.7, 555.0], [48.8, 555.0], [48.9, 556.0], [49.0, 556.0], [49.1, 557.0], [49.2, 557.0], [49.3, 558.0], [49.4, 558.0], [49.5, 558.0], [49.6, 559.0], [49.7, 559.0], [49.8, 560.0], [49.9, 560.0], [50.0, 561.0], [50.1, 561.0], [50.2, 561.0], [50.3, 562.0], [50.4, 562.0], [50.5, 563.0], [50.6, 563.0], [50.7, 564.0], [50.8, 564.0], [50.9, 565.0], [51.0, 565.0], [51.1, 566.0], [51.2, 566.0], [51.3, 567.0], [51.4, 567.0], [51.5, 568.0], [51.6, 568.0], [51.7, 569.0], [51.8, 569.0], [51.9, 570.0], [52.0, 570.0], [52.1, 571.0], [52.2, 571.0], [52.3, 572.0], [52.4, 572.0], [52.5, 573.0], [52.6, 573.0], [52.7, 574.0], [52.8, 574.0], [52.9, 575.0], [53.0, 575.0], [53.1, 576.0], [53.2, 576.0], [53.3, 577.0], [53.4, 577.0], [53.5, 578.0], [53.6, 578.0], [53.7, 579.0], [53.8, 579.0], [53.9, 580.0], [54.0, 580.0], [54.1, 581.0], [54.2, 581.0], [54.3, 582.0], [54.4, 582.0], [54.5, 582.0], [54.6, 583.0], [54.7, 583.0], [54.8, 584.0], [54.9, 584.0], [55.0, 585.0], [55.1, 585.0], [55.2, 586.0], [55.3, 586.0], [55.4, 587.0], [55.5, 587.0], [55.6, 588.0], [55.7, 588.0], [55.8, 589.0], [55.9, 590.0], [56.0, 590.0], [56.1, 591.0], [56.2, 591.0], [56.3, 592.0], [56.4, 592.0], [56.5, 593.0], [56.6, 593.0], [56.7, 594.0], [56.8, 594.0], [56.9, 595.0], [57.0, 596.0], [57.1, 596.0], [57.2, 597.0], [57.3, 597.0], [57.4, 598.0], [57.5, 598.0], [57.6, 599.0], [57.7, 599.0], [57.8, 600.0], [57.9, 600.0], [58.0, 601.0], [58.1, 601.0], [58.2, 602.0], [58.3, 602.0], [58.4, 603.0], [58.5, 604.0], [58.6, 604.0], [58.7, 605.0], [58.8, 605.0], [58.9, 606.0], [59.0, 607.0], [59.1, 607.0], [59.2, 608.0], [59.3, 608.0], [59.4, 609.0], [59.5, 610.0], [59.6, 610.0], [59.7, 611.0], [59.8, 611.0], [59.9, 611.0], [60.0, 612.0], [60.1, 612.0], [60.2, 613.0], [60.3, 613.0], [60.4, 614.0], [60.5, 614.0], [60.6, 615.0], [60.7, 615.0], [60.8, 616.0], [60.9, 616.0], [61.0, 617.0], [61.1, 617.0], [61.2, 618.0], [61.3, 618.0], [61.4, 619.0], [61.5, 619.0], [61.6, 620.0], [61.7, 620.0], [61.8, 621.0], [61.9, 621.0], [62.0, 622.0], [62.1, 623.0], [62.2, 623.0], [62.3, 624.0], [62.4, 624.0], [62.5, 625.0], [62.6, 625.0], [62.7, 626.0], [62.8, 627.0], [62.9, 627.0], [63.0, 628.0], [63.1, 629.0], [63.2, 630.0], [63.3, 630.0], [63.4, 631.0], [63.5, 632.0], [63.6, 633.0], [63.7, 633.0], [63.8, 634.0], [63.9, 635.0], [64.0, 635.0], [64.1, 636.0], [64.2, 637.0], [64.3, 638.0], [64.4, 639.0], [64.5, 639.0], [64.6, 640.0], [64.7, 641.0], [64.8, 642.0], [64.9, 642.0], [65.0, 643.0], [65.1, 644.0], [65.2, 644.0], [65.3, 645.0], [65.4, 646.0], [65.5, 646.0], [65.6, 647.0], [65.7, 648.0], [65.8, 648.0], [65.9, 649.0], [66.0, 650.0], [66.1, 651.0], [66.2, 651.0], [66.3, 652.0], [66.4, 653.0], [66.5, 653.0], [66.6, 654.0], [66.7, 655.0], [66.8, 656.0], [66.9, 656.0], [67.0, 657.0], [67.1, 657.0], [67.2, 658.0], [67.3, 659.0], [67.4, 659.0], [67.5, 660.0], [67.6, 661.0], [67.7, 662.0], [67.8, 663.0], [67.9, 663.0], [68.0, 664.0], [68.1, 665.0], [68.2, 665.0], [68.3, 666.0], [68.4, 667.0], [68.5, 668.0], [68.6, 669.0], [68.7, 669.0], [68.8, 670.0], [68.9, 671.0], [69.0, 672.0], [69.1, 672.0], [69.2, 673.0], [69.3, 674.0], [69.4, 675.0], [69.5, 676.0], [69.6, 677.0], [69.7, 678.0], [69.8, 679.0], [69.9, 680.0], [70.0, 681.0], [70.1, 682.0], [70.2, 683.0], [70.3, 684.0], [70.4, 686.0], [70.5, 687.0], [70.6, 688.0], [70.7, 689.0], [70.8, 690.0], [70.9, 691.0], [71.0, 692.0], [71.1, 693.0], [71.2, 694.0], [71.3, 695.0], [71.4, 696.0], [71.5, 697.0], [71.6, 698.0], [71.7, 699.0], [71.8, 700.0], [71.9, 701.0], [72.0, 702.0], [72.1, 703.0], [72.2, 704.0], [72.3, 705.0], [72.4, 706.0], [72.5, 707.0], [72.6, 709.0], [72.7, 710.0], [72.8, 710.0], [72.9, 711.0], [73.0, 712.0], [73.1, 714.0], [73.2, 715.0], [73.3, 716.0], [73.4, 717.0], [73.5, 718.0], [73.6, 719.0], [73.7, 720.0], [73.8, 721.0], [73.9, 722.0], [74.0, 723.0], [74.1, 724.0], [74.2, 725.0], [74.3, 726.0], [74.4, 727.0], [74.5, 727.0], [74.6, 728.0], [74.7, 729.0], [74.8, 729.0], [74.9, 730.0], [75.0, 731.0], [75.1, 732.0], [75.2, 733.0], [75.3, 734.0], [75.4, 735.0], [75.5, 736.0], [75.6, 737.0], [75.7, 738.0], [75.8, 739.0], [75.9, 741.0], [76.0, 742.0], [76.1, 743.0], [76.2, 744.0], [76.3, 745.0], [76.4, 747.0], [76.5, 748.0], [76.6, 750.0], [76.7, 751.0], [76.8, 752.0], [76.9, 754.0], [77.0, 755.0], [77.1, 756.0], [77.2, 758.0], [77.3, 759.0], [77.4, 760.0], [77.5, 761.0], [77.6, 762.0], [77.7, 763.0], [77.8, 765.0], [77.9, 766.0], [78.0, 767.0], [78.1, 768.0], [78.2, 769.0], [78.3, 770.0], [78.4, 771.0], [78.5, 772.0], [78.6, 773.0], [78.7, 774.0], [78.8, 774.0], [78.9, 775.0], [79.0, 776.0], [79.1, 777.0], [79.2, 779.0], [79.3, 780.0], [79.4, 781.0], [79.5, 782.0], [79.6, 783.0], [79.7, 784.0], [79.8, 785.0], [79.9, 786.0], [80.0, 787.0], [80.1, 788.0], [80.2, 789.0], [80.3, 790.0], [80.4, 792.0], [80.5, 793.0], [80.6, 794.0], [80.7, 795.0], [80.8, 796.0], [80.9, 798.0], [81.0, 799.0], [81.1, 800.0], [81.2, 801.0], [81.3, 803.0], [81.4, 804.0], [81.5, 805.0], [81.6, 807.0], [81.7, 808.0], [81.8, 809.0], [81.9, 811.0], [82.0, 812.0], [82.1, 814.0], [82.2, 815.0], [82.3, 816.0], [82.4, 817.0], [82.5, 818.0], [82.6, 820.0], [82.7, 821.0], [82.8, 822.0], [82.9, 823.0], [83.0, 824.0], [83.1, 826.0], [83.2, 827.0], [83.3, 828.0], [83.4, 829.0], [83.5, 830.0], [83.6, 831.0], [83.7, 832.0], [83.8, 833.0], [83.9, 834.0], [84.0, 836.0], [84.1, 837.0], [84.2, 838.0], [84.3, 840.0], [84.4, 841.0], [84.5, 843.0], [84.6, 844.0], [84.7, 846.0], [84.8, 848.0], [84.9, 849.0], [85.0, 851.0], [85.1, 852.0], [85.2, 854.0], [85.3, 856.0], [85.4, 857.0], [85.5, 859.0], [85.6, 861.0], [85.7, 862.0], [85.8, 863.0], [85.9, 865.0], [86.0, 866.0], [86.1, 867.0], [86.2, 869.0], [86.3, 870.0], [86.4, 872.0], [86.5, 873.0], [86.6, 875.0], [86.7, 876.0], [86.8, 877.0], [86.9, 879.0], [87.0, 880.0], [87.1, 882.0], [87.2, 884.0], [87.3, 887.0], [87.4, 890.0], [87.5, 893.0], [87.6, 895.0], [87.7, 898.0], [87.8, 901.0], [87.9, 904.0], [88.0, 906.0], [88.1, 908.0], [88.2, 910.0], [88.3, 911.0], [88.4, 913.0], [88.5, 916.0], [88.6, 919.0], [88.7, 921.0], [88.8, 922.0], [88.9, 924.0], [89.0, 926.0], [89.1, 928.0], [89.2, 930.0], [89.3, 932.0], [89.4, 934.0], [89.5, 936.0], [89.6, 938.0], [89.7, 940.0], [89.8, 942.0], [89.9, 944.0], [90.0, 946.0], [90.1, 948.0], [90.2, 951.0], [90.3, 954.0], [90.4, 957.0], [90.5, 959.0], [90.6, 960.0], [90.7, 962.0], [90.8, 964.0], [90.9, 966.0], [91.0, 968.0], [91.1, 970.0], [91.2, 973.0], [91.3, 975.0], [91.4, 977.0], [91.5, 978.0], [91.6, 980.0], [91.7, 982.0], [91.8, 985.0], [91.9, 988.0], [92.0, 991.0], [92.1, 994.0], [92.2, 997.0], [92.3, 999.0], [92.4, 1001.0], [92.5, 1003.0], [92.6, 1006.0], [92.7, 1009.0], [92.8, 1012.0], [92.9, 1016.0], [93.0, 1020.0], [93.1, 1025.0], [93.2, 1028.0], [93.3, 1033.0], [93.4, 1038.0], [93.5, 1043.0], [93.6, 1049.0], [93.7, 1054.0], [93.8, 1060.0], [93.9, 1065.0], [94.0, 1070.0], [94.1, 1075.0], [94.2, 1079.0], [94.3, 1085.0], [94.4, 1093.0], [94.5, 1099.0], [94.6, 1105.0], [94.7, 1114.0], [94.8, 1122.0], [94.9, 1130.0], [95.0, 1137.0], [95.1, 1147.0], [95.2, 1157.0], [95.3, 1167.0], [95.4, 1180.0], [95.5, 1190.0], [95.6, 1204.0], [95.7, 1217.0], [95.8, 1229.0], [95.9, 1237.0], [96.0, 1244.0], [96.1, 1250.0], [96.2, 1256.0], [96.3, 1264.0], [96.4, 1273.0], [96.5, 1280.0], [96.6, 1286.0], [96.7, 1291.0], [96.8, 1299.0], [96.9, 1311.0], [97.0, 1322.0], [97.1, 1336.0], [97.2, 1345.0], [97.3, 1355.0], [97.4, 1362.0], [97.5, 1370.0], [97.6, 1375.0], [97.7, 1380.0], [97.8, 1384.0], [97.9, 1389.0], [98.0, 1398.0], [98.1, 1416.0], [98.2, 1441.0], [98.3, 1466.0], [98.4, 1494.0], [98.5, 1513.0], [98.6, 1528.0], [98.7, 1551.0], [98.8, 1573.0], [98.9, 1591.0], [99.0, 1601.0], [99.1, 1610.0], [99.2, 1619.0], [99.3, 1632.0], [99.4, 1677.0], [99.5, 1727.0], [99.6, 1778.0], [99.7, 1844.0], [99.8, 1946.0], [99.9, 2101.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 46226.0, "series": [{"data": [[0.0, 3546.0], [600.0, 28035.0], [700.0, 18630.0], [800.0, 13374.0], [900.0, 9154.0], [1000.0, 4382.0], [1100.0, 2127.0], [1200.0, 2468.0], [1300.0, 2419.0], [1400.0, 818.0], [1500.0, 1111.0], [100.0, 1068.0], [1600.0, 964.0], [1700.0, 326.0], [1800.0, 301.0], [1900.0, 151.0], [2000.0, 103.0], [2100.0, 85.0], [2200.0, 27.0], [2300.0, 36.0], [2400.0, 15.0], [2500.0, 14.0], [2600.0, 6.0], [2700.0, 4.0], [2800.0, 7.0], [2900.0, 2.0], [3100.0, 2.0], [200.0, 2798.0], [3200.0, 2.0], [300.0, 18181.0], [400.0, 46226.0], [500.0, 43618.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3144.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 124440.0, "series": [{"data": [[0.0, 72416.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 124440.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3144.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 980.487846556614, "minX": 1.66670244E12, "maxY": 993.4613697537625, "series": [{"data": [[1.6667025E12, 980.487846556614], [1.66670244E12, 984.5795154437931]], "isOverall": false, "label": "Change employee name", "isController": false}, {"data": [[1.6667025E12, 987.7402883215333], [1.66670244E12, 993.4613697537625]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6667025E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 1209.7142857142858, "series": [{"data": [[2.0, 2.0], [3.0, 2.0], [4.0, 2.5], [5.0, 1.5], [6.0, 1.5], [7.0, 3.0], [8.0, 27.0], [9.0, 7.25], [10.0, 9.0], [11.0, 9.0], [13.0, 20.0], [14.0, 6.0], [15.0, 11.0], [16.0, 11.0], [17.0, 11.0], [18.0, 13.0], [19.0, 11.0], [21.0, 8.0], [22.0, 13.0], [23.0, 14.0], [24.0, 39.0], [25.0, 66.0], [27.0, 14.5], [28.0, 25.333333333333332], [29.0, 3.0], [30.0, 49.0], [31.0, 16.0], [33.0, 8.0], [32.0, 3.0], [35.0, 54.0], [34.0, 17.666666666666668], [37.0, 39.0], [36.0, 18.0], [39.0, 20.5], [38.0, 67.0], [41.0, 25.0], [40.0, 68.0], [43.0, 55.5], [42.0, 83.0], [45.0, 103.0], [44.0, 25.0], [46.0, 16.5], [49.0, 71.5], [48.0, 16.5], [51.0, 80.0], [50.0, 31.4], [53.0, 115.0], [52.0, 36.0], [55.0, 121.0], [54.0, 62.0], [57.0, 38.0], [56.0, 79.0], [59.0, 60.75], [58.0, 61.75], [61.0, 84.5], [60.0, 40.0], [63.0, 32.8], [62.0, 20.5], [66.0, 135.0], [65.0, 23.0], [64.0, 140.5], [71.0, 79.33333333333333], [70.0, 3.0], [69.0, 93.0], [68.0, 44.25], [75.0, 30.0], [74.0, 53.0], [73.0, 111.66666666666666], [79.0, 159.0], [76.0, 62.0], [83.0, 348.0], [81.0, 3.0], [87.0, 72.75], [85.0, 53.75], [84.0, 67.0], [90.0, 158.0], [89.0, 76.0], [95.0, 80.0], [94.0, 79.0], [93.0, 79.5], [98.0, 78.0], [97.0, 161.0], [96.0, 79.0], [103.0, 54.66666666666667], [101.0, 122.0], [100.0, 82.25], [107.0, 118.44444444444444], [105.0, 103.0], [104.0, 81.0], [110.0, 130.0], [109.0, 91.0], [108.0, 47.5], [115.0, 67.75], [112.0, 47.5], [119.0, 95.5], [117.0, 95.0], [116.0, 48.0], [122.0, 149.5], [121.0, 115.71428571428572], [120.0, 49.25], [126.0, 136.0], [125.0, 73.75], [124.0, 151.49999999999997], [135.0, 98.5], [134.0, 205.0], [133.0, 183.6], [132.0, 125.25], [131.0, 80.2], [130.0, 99.66666666666667], [129.0, 165.0], [143.0, 41.666666666666664], [142.0, 164.16666666666669], [141.0, 8.0], [137.0, 54.0], [150.0, 8.0], [149.0, 90.0], [147.0, 298.3333333333333], [146.0, 92.0], [145.0, 95.8], [144.0, 256.0], [159.0, 51.0], [158.0, 8.0], [157.0, 90.0], [156.0, 90.5], [153.0, 90.0], [152.0, 145.25], [167.0, 304.8333333333333], [166.0, 209.0], [165.0, 79.41666666666667], [163.0, 88.66666666666666], [161.0, 47.0], [160.0, 84.75], [175.0, 232.66666666666669], [173.0, 148.33333333333331], [171.0, 252.5], [170.0, 114.75000000000001], [168.0, 105.33333333333334], [183.0, 92.0], [182.0, 184.0], [181.0, 93.0], [179.0, 246.77777777777777], [177.0, 88.0], [176.0, 291.66666666666663], [185.0, 141.5], [186.0, 105.16666666666667], [187.0, 77.0], [191.0, 464.0], [190.0, 98.0], [189.0, 225.2], [184.0, 157.0], [196.0, 85.0], [198.0, 180.8181818181818], [193.0, 99.5], [207.0, 61.50000000000001], [205.0, 213.0], [203.0, 6.0], [202.0, 59.375], [201.0, 232.57142857142858], [200.0, 109.0], [210.0, 100.57142857142857], [211.0, 113.37500000000003], [214.0, 273.6], [212.0, 172.5], [208.0, 114.0], [223.0, 271.0], [222.0, 134.33333333333331], [221.0, 139.75], [220.0, 52.33333333333333], [219.0, 204.33333333333334], [217.0, 199.66666666666666], [231.0, 184.0], [230.0, 303.25], [228.0, 281.5], [227.0, 129.5], [226.0, 141.0], [225.0, 249.6], [224.0, 240.0], [235.0, 121.5], [239.0, 28.0], [237.0, 253.0], [234.0, 247.5], [233.0, 580.0], [232.0, 353.75], [242.0, 94.5], [244.0, 104.66666666666666], [245.0, 106.75], [247.0, 158.0], [243.0, 267.2], [241.0, 228.66666666666666], [240.0, 203.0], [251.0, 121.4], [255.0, 269.0], [254.0, 255.0], [253.0, 137.0], [252.0, 161.0], [250.0, 32.0], [249.0, 150.75], [270.0, 203.0], [261.0, 159.0], [260.0, 271.5], [262.0, 106.6], [263.0, 156.0], [257.0, 256.1666666666667], [256.0, 159.0], [271.0, 49.0], [268.0, 368.0], [259.0, 168.75], [267.0, 279.0], [266.0, 163.14285714285714], [265.0, 432.0], [264.0, 252.49999999999994], [285.0, 38.0], [280.0, 155.5], [276.0, 259.74999999999994], [278.0, 116.5], [277.0, 315.4], [281.0, 149.57575757575754], [282.0, 86.5], [286.0, 231.75000000000003], [284.0, 189.66666666666666], [275.0, 236.0], [274.0, 272.0], [273.0, 270.0], [272.0, 196.66666666666666], [283.0, 140.33333333333334], [279.0, 173.5], [300.0, 276.6666666666667], [289.0, 76.83333333333333], [291.0, 76.5], [290.0, 180.0], [293.0, 256.7142857142857], [292.0, 279.0], [294.0, 279.0], [295.0, 157.0], [298.0, 78.0], [301.0, 213.0], [302.0, 208.0], [299.0, 184.0], [297.0, 80.0], [296.0, 497.0], [317.0, 62.0], [305.0, 137.4], [306.0, 70.0], [316.0, 88.0], [307.0, 81.0], [308.0, 126.5], [309.0, 194.16666666666669], [311.0, 151.5], [304.0, 176.33333333333334], [310.0, 84.5], [312.0, 169.25], [314.0, 206.5], [313.0, 284.0], [319.0, 89.0], [318.0, 155.0], [334.0, 207.66666666666666], [320.0, 113.33333333333333], [321.0, 288.6666666666667], [323.0, 88.5], [322.0, 154.83333333333331], [327.0, 150.88888888888889], [325.0, 90.0], [324.0, 436.0], [335.0, 313.75], [333.0, 144.0], [332.0, 702.0], [331.0, 103.0], [330.0, 92.5], [329.0, 158.5], [328.0, 208.66666666666666], [348.0, 112.66666666666667], [337.0, 367.25], [339.0, 95.5], [338.0, 99.0], [340.0, 99.0], [341.0, 62.0], [343.0, 88.0], [336.0, 841.0], [342.0, 174.88888888888889], [347.0, 126.83333333333333], [346.0, 112.375], [349.0, 84.66666666666666], [351.0, 91.0], [350.0, 107.16666666666666], [365.0, 94.0], [367.0, 114.6], [364.0, 118.5], [355.0, 92.0], [354.0, 91.66666666666667], [353.0, 218.5], [352.0, 46.5], [363.0, 92.0], [362.0, 93.0], [361.0, 92.0], [360.0, 91.66666666666667], [359.0, 92.0], [357.0, 92.0], [356.0, 91.33333333333333], [382.0, 45.0], [383.0, 154.0], [381.0, 73.33333333333333], [380.0, 107.0], [379.0, 164.0], [378.0, 270.5], [377.0, 122.81818181818183], [376.0, 105.0], [375.0, 105.0], [369.0, 355.0], [368.0, 196.0], [371.0, 105.0], [370.0, 145.0], [374.0, 105.0], [373.0, 104.0], [372.0, 105.0], [398.0, 105.42857142857142], [394.0, 79.5], [395.0, 157.0], [399.0, 132.88888888888889], [397.0, 114.0], [396.0, 107.0], [393.0, 112.0], [392.0, 110.33333333333333], [391.0, 83.25], [384.0, 153.5], [386.0, 130.74999999999997], [385.0, 107.33333333333333], [390.0, 107.0], [389.0, 280.0], [388.0, 99.5], [412.0, 143.0], [404.0, 166.0], [414.0, 143.75], [411.0, 138.6], [410.0, 408.0], [409.0, 203.25], [407.0, 211.0], [401.0, 115.66666666666667], [400.0, 113.0], [403.0, 80.33333333333333], [402.0, 115.0], [406.0, 199.0], [405.0, 116.0], [430.0, 208.0], [431.0, 262.3333333333333], [429.0, 255.5], [428.0, 183.33333333333334], [427.0, 356.1666666666667], [426.0, 211.0909090909091], [425.0, 220.5], [423.0, 155.0], [416.0, 220.5], [419.0, 166.25], [417.0, 242.5], [422.0, 286.0], [420.0, 167.5], [446.0, 220.64705882352942], [442.0, 176.66666666666666], [445.0, 205.0], [447.0, 136.0], [444.0, 134.0], [443.0, 291.5], [441.0, 251.5], [440.0, 213.75], [439.0, 135.0], [432.0, 267.625], [435.0, 132.0], [434.0, 227.75], [438.0, 261.375], [437.0, 235.0], [436.0, 202.20000000000002], [462.0, 164.29999999999998], [452.0, 173.0], [455.0, 175.0], [449.0, 135.0], [448.0, 223.0], [451.0, 136.5], [450.0, 174.0], [453.0, 137.75], [463.0, 229.62500000000003], [461.0, 134.0], [460.0, 133.5], [459.0, 133.5], [458.0, 133.33333333333334], [457.0, 133.5], [456.0, 160.33333333333334], [479.0, 185.99999999999997], [476.0, 72.0], [466.0, 262.1111111111111], [465.0, 134.0], [464.0, 132.0], [475.0, 195.55555555555554], [474.0, 155.25], [473.0, 134.33333333333334], [472.0, 114.66666666666667], [471.0, 209.0], [470.0, 194.76923076923077], [469.0, 266.5], [468.0, 289.0], [494.0, 212.0], [495.0, 162.33333333333334], [493.0, 152.72727272727272], [492.0, 205.25], [491.0, 140.5], [490.0, 162.33333333333334], [488.0, 260.71428571428567], [486.0, 157.0], [481.0, 162.0], [480.0, 137.6], [483.0, 176.33333333333334], [482.0, 139.0], [485.0, 139.0], [484.0, 157.25], [510.0, 140.2], [508.0, 166.66666666666666], [499.0, 139.0], [498.0, 160.85714285714286], [497.0, 138.0], [496.0, 153.0], [507.0, 233.66666666666666], [506.0, 140.0], [505.0, 245.0], [504.0, 171.5], [503.0, 165.0], [502.0, 176.5], [501.0, 177.5], [500.0, 140.0], [540.0, 186.5], [528.0, 223.0], [530.0, 150.66666666666666], [532.0, 208.0], [542.0, 201.33333333333334], [538.0, 210.875], [536.0, 226.0], [512.0, 140.0], [514.0, 140.5], [516.0, 137.5], [518.0, 218.0], [526.0, 182.0], [524.0, 318.5], [522.0, 231.5], [520.0, 293.0], [534.0, 201.85714285714286], [572.0, 220.25], [562.0, 216.1176470588235], [560.0, 276.5], [564.0, 184.63636363636365], [570.0, 321.625], [568.0, 262.3333333333333], [550.0, 267.5], [548.0, 355.5], [546.0, 322.25], [544.0, 228.5], [558.0, 219.25000000000003], [556.0, 239.0], [554.0, 237.8], [552.0, 235.0], [566.0, 197.4], [576.0, 310.22222222222223], [604.0, 300.2857142857143], [600.0, 199.3913043478261], [590.0, 301.0], [578.0, 363.5], [580.0, 383.6], [582.0, 321.72727272727275], [588.0, 324.0], [586.0, 291.0], [584.0, 298.090909090909], [592.0, 213.66666666666666], [594.0, 215.66666666666666], [596.0, 372.16666666666663], [606.0, 220.75], [602.0, 340.3333333333333], [598.0, 302.54545454545456], [610.0, 334.0], [608.0, 359.2], [612.0, 252.375], [622.0, 260.5], [620.0, 229.5], [616.0, 310.5], [624.0, 303.75], [626.0, 371.0], [628.0, 296.2], [630.0, 317.14285714285717], [638.0, 318.42857142857144], [636.0, 303.8333333333333], [634.0, 263.5], [632.0, 237.125], [614.0, 235.0], [642.0, 301.25], [668.0, 305.0], [640.0, 290.0], [644.0, 230.2], [646.0, 302.0], [654.0, 232.0], [652.0, 234.0], [650.0, 229.58823529411765], [648.0, 255.33333333333334], [656.0, 291.14285714285717], [658.0, 275.2], [660.0, 371.0], [662.0, 279.0], [670.0, 319.1111111111111], [666.0, 279.5], [664.0, 337.0], [700.0, 254.33333333333334], [688.0, 233.5], [690.0, 261.14285714285717], [692.0, 245.8], [702.0, 231.0], [698.0, 254.33333333333334], [696.0, 233.0], [672.0, 239.0], [674.0, 239.0], [676.0, 284.6666666666667], [678.0, 374.0], [686.0, 245.73333333333335], [684.0, 267.5], [682.0, 307.0], [680.0, 238.0], [694.0, 296.0], [704.0, 230.66666666666666], [732.0, 308.3333333333333], [712.0, 217.0], [714.0, 209.0], [716.0, 219.55555555555557], [706.0, 255.09999999999997], [708.0, 225.0], [710.0, 190.33333333333334], [718.0, 197.1111111111111], [728.0, 225.4], [730.0, 308.6666666666667], [720.0, 202.0], [722.0, 206.41666666666663], [724.0, 322.5714285714286], [726.0, 251.0], [734.0, 315.75], [740.0, 272.30769230769226], [764.0, 260.25], [750.0, 398.5], [748.0, 272.36363636363643], [746.0, 378.13636363636357], [744.0, 332.27272727272725], [738.0, 204.0], [742.0, 275.0], [752.0, 392.6666666666667], [754.0, 546.0], [756.0, 385.6666666666667], [758.0, 369.00000000000006], [766.0, 402.0], [762.0, 348.2], [760.0, 367.0], [770.0, 365.5], [792.0, 297.5142857142857], [774.0, 391.9090909090909], [772.0, 555.0], [768.0, 365.875], [782.0, 285.2857142857143], [780.0, 302.20000000000005], [778.0, 303.90000000000003], [786.0, 379.38461538461536], [784.0, 315.08000000000004], [788.0, 292.1666666666667], [790.0, 306.2142857142857], [798.0, 287.0], [796.0, 311.8], [794.0, 258.3333333333333], [802.0, 384.1875], [828.0, 322.5], [800.0, 320.44444444444446], [804.0, 400.1428571428571], [806.0, 389.2631578947369], [814.0, 497.5], [812.0, 455.33333333333337], [810.0, 387.3571428571429], [808.0, 256.0], [816.0, 414.57142857142856], [818.0, 320.6666666666667], [820.0, 309.5], [822.0, 375.7941176470588], [830.0, 288.5], [826.0, 420.62962962962956], [824.0, 369.26666666666665], [836.0, 341.0], [860.0, 350.5], [834.0, 321.3], [838.0, 390.4285714285715], [856.0, 338.0], [844.0, 356.0384615384616], [842.0, 331.6666666666667], [840.0, 457.25], [832.0, 323.0], [846.0, 330.57142857142856], [852.0, 376.8888888888889], [850.0, 835.0], [848.0, 413.0], [854.0, 351.0], [862.0, 350.5909090909092], [858.0, 340.2857142857143], [890.0, 338.00000000000006], [894.0, 414.65000000000003], [880.0, 346.2142857142857], [884.0, 273.5], [892.0, 299.1666666666667], [888.0, 378.5], [870.0, 393.8], [868.0, 326.3333333333333], [866.0, 352.73333333333335], [864.0, 345.6], [878.0, 322.125], [876.0, 372.2702702702702], [874.0, 306.4], [872.0, 326.22222222222223], [886.0, 326.5], [898.0, 453.62790697674404], [924.0, 477.7777777777778], [902.0, 430.1176470588235], [900.0, 421.5], [896.0, 391.8750000000001], [910.0, 424.75925925925924], [908.0, 448.1363636363636], [906.0, 433.75], [912.0, 464.7192982456141], [914.0, 442.25], [916.0, 505.75], [918.0, 629.4736842105264], [926.0, 533.8387096774194], [922.0, 485.5], [920.0, 479.8586956521739], [954.0, 588.0714285714286], [958.0, 515.9655172413793], [944.0, 432.2564102564103], [946.0, 561.9375], [948.0, 620.7272727272729], [956.0, 543.0888888888887], [952.0, 578.7727272727273], [932.0, 467.0], [930.0, 611.5], [928.0, 562.0], [942.0, 467.8571428571429], [940.0, 566.3214285714283], [938.0, 525.8965517241379], [936.0, 478.3333333333333], [950.0, 491.4285714285714], [974.0, 593.5490196078428], [968.0, 541.5], [970.0, 621.9444444444443], [972.0, 600.593220338983], [976.0, 597.3026315789473], [978.0, 647.5522388059702], [982.0, 536.9999999999998], [980.0, 674.1500000000001], [990.0, 787.6880000000003], [988.0, 796.9], [986.0, 641.4583333333334], [984.0, 599.0582524271842], [966.0, 552.2790697674419], [964.0, 489.75], [962.0, 641.4999999999999], [960.0, 665.8], [994.0, 689.2153846153849], [1020.0, 466.0833333333333], [992.0, 743.2222222222222], [996.0, 445.9528301886791], [1006.0, 403.0], [1004.0, 432.0], [1002.0, 470.0714285714286], [1000.0, 438.86951097804376], [1008.0, 401.5], [1010.0, 431.38461538461536], [1012.0, 404.5], [1022.0, 455.5], [1018.0, 456.0], [998.0, 591.7894736842106], [1014.0, 738.0], [1076.0, 382.0], [1052.0, 479.57142857142856], [1048.0, 424.0], [1044.0, 446.00000000000006], [1056.0, 371.4], [1060.0, 483.3529411764706], [1064.0, 372.0], [1068.0, 516.0], [1080.0, 408.0], [1072.0, 380.0], [1036.0, 424.625], [1032.0, 408.5], [1028.0, 487.09999999999997], [1024.0, 505.6666666666667], [1088.0, 369.0], [1100.0, 540.7142857142858], [1096.0, 476.2], [1092.0, 479.5294117647059], [1104.0, 466.14285714285717], [1108.0, 527.6666666666666], [1112.0, 488.1666666666667], [1116.0, 485.55555555555554], [1124.0, 531.5], [1128.0, 494.3571428571428], [1132.0, 406.0], [1148.0, 407.0], [1140.0, 443.72727272727275], [1152.0, 418.6], [1180.0, 476.5], [1176.0, 516.1428571428571], [1172.0, 461.8571428571429], [1168.0, 420.0], [1156.0, 417.0], [1160.0, 441.14285714285717], [1164.0, 517.1249999999999], [1184.0, 534.8571428571429], [1188.0, 528.3333333333334], [1192.0, 443.5], [1196.0, 553.1666666666667], [1212.0, 576.047619047619], [1208.0, 505.0], [1204.0, 538.0], [1200.0, 613.0], [1220.0, 530.0], [1228.0, 547.0], [1268.0, 479.33333333333337], [1224.0, 538.5], [1216.0, 612.1], [1244.0, 592.75], [1264.0, 614.3333333333334], [1236.0, 505.375], [1240.0, 494.6], [1252.0, 591.9], [1256.0, 588.0], [1276.0, 572.25], [1272.0, 526.0], [1332.0, 574.625], [1312.0, 559.1], [1316.0, 569.5], [1320.0, 622.4444444444445], [1292.0, 521.0], [1280.0, 526.0], [1284.0, 614.1666666666667], [1288.0, 521.4], [1308.0, 524.0], [1304.0, 586.5], [1300.0, 589.0625], [1336.0, 524.5], [1340.0, 546.8], [1372.0, 526.3333333333334], [1360.0, 570.2727272727273], [1368.0, 524.8333333333333], [1364.0, 590.25], [1344.0, 561.2692307692307], [1376.0, 527.5], [1380.0, 573.75], [1384.0, 629.1428571428571], [1388.0, 525.0], [1392.0, 539.0], [1356.0, 531.0], [1348.0, 530.5], [1396.0, 523.625], [1400.0, 605.2666666666667], [1404.0, 629.8571428571428], [1456.0, 609.3076923076924], [1420.0, 521.0], [1416.0, 521.0], [1408.0, 553.75], [1412.0, 519.9999999999999], [1436.0, 513.7142857142858], [1464.0, 548.25], [1460.0, 635.4285714285714], [1440.0, 544.7142857142857], [1444.0, 497.5], [1448.0, 535.4], [1424.0, 515.3333333333334], [1428.0, 558.25], [1432.0, 565.75], [1484.0, 560.0], [1488.0, 484.0], [1496.0, 501.5], [1500.0, 456.0], [1504.0, 486.6666666666667], [1508.0, 589.75], [1532.0, 477.3333333333333], [1528.0, 463.4], [1520.0, 471.5], [1480.0, 496.25], [1476.0, 539.125], [1472.0, 540.2857142857143], [1524.0, 520.5], [1512.0, 579.5000000000001], [1516.0, 460.3333333333333], [1548.0, 447.0], [1536.0, 540.6666666666667], [1544.0, 450.0], [1540.0, 447.0], [1584.0, 523.0], [1596.0, 449.0], [1568.0, 560.7241379310345], [1572.0, 500.0], [1580.0, 519.0], [1556.0, 557.4285714285713], [1552.0, 502.75], [1560.0, 528.4545454545454], [1564.0, 579.4], [1612.0, 528.75], [1600.0, 454.0], [1604.0, 412.3076923076924], [1628.0, 340.75], [1608.0, 604.25], [1632.0, 476.49999999999994], [1660.0, 637.0], [1656.0, 597.1111111111111], [1652.0, 517.1250000000001], [1648.0, 477.0], [1636.0, 490.14285714285717], [1640.0, 459.0], [1620.0, 495.7058823529413], [1616.0, 511.75], [1624.0, 570.5], [1672.0, 380.6], [1668.0, 555.25], [1664.0, 566.3333333333334], [1692.0, 571.75], [1688.0, 320.0], [1676.0, 494.6], [1712.0, 610.1875], [1716.0, 585.8], [1720.0, 541.5714285714286], [1724.0, 536.1111111111111], [1696.0, 554.8571428571429], [1704.0, 523.5833333333334], [1708.0, 496.53333333333336], [1680.0, 502.2], [1684.0, 526.7142857142858], [1736.0, 590.7499999999999], [1728.0, 543.0], [1756.0, 503.5], [1752.0, 567.3157894736843], [1732.0, 445.0], [1740.0, 611.1071428571429], [1760.0, 502.5], [1788.0, 603.5], [1784.0, 580.2380952380952], [1780.0, 599.9130434782609], [1776.0, 617.3333333333334], [1768.0, 504.25], [1772.0, 528.3], [1744.0, 547.6363636363636], [1748.0, 625.6538461538463], [1804.0, 523.6666666666666], [1792.0, 620.7222222222223], [1796.0, 700.7], [1800.0, 747.5], [1840.0, 508.0], [1844.0, 934.2], [1848.0, 568.9285714285714], [1852.0, 708.0], [1824.0, 640.4347826086956], [1828.0, 568.1], [1832.0, 648.3], [1836.0, 511.5], [1808.0, 563.9285714285717], [1812.0, 607.3333333333334], [1816.0, 645.6111111111112], [1820.0, 768.5], [1864.0, 605.5151515151515], [1868.0, 679.875], [1876.0, 678.1666666666667], [1860.0, 678.2], [1856.0, 631.3529411764706], [1884.0, 684.2375], [1880.0, 543.3333333333334], [1904.0, 702.78], [1908.0, 714.9047619047622], [1912.0, 771.8333333333333], [1916.0, 846.3749999999999], [1888.0, 642.8947368421053], [1892.0, 612.2666666666668], [1896.0, 696.3529411764707], [1900.0, 698.5517241379309], [1872.0, 726.5], [1932.0, 1011.4285714285717], [1928.0, 863.6400000000001], [1920.0, 669.6666666666666], [1924.0, 890.7142857142858], [1944.0, 1029.8199999999997], [1948.0, 1031.625], [1968.0, 988.6172839506171], [1972.0, 746.12], [1976.0, 842.5999999999999], [1980.0, 600.75], [1952.0, 1000.0571428571429], [1956.0, 1070.942528735632], [1960.0, 965.6000000000001], [1964.0, 769.5555555555555], [1936.0, 1021.9724770642202], [1940.0, 990.9062499999999], [1988.0, 821.5465116279066], [1992.0, 864.5178571428571], [1996.0, 855.8076923076923], [2000.0, 636.2366801731849], [1984.0, 797.4554455445545], [1029.0, 417.3333333333333], [1025.0, 456.0], [1037.0, 410.0], [1033.0, 444.1666666666667], [1073.0, 419.8], [1077.0, 412.59999999999997], [1045.0, 473.25], [1041.0, 444.91666666666674], [1049.0, 487.4615384615384], [1053.0, 405.0], [1057.0, 476.41666666666663], [1061.0, 419.6666666666667], [1065.0, 428.4], [1069.0, 499.3333333333333], [1085.0, 442.4347826086956], [1081.0, 478.1], [1137.0, 440.8461538461538], [1145.0, 492.3333333333333], [1121.0, 542.4444444444445], [1129.0, 406.0], [1149.0, 505.3333333333333], [1141.0, 409.0], [1089.0, 433.5], [1093.0, 480.38888888888886], [1097.0, 442.0], [1101.0, 506.8666666666666], [1117.0, 403.0], [1113.0, 607.8571428571428], [1109.0, 476.44444444444446], [1105.0, 403.0], [1133.0, 524.85], [1165.0, 489.07142857142856], [1213.0, 491.5], [1153.0, 789.0], [1157.0, 211.5], [1161.0, 533.5999999999999], [1201.0, 468.0], [1205.0, 525.5], [1185.0, 469.6875], [1177.0, 499.16666666666663], [1173.0, 422.0], [1169.0, 514.0], [1181.0, 427.0], [1193.0, 484.4], [1189.0, 422.0], [1197.0, 514.5555555555555], [1225.0, 564.2], [1265.0, 569.5], [1273.0, 527.0], [1229.0, 512.25], [1221.0, 509.0], [1217.0, 502.5], [1245.0, 521.0], [1241.0, 515.0], [1237.0, 463.37500000000006], [1249.0, 519.5], [1257.0, 580.0], [1261.0, 613.6923076923076], [1277.0, 591.8235294117648], [1269.0, 571.25], [1341.0, 705.0], [1329.0, 522.0], [1317.0, 595.5263157894738], [1313.0, 580.2], [1321.0, 525.5], [1325.0, 591.4285714285714], [1281.0, 523.0], [1285.0, 643.25], [1289.0, 515.0], [1293.0, 521.0], [1309.0, 558.75], [1305.0, 522.0], [1301.0, 579.6999999999999], [1297.0, 499.11764705882354], [1333.0, 587.1666666666667], [1337.0, 525.0], [1405.0, 752.6], [1361.0, 599.1], [1369.0, 636.2727272727273], [1365.0, 523.0], [1373.0, 587.6666666666666], [1377.0, 528.25], [1381.0, 525.6666666666666], [1385.0, 602.75], [1389.0, 537.0], [1357.0, 530.0], [1353.0, 533.6666666666666], [1349.0, 560.4814814814816], [1397.0, 610.5999999999999], [1401.0, 527.5], [1417.0, 538.0416666666666], [1433.0, 519.8499999999999], [1409.0, 526.0], [1413.0, 520.5], [1437.0, 526.0], [1421.0, 583.0], [1461.0, 494.0], [1457.0, 494.0], [1465.0, 491.0], [1469.0, 577.8888888888889], [1441.0, 499.0], [1445.0, 522.0], [1449.0, 499.0], [1453.0, 569.0], [1425.0, 513.0], [1429.0, 512.0], [1501.0, 539.0], [1489.0, 519.0454545454545], [1493.0, 450.5], [1497.0, 502.0], [1505.0, 458.0], [1533.0, 575.8], [1521.0, 473.25], [1485.0, 526.6666666666666], [1481.0, 1.0], [1477.0, 499.0], [1473.0, 483.0], [1525.0, 483.53333333333336], [1509.0, 476.25], [1513.0, 505.6], [1517.0, 557.0833333333333], [1585.0, 500.75], [1537.0, 503.0], [1545.0, 488.7692307692308], [1549.0, 449.3333333333333], [1589.0, 403.8333333333333], [1593.0, 443.83333333333337], [1597.0, 527.4285714285713], [1573.0, 550.75], [1569.0, 473.8], [1577.0, 467.55555555555554], [1581.0, 529.6], [1553.0, 386.5], [1565.0, 493.9], [1609.0, 560.5625000000001], [1605.0, 473.7142857142858], [1601.0, 505.5], [1629.0, 605.2], [1625.0, 538.0714285714287], [1613.0, 516.7826086956521], [1633.0, 508.5], [1661.0, 562.3333333333334], [1657.0, 577.0], [1653.0, 478.7142857142857], [1649.0, 540.7692307692308], [1637.0, 517.3750000000001], [1641.0, 499.3333333333333], [1645.0, 547.4444444444445], [1621.0, 553.0833333333334], [1617.0, 546.2], [1673.0, 468.0], [1665.0, 515.185185185185], [1693.0, 559.3333333333334], [1685.0, 541.4444444444445], [1689.0, 457.27272727272725], [1669.0, 550.7241379310344], [1677.0, 544.75], [1713.0, 557.6666666666667], [1717.0, 906.0], [1721.0, 493.0], [1725.0, 547.6], [1701.0, 592.2857142857143], [1697.0, 487.75], [1709.0, 616.4444444444445], [1681.0, 990.0], [1733.0, 503.25], [1737.0, 580.1111111111111], [1757.0, 561.0], [1753.0, 919.0], [1729.0, 632.0], [1741.0, 554.8235294117649], [1761.0, 623.6], [1765.0, 554.2352941176472], [1789.0, 550.0], [1781.0, 559.5], [1785.0, 651.5], [1777.0, 550.1666666666666], [1769.0, 543.65], [1773.0, 503.0], [1745.0, 565.0], [1749.0, 582.4444444444445], [1805.0, 625.3333333333334], [1793.0, 561.8125], [1797.0, 585.0], [1801.0, 642.6999999999999], [1841.0, 507.3333333333333], [1845.0, 584.5], [1849.0, 511.5], [1853.0, 664.0344827586207], [1825.0, 575.0526315789474], [1829.0, 583.7142857142857], [1833.0, 511.25], [1809.0, 1042.0], [1813.0, 583.9310344827586], [1817.0, 618.4509803921569], [1821.0, 561.1904761904764], [1861.0, 650.1999999999999], [1865.0, 620.1176470588234], [1881.0, 756.3333333333334], [1857.0, 559.1818181818182], [1885.0, 672.46875], [1877.0, 684.4615384615385], [1869.0, 634.8461538461537], [1905.0, 654.3333333333333], [1909.0, 639.6666666666666], [1913.0, 753.0370370370371], [1917.0, 715.7288135593219], [1889.0, 765.111111111111], [1893.0, 732.8026315789473], [1897.0, 615.0], [1901.0, 705.8333333333334], [1873.0, 613.1111111111111], [1929.0, 909.5], [1925.0, 796.0000000000001], [1921.0, 801.3513513513514], [1945.0, 962.5000000000001], [1949.0, 1021.3478260869565], [1933.0, 1002.3209876543207], [1969.0, 952.8333333333334], [1973.0, 738.7037037037037], [1977.0, 796.7976190476189], [1981.0, 721.3333333333334], [1953.0, 1093.269841269841], [1957.0, 764.25], [1961.0, 1005.1470588235294], [1965.0, 994.6829268292682], [1937.0, 976.6451612903223], [1941.0, 940.5714285714286], [1989.0, 822.8503401360543], [1985.0, 816.0503597122305], [1993.0, 898.5666666666666], [1997.0, 830.2420971472625], [541.0, 207.75], [543.0, 188.66666666666669], [529.0, 266.2857142857143], [533.0, 266.6], [539.0, 148.0], [537.0, 165.25], [527.0, 139.0], [513.0, 139.0], [515.0, 200.25], [517.0, 191.0588235294118], [525.0, 229.99999999999997], [523.0, 622.0], [521.0, 323.0], [535.0, 208.0], [569.0, 197.33333333333334], [575.0, 249.4], [561.0, 247.27272727272728], [563.0, 287.3333333333333], [573.0, 290.8333333333333], [551.0, 235.0], [549.0, 150.0], [547.0, 241.5], [545.0, 229.0], [559.0, 279.0], [557.0, 182.0], [555.0, 225.59999999999997], [553.0, 324.0], [567.0, 228.41666666666666], [579.0, 346.6], [577.0, 246.66666666666666], [581.0, 400.8], [583.0, 168.0], [589.0, 268.25], [587.0, 371.90000000000003], [585.0, 379.3333333333333], [607.0, 245.88888888888889], [593.0, 256.66666666666663], [597.0, 282.3636363636364], [605.0, 362.3333333333333], [603.0, 273.57142857142856], [601.0, 264.0], [599.0, 362.7142857142857], [611.0, 297.0], [637.0, 223.0], [623.0, 341.0], [621.0, 229.0], [619.0, 261.3], [617.0, 256.22222222222223], [613.0, 269.5], [625.0, 345.6666666666667], [627.0, 319.0], [629.0, 326.2], [631.0, 344.5], [639.0, 314.44444444444446], [633.0, 281.0], [615.0, 329.27272727272725], [643.0, 210.14285714285714], [641.0, 278.5555555555556], [645.0, 320.0], [647.0, 299.625], [655.0, 317.0], [653.0, 233.0], [651.0, 378.6666666666667], [649.0, 233.0], [671.0, 239.0], [657.0, 325.3333333333333], [659.0, 270.23529411764713], [661.0, 364.0], [663.0, 255.66666666666666], [669.0, 270.0], [667.0, 271.2727272727273], [665.0, 273.07142857142856], [701.0, 254.33333333333334], [703.0, 277.6666666666667], [689.0, 282.0], [691.0, 233.0], [693.0, 234.0], [699.0, 253.66666666666666], [697.0, 269.0], [687.0, 275.8], [675.0, 388.3333333333333], [677.0, 343.3333333333333], [679.0, 373.5], [685.0, 267.75], [683.0, 276.2857142857143], [681.0, 188.5], [695.0, 264.5], [707.0, 260.5], [711.0, 191.5], [713.0, 255.5], [719.0, 226.6153846153846], [705.0, 251.33333333333334], [709.0, 246.0], [717.0, 228.66666666666666], [729.0, 296.0], [731.0, 238.5], [735.0, 335.8333333333333], [721.0, 202.0], [723.0, 275.0], [725.0, 320.44444444444446], [727.0, 257.5], [733.0, 302.75], [751.0, 346.75], [749.0, 412.20000000000005], [747.0, 325.3333333333333], [745.0, 454.1666666666667], [737.0, 352.8181818181818], [739.0, 283.5], [743.0, 391.09999999999997], [765.0, 246.83333333333334], [767.0, 225.0], [753.0, 399.7142857142857], [755.0, 306.0], [757.0, 397.5], [759.0, 394.375], [763.0, 369.0], [761.0, 222.0], [775.0, 335.9285714285714], [797.0, 324.1785714285715], [771.0, 228.33333333333334], [769.0, 349.4], [783.0, 347.90476190476187], [781.0, 236.0], [787.0, 318.75], [785.0, 287.45454545454544], [791.0, 261.0], [799.0, 326.0], [793.0, 265.72727272727275], [803.0, 348.46153846153845], [801.0, 309.5333333333333], [805.0, 281.5], [807.0, 497.0], [815.0, 357.5], [813.0, 322.0], [811.0, 300.625], [809.0, 279.0], [831.0, 322.5], [817.0, 412.42857142857144], [819.0, 265.16666666666663], [821.0, 319.7142857142857], [823.0, 332.16666666666663], [829.0, 328.2857142857143], [827.0, 358.6666666666667], [825.0, 295.0], [835.0, 358.2666666666667], [833.0, 341.59999999999997], [837.0, 291.0], [839.0, 368.59999999999997], [857.0, 351.0], [843.0, 351.79999999999995], [841.0, 349.8157894736841], [845.0, 527.0], [847.0, 364.3636363636363], [851.0, 346.2], [849.0, 312.9], [853.0, 370.00000000000006], [855.0, 326.7692307692308], [861.0, 350.4666666666667], [859.0, 270.0], [893.0, 375.64705882352945], [895.0, 393.5], [883.0, 311.0], [881.0, 273.0], [885.0, 277.0], [891.0, 404.0], [871.0, 353.12500000000006], [867.0, 404.5], [865.0, 273.2], [879.0, 403.5], [877.0, 368.0], [875.0, 317.25], [873.0, 315.3571428571429], [887.0, 360.0], [899.0, 437.5], [897.0, 451.0], [903.0, 436.4358974358974], [911.0, 381.6666666666667], [907.0, 468.0], [905.0, 431.8571428571429], [927.0, 395.0], [913.0, 519.1578947368421], [915.0, 457.97222222222223], [917.0, 578.6875], [919.0, 427.5], [925.0, 488.21621621621625], [923.0, 469.84615384615387], [921.0, 497.15384615384613], [957.0, 473.1481481481481], [959.0, 530.1836734693879], [945.0, 531.9166666666667], [947.0, 535.909090909091], [955.0, 537.151515151515], [935.0, 510.6666666666667], [933.0, 463.57142857142856], [931.0, 494.72727272727275], [929.0, 513.0], [941.0, 457.75], [939.0, 552.3333333333334], [937.0, 404.6666666666667], [949.0, 532.8], [987.0, 603.5897435897435], [991.0, 687.095238095238], [969.0, 519.6666666666666], [971.0, 503.52380952380946], [973.0, 622.8979591836733], [975.0, 674.1612903225807], [977.0, 605.8695652173913], [979.0, 575.6034482758619], [983.0, 576.3947368421054], [981.0, 522.0454545454546], [989.0, 771.6785714285716], [985.0, 602.1290322580647], [967.0, 577.3076923076925], [965.0, 605.8666666666667], [963.0, 570.2452830188679], [961.0, 619.5], [993.0, 726.135135135135], [997.0, 497.93724696356264], [1007.0, 433.3333333333333], [995.0, 571.6932826362485], [1005.0, 455.5], [1003.0, 443.8888888888889], [1001.0, 480.275], [1023.0, 621.2], [1009.0, 396.0], [1011.0, 471.125], [1013.0, 438.04999999999995], [1021.0, 506.0], [1019.0, 432.75], [1017.0, 445.0], [999.0, 558.0842105263156], [1015.0, 499.07317073170736], [1086.0, 416.59999999999997], [1078.0, 576.3333333333334], [1050.0, 484.42857142857144], [1054.0, 468.5], [1058.0, 421.0], [1062.0, 496.61111111111114], [1066.0, 496.9], [1070.0, 534.625], [1082.0, 380.0], [1074.0, 411.0], [1038.0, 415.5], [1030.0, 379.25], [1026.0, 480.4761904761904], [1094.0, 521.0555555555557], [1142.0, 537.6666666666666], [1102.0, 414.8], [1098.0, 510.6], [1090.0, 494.125], [1106.0, 453.4], [1110.0, 551.3], [1114.0, 616.5], [1150.0, 559.1818181818184], [1122.0, 404.0], [1130.0, 447.6666666666667], [1134.0, 495.99999999999994], [1146.0, 574.6], [1138.0, 411.0], [1154.0, 567.1666666666667], [1210.0, 472.0], [1178.0, 671.3333333333334], [1174.0, 423.0], [1182.0, 607.3333333333333], [1158.0, 417.0], [1162.0, 419.0], [1166.0, 617.8], [1186.0, 435.0], [1190.0, 425.6], [1194.0, 450.0], [1198.0, 476.6923076923077], [1214.0, 553.5], [1202.0, 498.2], [1222.0, 778.2], [1226.0, 513.0], [1218.0, 498.0], [1230.0, 567.5], [1246.0, 695.5], [1242.0, 518.5], [1266.0, 541.6666666666666], [1234.0, 542.1428571428571], [1238.0, 563.5], [1254.0, 509.0], [1250.0, 520.5], [1262.0, 727.5000000000001], [1258.0, 654.0], [1278.0, 524.0], [1270.0, 527.0], [1330.0, 596.1818181818182], [1318.0, 592.0000000000001], [1314.0, 557.125], [1322.0, 522.3076923076923], [1294.0, 522.0], [1310.0, 569.1428571428571], [1286.0, 520.0], [1290.0, 521.0], [1306.0, 545.1111111111111], [1334.0, 608.9230769230769], [1342.0, 507.25], [1338.0, 576.25], [1346.0, 573.9333333333333], [1354.0, 608.5], [1362.0, 678.0], [1370.0, 609.7272727272727], [1366.0, 626.5], [1374.0, 564.0], [1378.0, 642.4166666666667], [1382.0, 526.0], [1386.0, 524.0], [1390.0, 526.0], [1358.0, 531.0], [1350.0, 531.0], [1394.0, 556.1111111111111], [1398.0, 568.6666666666666], [1402.0, 597.5555555555555], [1406.0, 667.0], [1458.0, 494.0], [1418.0, 588.3000000000001], [1410.0, 521.0], [1414.0, 547.5], [1438.0, 438.85714285714283], [1434.0, 473.75], [1466.0, 566.2], [1442.0, 498.0], [1446.0, 499.3333333333333], [1450.0, 508.8571428571429], [1454.0, 495.0], [1426.0, 530.0], [1430.0, 553.5], [1502.0, 394.125], [1526.0, 571.6153846153846], [1490.0, 475.25], [1494.0, 470.1428571428571], [1498.0, 515.6666666666667], [1506.0, 456.6666666666667], [1534.0, 612.5], [1522.0, 474.6756756756757], [1486.0, 492.6666666666667], [1482.0, 516.6250000000001], [1510.0, 451.0], [1518.0, 543.9], [1514.0, 448.0], [1586.0, 502.0], [1594.0, 551.125], [1538.0, 579.3333333333334], [1566.0, 530.75], [1542.0, 447.0], [1546.0, 448.76923076923083], [1550.0, 467.2], [1590.0, 622.0], [1598.0, 522.625], [1570.0, 500.5], [1574.0, 477.3333333333333], [1578.0, 542.8571428571429], [1582.0, 585.25], [1554.0, 448.0], [1558.0, 462.375], [1562.0, 478.3333333333333], [1610.0, 395.22222222222223], [1614.0, 554.6666666666666], [1602.0, 558.0], [1630.0, 455.3333333333333], [1626.0, 517.4444444444445], [1606.0, 442.99999999999994], [1662.0, 554.6666666666666], [1658.0, 492.1333333333334], [1650.0, 511.84615384615387], [1634.0, 566.7142857142857], [1638.0, 495.3333333333333], [1642.0, 1.0], [1646.0, 691.3], [1618.0, 640.2], [1622.0, 465.25], [1674.0, 554.25], [1670.0, 493.0], [1666.0, 555.5000000000001], [1694.0, 481.75], [1686.0, 527.5882352941177], [1690.0, 460.99999999999994], [1678.0, 480.3333333333333], [1714.0, 487.8571428571429], [1718.0, 469.0], [1722.0, 493.0], [1726.0, 576.5], [1698.0, 577.625], [1702.0, 633.0], [1706.0, 491.5], [1710.0, 427.125], [1682.0, 456.0833333333333], [1730.0, 531.0], [1754.0, 479.1818181818182], [1758.0, 596.2580645161289], [1750.0, 498.5], [1734.0, 503.0], [1738.0, 659.4666666666666], [1742.0, 489.3333333333333], [1762.0, 539.5625], [1790.0, 551.2], [1778.0, 662.2222222222222], [1766.0, 585.1818181818182], [1770.0, 787.6249999999999], [1774.0, 555.6470588235294], [1746.0, 553.5], [1846.0, 473.66666666666663], [1806.0, 584.5555555555555], [1794.0, 528.0], [1798.0, 599.5555555555557], [1802.0, 519.5714285714286], [1842.0, 697.7500000000001], [1850.0, 542.36], [1854.0, 641.7037037037038], [1826.0, 592.3], [1830.0, 649.5333333333333], [1834.0, 573.4473684210524], [1838.0, 613.0833333333335], [1810.0, 647.2777777777777], [1814.0, 561.5], [1818.0, 531.0], [1822.0, 570.4166666666669], [1866.0, 442.6666666666667], [1862.0, 463.2], [1858.0, 612.2272727272725], [1886.0, 774.0], [1882.0, 590.2222222222223], [1878.0, 754.6799999999998], [1870.0, 583.0], [1906.0, 665.2352941176471], [1910.0, 990.8333333333334], [1914.0, 803.2537313432837], [1918.0, 728.5999999999999], [1890.0, 599.9999999999999], [1894.0, 616.0], [1898.0, 797.2], [1902.0, 772.95], [1874.0, 617.681818181818], [1926.0, 819.344827586207], [1942.0, 885.5555555555555], [1922.0, 758.3928571428571], [1950.0, 1041.7551020408162], [1946.0, 1034.8333333333335], [1934.0, 967.8800000000003], [1930.0, 1018.1111111111113], [1974.0, 756.5714285714284], [1970.0, 832.8333333333334], [1982.0, 790.892857142857], [1978.0, 736.8482758620688], [1954.0, 1063.8799999999994], [1958.0, 1013.4295774647892], [1962.0, 888.3846153846154], [1966.0, 1000.842105263158], [1938.0, 1064.0], [1986.0, 827.8333333333334], [1994.0, 881.5406360424022], [1990.0, 828.6486486486488], [1998.0, 709.2736131934034], [1031.0, 535.1428571428571], [1079.0, 468.42105263157885], [1027.0, 407.0], [1039.0, 459.0], [1075.0, 418.25], [1047.0, 427.4], [1051.0, 427.6666666666667], [1055.0, 479.75], [1063.0, 362.0], [1059.0, 405.22222222222223], [1067.0, 446.0], [1071.0, 492.2222222222223], [1087.0, 414.85714285714283], [1143.0, 332.66666666666663], [1151.0, 411.3333333333333], [1127.0, 636.0], [1131.0, 539.1999999999999], [1147.0, 441.5833333333333], [1139.0, 410.0], [1119.0, 523.6774193548389], [1091.0, 387.0], [1095.0, 424.3333333333333], [1099.0, 435.0], [1103.0, 462.75], [1115.0, 592.0], [1107.0, 499.99999999999994], [1135.0, 519.5], [1163.0, 445.3333333333333], [1203.0, 513.5], [1155.0, 508.3333333333333], [1159.0, 426.0], [1167.0, 550.4444444444446], [1211.0, 548.8000000000001], [1207.0, 546.8666666666667], [1215.0, 528.8000000000002], [1179.0, 458.0], [1175.0, 422.0], [1171.0, 493.0], [1183.0, 493.20000000000005], [1187.0, 466.23076923076917], [1195.0, 441.0], [1191.0, 450.0], [1199.0, 540.2857142857143], [1223.0, 560.25], [1231.0, 500.0], [1219.0, 505.5], [1247.0, 651.8749999999999], [1243.0, 575.6], [1239.0, 522.0], [1235.0, 581.3333333333333], [1279.0, 566.5], [1255.0, 692.3], [1259.0, 555.4], [1263.0, 673.5], [1275.0, 682.6250000000001], [1271.0, 599.1111111111111], [1267.0, 411.66666666666663], [1331.0, 623.4444444444445], [1315.0, 743.6923076923076], [1319.0, 520.0], [1327.0, 548.0], [1311.0, 625.375], [1283.0, 523.0], [1287.0, 535.0], [1291.0, 635.8181818181819], [1295.0, 568.0], [1307.0, 580.4], [1303.0, 544.25], [1299.0, 568.6666666666666], [1335.0, 559.0], [1343.0, 586.0526315789472], [1339.0, 559.3333333333334], [1355.0, 585.3333333333334], [1359.0, 619.0833333333334], [1371.0, 510.5], [1375.0, 553.5], [1379.0, 546.1666666666667], [1383.0, 520.0714285714286], [1387.0, 553.4], [1391.0, 501.28571428571433], [1351.0, 667.0], [1403.0, 525.0], [1407.0, 590.0], [1419.0, 388.5], [1411.0, 554.5], [1415.0, 524.0], [1439.0, 507.0], [1435.0, 517.0], [1423.0, 532.1818181818181], [1463.0, 503.7777777777777], [1459.0, 494.0], [1447.0, 438.25], [1427.0, 526.75], [1431.0, 470.6], [1503.0, 466.9], [1491.0, 549.8], [1495.0, 556.5999999999999], [1499.0, 457.4], [1507.0, 513.7777777777778], [1535.0, 583.6666666666667], [1531.0, 463.2], [1523.0, 497.7142857142857], [1487.0, 445.40000000000003], [1483.0, 599.3000000000001], [1479.0, 537.2], [1511.0, 450.25], [1515.0, 461.16666666666663], [1551.0, 408.0], [1567.0, 442.0], [1543.0, 406.0833333333333], [1539.0, 447.0], [1547.0, 565.6], [1587.0, 618.25], [1595.0, 503.5], [1599.0, 454.0], [1571.0, 447.0], [1555.0, 449.3333333333333], [1563.0, 606.8333333333334], [1611.0, 528.2500000000001], [1603.0, 519.8823529411764], [1627.0, 503.8571428571429], [1607.0, 549.9999999999999], [1663.0, 497.5], [1655.0, 478.2], [1651.0, 465.0], [1615.0, 519.047619047619], [1635.0, 456.0], [1639.0, 576.3913043478261], [1643.0, 552.3529411764706], [1647.0, 534.074074074074], [1619.0, 445.0], [1623.0, 583.6315789473686], [1675.0, 559.5333333333333], [1667.0, 435.53846153846155], [1695.0, 540.2941176470588], [1691.0, 547.8947368421052], [1671.0, 518.0], [1679.0, 592.0], [1715.0, 564.0], [1719.0, 594.5454545454545], [1723.0, 494.0], [1727.0, 500.6666666666667], [1699.0, 328.3333333333333], [1703.0, 511.4], [1707.0, 646.75], [1711.0, 579.75], [1683.0, 594.5384615384615], [1731.0, 588.8333333333333], [1759.0, 547.0], [1755.0, 587.8], [1751.0, 517.8947368421052], [1735.0, 528.7272727272726], [1739.0, 611.8333333333334], [1743.0, 541.8571428571429], [1763.0, 563.1666666666667], [1791.0, 674.3888888888888], [1787.0, 595.4324324324324], [1783.0, 571.0909090909092], [1779.0, 561.2799999999999], [1767.0, 551.7999999999998], [1771.0, 600.5294117647059], [1775.0, 504.0], [1747.0, 598.5833333333333], [1803.0, 781.4166666666667], [1819.0, 649.7600000000001], [1795.0, 672.5833333333334], [1799.0, 633.6666666666666], [1807.0, 525.0], [1843.0, 537.7619047619047], [1847.0, 522.4], [1851.0, 520.6], [1855.0, 569.0], [1827.0, 572.7142857142857], [1831.0, 643.75], [1839.0, 636.3913043478261], [1811.0, 526.0], [1815.0, 625.909090909091], [1823.0, 565.6666666666666], [1867.0, 658.3636363636364], [1863.0, 689.0], [1859.0, 656.3000000000001], [1887.0, 813.0], [1883.0, 834.6], [1879.0, 499.22222222222223], [1871.0, 540.0], [1907.0, 543.4], [1911.0, 865.5], [1915.0, 793.125], [1919.0, 715.257142857143], [1891.0, 680.3333333333334], [1895.0, 803.25], [1899.0, 751.6764705882352], [1903.0, 903.6666666666666], [1875.0, 598.5], [1931.0, 1024.2656249999993], [1927.0, 867.2040816326531], [1923.0, 676.8], [1951.0, 949.6], [1943.0, 1014.1578947368422], [1947.0, 1180.2857142857144], [1935.0, 936.5571428571429], [1971.0, 783.1999999999999], [1975.0, 791.7107438016528], [1983.0, 780.2178217821782], [1979.0, 873.2666666666665], [1955.0, 997.6874999999999], [1959.0, 1064.7096774193546], [1963.0, 983.0789473684209], [1967.0, 1008.8000000000002], [1939.0, 1209.7142857142858], [1991.0, 829.825], [1987.0, 885.3333333333331], [1995.0, 883.545454545454], [1999.0, 477.68955312222573], [1.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1889.5070299999982, 620.9137299999995]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 59583.0, "minX": 1.66670244E12, "maxY": 3148746.4, "series": [{"data": [[1.6667025E12, 3148746.4], [1.66670244E12, 326805.4666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6667025E12, 590417.0], [1.66670244E12, 59583.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6667025E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 607.9341774246923, "minX": 1.66670244E12, "maxY": 746.4566168623302, "series": [{"data": [[1.6667025E12, 607.9341774246923], [1.66670244E12, 746.4566168623302]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6667025E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 607.8910515281809, "minX": 1.66670244E12, "maxY": 746.3917289220932, "series": [{"data": [[1.6667025E12, 607.8910515281809], [1.66670244E12, 746.3917289220932]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6667025E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0019474787597925688, "minX": 1.66670244E12, "maxY": 0.4933297758804722, "series": [{"data": [[1.6667025E12, 0.0019474787597925688], [1.66670244E12, 0.4933297758804722]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6667025E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66670244E12, "maxY": 3267.0, "series": [{"data": [[1.6667025E12, 3267.0], [1.66670244E12, 2817.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6667025E12, 684.0], [1.66670244E12, 1350.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6667025E12, 1040.0], [1.66670244E12, 1740.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6667025E12, 785.9500000000007], [1.66670244E12, 1388.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6667025E12, 0.0], [1.66670244E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6667025E12, 428.0], [1.66670244E12, 668.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6667025E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 344.0, "maxY": 1593.0, "series": [{"data": [[770.0, 1504.0], [1300.0, 631.0], [1374.0, 125.0], [1466.0, 1379.0], [1476.0, 624.0], [1782.0, 728.0], [1850.0, 453.0], [1879.0, 791.0], [1959.0, 961.0], [1953.0, 484.0], [1961.0, 489.0], [2018.0, 809.0], [2125.0, 1276.0], [2154.0, 854.0], [2241.0, 1593.0], [2209.0, 848.0], [2215.0, 793.0], [2286.0, 426.0], [2426.0, 620.0], [2357.0, 786.0], [2348.0, 875.0], [2378.0, 772.5], [2437.0, 673.0], [2468.0, 695.0], [2475.0, 859.0], [2619.0, 788.0], [2561.0, 727.0], [2645.0, 982.0], [2613.0, 954.0], [2665.0, 519.0], [2697.0, 833.0], [2731.0, 287.0], [2904.0, 320.0], [2994.0, 645.0], [3118.0, 587.0], [3211.0, 586.0], [3278.0, 621.0], [3262.0, 530.0], [3223.0, 552.0], [3201.0, 635.0], [3339.0, 562.0], [3355.0, 567.0], [3440.0, 595.5], [3418.0, 653.0], [3381.0, 469.0], [3360.0, 521.0], [3547.0, 517.0], [3580.0, 529.0], [3657.0, 656.0], [3590.0, 491.0], [3635.0, 517.0], [3779.0, 473.0], [3729.0, 495.0], [3756.0, 522.0], [3780.0, 472.5], [3876.0, 523.0], [3944.0, 545.0], [3989.0, 526.0], [4058.0, 486.0], [4136.0, 485.0], [4504.0, 465.0], [4378.0, 418.0], [4540.0, 459.0], [4727.0, 451.0], [4770.0, 401.0], [5381.0, 350.0], [344.0, 306.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5381.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 344.0, "maxY": 1593.0, "series": [{"data": [[770.0, 1504.0], [1300.0, 631.0], [1374.0, 125.0], [1466.0, 1379.0], [1476.0, 624.0], [1782.0, 728.0], [1850.0, 453.0], [1879.0, 791.0], [1959.0, 961.0], [1953.0, 484.0], [1961.0, 489.0], [2018.0, 809.0], [2125.0, 1276.0], [2154.0, 854.0], [2241.0, 1593.0], [2209.0, 848.0], [2215.0, 793.0], [2286.0, 426.0], [2426.0, 620.0], [2357.0, 786.0], [2348.0, 875.0], [2378.0, 772.0], [2437.0, 673.0], [2468.0, 695.0], [2475.0, 859.0], [2619.0, 788.0], [2561.0, 727.0], [2645.0, 982.0], [2613.0, 954.0], [2665.0, 519.0], [2697.0, 833.0], [2731.0, 287.0], [2904.0, 320.0], [2994.0, 645.0], [3118.0, 587.0], [3211.0, 586.0], [3278.0, 621.0], [3262.0, 530.0], [3223.0, 552.0], [3201.0, 635.0], [3339.0, 562.0], [3355.0, 567.0], [3440.0, 595.0], [3418.0, 653.0], [3381.0, 469.0], [3360.0, 521.0], [3547.0, 516.0], [3580.0, 529.0], [3657.0, 656.0], [3590.0, 491.0], [3635.0, 517.0], [3779.0, 473.0], [3729.0, 495.0], [3756.0, 522.0], [3780.0, 472.5], [3876.0, 523.0], [3944.0, 545.0], [3989.0, 526.0], [4058.0, 486.0], [4136.0, 485.0], [4504.0, 465.0], [4378.0, 418.0], [4540.0, 459.0], [4727.0, 451.0], [4770.0, 401.0], [5381.0, 350.0], [344.0, 305.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5381.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 345.6333333333333, "minX": 1.66670244E12, "maxY": 2987.7, "series": [{"data": [[1.6667025E12, 2987.7], [1.66670244E12, 345.6333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6667025E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 312.3333333333333, "minX": 1.66670244E12, "maxY": 3021.0, "series": [{"data": [[1.6667025E12, 3021.0], [1.66670244E12, 312.3333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6667025E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 312.3333333333333, "minX": 1.66670244E12, "maxY": 3021.0, "series": [{"data": [[1.6667025E12, 3021.0], [1.66670244E12, 312.3333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6667025E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 312.3333333333333, "minX": 1.66670244E12, "maxY": 3021.0, "series": [{"data": [[1.6667025E12, 3021.0], [1.66670244E12, 312.3333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6667025E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

