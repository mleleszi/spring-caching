/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3157.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 3.0], [0.8, 3.0], [0.9, 4.0], [1.0, 4.0], [1.1, 5.0], [1.2, 6.0], [1.3, 9.0], [1.4, 27.0], [1.5, 321.0], [1.6, 323.0], [1.7, 325.0], [1.8, 326.0], [1.9, 327.0], [2.0, 328.0], [2.1, 329.0], [2.2, 329.0], [2.3, 330.0], [2.4, 330.0], [2.5, 331.0], [2.6, 332.0], [2.7, 332.0], [2.8, 333.0], [2.9, 333.0], [3.0, 334.0], [3.1, 335.0], [3.2, 336.0], [3.3, 337.0], [3.4, 338.0], [3.5, 339.0], [3.6, 340.0], [3.7, 341.0], [3.8, 342.0], [3.9, 343.0], [4.0, 344.0], [4.1, 345.0], [4.2, 345.0], [4.3, 347.0], [4.4, 347.0], [4.5, 348.0], [4.6, 349.0], [4.7, 349.0], [4.8, 350.0], [4.9, 351.0], [5.0, 351.0], [5.1, 352.0], [5.2, 352.0], [5.3, 353.0], [5.4, 353.0], [5.5, 354.0], [5.6, 354.0], [5.7, 355.0], [5.8, 355.0], [5.9, 355.0], [6.0, 356.0], [6.1, 356.0], [6.2, 356.0], [6.3, 356.0], [6.4, 357.0], [6.5, 357.0], [6.6, 357.0], [6.7, 358.0], [6.8, 358.0], [6.9, 358.0], [7.0, 359.0], [7.1, 359.0], [7.2, 359.0], [7.3, 359.0], [7.4, 360.0], [7.5, 360.0], [7.6, 360.0], [7.7, 361.0], [7.8, 361.0], [7.9, 361.0], [8.0, 361.0], [8.1, 361.0], [8.2, 362.0], [8.3, 362.0], [8.4, 362.0], [8.5, 362.0], [8.6, 363.0], [8.7, 363.0], [8.8, 363.0], [8.9, 364.0], [9.0, 364.0], [9.1, 364.0], [9.2, 365.0], [9.3, 365.0], [9.4, 365.0], [9.5, 366.0], [9.6, 366.0], [9.7, 366.0], [9.8, 366.0], [9.9, 367.0], [10.0, 367.0], [10.1, 367.0], [10.2, 367.0], [10.3, 368.0], [10.4, 368.0], [10.5, 368.0], [10.6, 369.0], [10.7, 369.0], [10.8, 369.0], [10.9, 369.0], [11.0, 370.0], [11.1, 370.0], [11.2, 370.0], [11.3, 371.0], [11.4, 371.0], [11.5, 371.0], [11.6, 372.0], [11.7, 372.0], [11.8, 372.0], [11.9, 373.0], [12.0, 373.0], [12.1, 373.0], [12.2, 374.0], [12.3, 374.0], [12.4, 374.0], [12.5, 375.0], [12.6, 375.0], [12.7, 375.0], [12.8, 375.0], [12.9, 375.0], [13.0, 376.0], [13.1, 376.0], [13.2, 376.0], [13.3, 376.0], [13.4, 377.0], [13.5, 377.0], [13.6, 377.0], [13.7, 377.0], [13.8, 378.0], [13.9, 378.0], [14.0, 378.0], [14.1, 379.0], [14.2, 379.0], [14.3, 379.0], [14.4, 379.0], [14.5, 380.0], [14.6, 380.0], [14.7, 380.0], [14.8, 381.0], [14.9, 381.0], [15.0, 381.0], [15.1, 382.0], [15.2, 382.0], [15.3, 382.0], [15.4, 383.0], [15.5, 383.0], [15.6, 383.0], [15.7, 383.0], [15.8, 384.0], [15.9, 384.0], [16.0, 384.0], [16.1, 385.0], [16.2, 385.0], [16.3, 385.0], [16.4, 385.0], [16.5, 385.0], [16.6, 386.0], [16.7, 386.0], [16.8, 386.0], [16.9, 387.0], [17.0, 387.0], [17.1, 387.0], [17.2, 387.0], [17.3, 387.0], [17.4, 388.0], [17.5, 388.0], [17.6, 388.0], [17.7, 389.0], [17.8, 389.0], [17.9, 389.0], [18.0, 389.0], [18.1, 389.0], [18.2, 390.0], [18.3, 390.0], [18.4, 390.0], [18.5, 390.0], [18.6, 391.0], [18.7, 391.0], [18.8, 391.0], [18.9, 391.0], [19.0, 391.0], [19.1, 391.0], [19.2, 392.0], [19.3, 392.0], [19.4, 392.0], [19.5, 392.0], [19.6, 393.0], [19.7, 393.0], [19.8, 393.0], [19.9, 393.0], [20.0, 393.0], [20.1, 394.0], [20.2, 394.0], [20.3, 394.0], [20.4, 394.0], [20.5, 395.0], [20.6, 395.0], [20.7, 395.0], [20.8, 395.0], [20.9, 396.0], [21.0, 396.0], [21.1, 396.0], [21.2, 396.0], [21.3, 397.0], [21.4, 397.0], [21.5, 397.0], [21.6, 397.0], [21.7, 398.0], [21.8, 398.0], [21.9, 398.0], [22.0, 398.0], [22.1, 399.0], [22.2, 399.0], [22.3, 399.0], [22.4, 399.0], [22.5, 400.0], [22.6, 400.0], [22.7, 400.0], [22.8, 400.0], [22.9, 401.0], [23.0, 401.0], [23.1, 401.0], [23.2, 401.0], [23.3, 402.0], [23.4, 402.0], [23.5, 402.0], [23.6, 402.0], [23.7, 403.0], [23.8, 403.0], [23.9, 403.0], [24.0, 403.0], [24.1, 404.0], [24.2, 404.0], [24.3, 404.0], [24.4, 404.0], [24.5, 404.0], [24.6, 405.0], [24.7, 405.0], [24.8, 405.0], [24.9, 405.0], [25.0, 406.0], [25.1, 406.0], [25.2, 406.0], [25.3, 407.0], [25.4, 407.0], [25.5, 407.0], [25.6, 407.0], [25.7, 408.0], [25.8, 408.0], [25.9, 408.0], [26.0, 409.0], [26.1, 409.0], [26.2, 409.0], [26.3, 410.0], [26.4, 410.0], [26.5, 411.0], [26.6, 411.0], [26.7, 411.0], [26.8, 411.0], [26.9, 412.0], [27.0, 412.0], [27.1, 412.0], [27.2, 413.0], [27.3, 413.0], [27.4, 413.0], [27.5, 414.0], [27.6, 414.0], [27.7, 414.0], [27.8, 414.0], [27.9, 415.0], [28.0, 415.0], [28.1, 415.0], [28.2, 415.0], [28.3, 416.0], [28.4, 416.0], [28.5, 416.0], [28.6, 416.0], [28.7, 416.0], [28.8, 417.0], [28.9, 417.0], [29.0, 417.0], [29.1, 417.0], [29.2, 417.0], [29.3, 418.0], [29.4, 418.0], [29.5, 418.0], [29.6, 418.0], [29.7, 418.0], [29.8, 418.0], [29.9, 419.0], [30.0, 419.0], [30.1, 419.0], [30.2, 419.0], [30.3, 420.0], [30.4, 420.0], [30.5, 420.0], [30.6, 420.0], [30.7, 420.0], [30.8, 420.0], [30.9, 421.0], [31.0, 421.0], [31.1, 421.0], [31.2, 421.0], [31.3, 421.0], [31.4, 421.0], [31.5, 422.0], [31.6, 422.0], [31.7, 422.0], [31.8, 422.0], [31.9, 422.0], [32.0, 422.0], [32.1, 423.0], [32.2, 423.0], [32.3, 423.0], [32.4, 423.0], [32.5, 423.0], [32.6, 423.0], [32.7, 423.0], [32.8, 424.0], [32.9, 424.0], [33.0, 424.0], [33.1, 424.0], [33.2, 424.0], [33.3, 425.0], [33.4, 425.0], [33.5, 425.0], [33.6, 426.0], [33.7, 426.0], [33.8, 426.0], [33.9, 426.0], [34.0, 427.0], [34.1, 427.0], [34.2, 427.0], [34.3, 427.0], [34.4, 427.0], [34.5, 428.0], [34.6, 428.0], [34.7, 428.0], [34.8, 428.0], [34.9, 428.0], [35.0, 429.0], [35.1, 429.0], [35.2, 429.0], [35.3, 429.0], [35.4, 429.0], [35.5, 430.0], [35.6, 430.0], [35.7, 430.0], [35.8, 430.0], [35.9, 430.0], [36.0, 430.0], [36.1, 431.0], [36.2, 431.0], [36.3, 431.0], [36.4, 431.0], [36.5, 431.0], [36.6, 431.0], [36.7, 432.0], [36.8, 432.0], [36.9, 432.0], [37.0, 432.0], [37.1, 432.0], [37.2, 433.0], [37.3, 433.0], [37.4, 433.0], [37.5, 433.0], [37.6, 433.0], [37.7, 433.0], [37.8, 434.0], [37.9, 434.0], [38.0, 434.0], [38.1, 434.0], [38.2, 434.0], [38.3, 435.0], [38.4, 435.0], [38.5, 435.0], [38.6, 435.0], [38.7, 435.0], [38.8, 435.0], [38.9, 435.0], [39.0, 436.0], [39.1, 436.0], [39.2, 436.0], [39.3, 436.0], [39.4, 436.0], [39.5, 437.0], [39.6, 437.0], [39.7, 437.0], [39.8, 437.0], [39.9, 437.0], [40.0, 437.0], [40.1, 438.0], [40.2, 438.0], [40.3, 438.0], [40.4, 438.0], [40.5, 438.0], [40.6, 438.0], [40.7, 439.0], [40.8, 439.0], [40.9, 439.0], [41.0, 439.0], [41.1, 439.0], [41.2, 440.0], [41.3, 440.0], [41.4, 440.0], [41.5, 440.0], [41.6, 441.0], [41.7, 441.0], [41.8, 441.0], [41.9, 441.0], [42.0, 441.0], [42.1, 442.0], [42.2, 442.0], [42.3, 442.0], [42.4, 442.0], [42.5, 443.0], [42.6, 443.0], [42.7, 443.0], [42.8, 443.0], [42.9, 444.0], [43.0, 444.0], [43.1, 444.0], [43.2, 444.0], [43.3, 444.0], [43.4, 445.0], [43.5, 445.0], [43.6, 445.0], [43.7, 445.0], [43.8, 446.0], [43.9, 446.0], [44.0, 446.0], [44.1, 446.0], [44.2, 447.0], [44.3, 447.0], [44.4, 447.0], [44.5, 447.0], [44.6, 448.0], [44.7, 448.0], [44.8, 448.0], [44.9, 448.0], [45.0, 449.0], [45.1, 449.0], [45.2, 449.0], [45.3, 450.0], [45.4, 450.0], [45.5, 450.0], [45.6, 450.0], [45.7, 451.0], [45.8, 451.0], [45.9, 451.0], [46.0, 451.0], [46.1, 451.0], [46.2, 451.0], [46.3, 452.0], [46.4, 452.0], [46.5, 452.0], [46.6, 452.0], [46.7, 452.0], [46.8, 453.0], [46.9, 453.0], [47.0, 453.0], [47.1, 453.0], [47.2, 454.0], [47.3, 454.0], [47.4, 454.0], [47.5, 454.0], [47.6, 455.0], [47.7, 455.0], [47.8, 455.0], [47.9, 456.0], [48.0, 456.0], [48.1, 456.0], [48.2, 456.0], [48.3, 457.0], [48.4, 457.0], [48.5, 457.0], [48.6, 457.0], [48.7, 458.0], [48.8, 458.0], [48.9, 458.0], [49.0, 458.0], [49.1, 459.0], [49.2, 459.0], [49.3, 459.0], [49.4, 459.0], [49.5, 460.0], [49.6, 460.0], [49.7, 460.0], [49.8, 460.0], [49.9, 460.0], [50.0, 461.0], [50.1, 461.0], [50.2, 461.0], [50.3, 461.0], [50.4, 462.0], [50.5, 462.0], [50.6, 462.0], [50.7, 462.0], [50.8, 462.0], [50.9, 463.0], [51.0, 463.0], [51.1, 463.0], [51.2, 463.0], [51.3, 464.0], [51.4, 464.0], [51.5, 464.0], [51.6, 464.0], [51.7, 464.0], [51.8, 465.0], [51.9, 465.0], [52.0, 465.0], [52.1, 465.0], [52.2, 466.0], [52.3, 466.0], [52.4, 466.0], [52.5, 466.0], [52.6, 466.0], [52.7, 467.0], [52.8, 467.0], [52.9, 467.0], [53.0, 467.0], [53.1, 467.0], [53.2, 468.0], [53.3, 468.0], [53.4, 468.0], [53.5, 468.0], [53.6, 468.0], [53.7, 469.0], [53.8, 469.0], [53.9, 469.0], [54.0, 469.0], [54.1, 470.0], [54.2, 470.0], [54.3, 470.0], [54.4, 470.0], [54.5, 470.0], [54.6, 471.0], [54.7, 471.0], [54.8, 471.0], [54.9, 471.0], [55.0, 472.0], [55.1, 472.0], [55.2, 472.0], [55.3, 472.0], [55.4, 473.0], [55.5, 473.0], [55.6, 473.0], [55.7, 473.0], [55.8, 474.0], [55.9, 474.0], [56.0, 474.0], [56.1, 474.0], [56.2, 475.0], [56.3, 475.0], [56.4, 475.0], [56.5, 475.0], [56.6, 476.0], [56.7, 476.0], [56.8, 476.0], [56.9, 476.0], [57.0, 477.0], [57.1, 477.0], [57.2, 478.0], [57.3, 478.0], [57.4, 478.0], [57.5, 479.0], [57.6, 479.0], [57.7, 479.0], [57.8, 479.0], [57.9, 479.0], [58.0, 480.0], [58.1, 480.0], [58.2, 480.0], [58.3, 480.0], [58.4, 481.0], [58.5, 481.0], [58.6, 481.0], [58.7, 482.0], [58.8, 482.0], [58.9, 482.0], [59.0, 482.0], [59.1, 483.0], [59.2, 483.0], [59.3, 483.0], [59.4, 484.0], [59.5, 484.0], [59.6, 485.0], [59.7, 485.0], [59.8, 485.0], [59.9, 486.0], [60.0, 486.0], [60.1, 487.0], [60.2, 487.0], [60.3, 487.0], [60.4, 488.0], [60.5, 488.0], [60.6, 488.0], [60.7, 489.0], [60.8, 489.0], [60.9, 489.0], [61.0, 490.0], [61.1, 490.0], [61.2, 490.0], [61.3, 491.0], [61.4, 491.0], [61.5, 492.0], [61.6, 492.0], [61.7, 492.0], [61.8, 493.0], [61.9, 493.0], [62.0, 494.0], [62.1, 494.0], [62.2, 494.0], [62.3, 495.0], [62.4, 495.0], [62.5, 496.0], [62.6, 496.0], [62.7, 497.0], [62.8, 497.0], [62.9, 498.0], [63.0, 498.0], [63.1, 498.0], [63.2, 499.0], [63.3, 499.0], [63.4, 500.0], [63.5, 500.0], [63.6, 500.0], [63.7, 501.0], [63.8, 501.0], [63.9, 502.0], [64.0, 502.0], [64.1, 503.0], [64.2, 503.0], [64.3, 503.0], [64.4, 504.0], [64.5, 504.0], [64.6, 504.0], [64.7, 505.0], [64.8, 505.0], [64.9, 506.0], [65.0, 506.0], [65.1, 506.0], [65.2, 507.0], [65.3, 507.0], [65.4, 507.0], [65.5, 508.0], [65.6, 508.0], [65.7, 508.0], [65.8, 509.0], [65.9, 509.0], [66.0, 510.0], [66.1, 510.0], [66.2, 511.0], [66.3, 511.0], [66.4, 512.0], [66.5, 512.0], [66.6, 513.0], [66.7, 513.0], [66.8, 513.0], [66.9, 514.0], [67.0, 514.0], [67.1, 514.0], [67.2, 515.0], [67.3, 515.0], [67.4, 516.0], [67.5, 516.0], [67.6, 517.0], [67.7, 517.0], [67.8, 518.0], [67.9, 518.0], [68.0, 518.0], [68.1, 519.0], [68.2, 519.0], [68.3, 520.0], [68.4, 521.0], [68.5, 521.0], [68.6, 522.0], [68.7, 522.0], [68.8, 523.0], [68.9, 524.0], [69.0, 524.0], [69.1, 525.0], [69.2, 525.0], [69.3, 526.0], [69.4, 526.0], [69.5, 527.0], [69.6, 527.0], [69.7, 528.0], [69.8, 528.0], [69.9, 529.0], [70.0, 530.0], [70.1, 530.0], [70.2, 531.0], [70.3, 531.0], [70.4, 532.0], [70.5, 533.0], [70.6, 533.0], [70.7, 534.0], [70.8, 535.0], [70.9, 536.0], [71.0, 537.0], [71.1, 537.0], [71.2, 538.0], [71.3, 539.0], [71.4, 539.0], [71.5, 540.0], [71.6, 541.0], [71.7, 541.0], [71.8, 542.0], [71.9, 542.0], [72.0, 543.0], [72.1, 544.0], [72.2, 544.0], [72.3, 545.0], [72.4, 546.0], [72.5, 546.0], [72.6, 547.0], [72.7, 547.0], [72.8, 548.0], [72.9, 548.0], [73.0, 549.0], [73.1, 549.0], [73.2, 550.0], [73.3, 551.0], [73.4, 551.0], [73.5, 552.0], [73.6, 553.0], [73.7, 554.0], [73.8, 554.0], [73.9, 555.0], [74.0, 556.0], [74.1, 557.0], [74.2, 558.0], [74.3, 559.0], [74.4, 560.0], [74.5, 561.0], [74.6, 562.0], [74.7, 562.0], [74.8, 564.0], [74.9, 564.0], [75.0, 565.0], [75.1, 566.0], [75.2, 567.0], [75.3, 568.0], [75.4, 568.0], [75.5, 569.0], [75.6, 569.0], [75.7, 569.0], [75.8, 570.0], [75.9, 570.0], [76.0, 571.0], [76.1, 571.0], [76.2, 572.0], [76.3, 573.0], [76.4, 574.0], [76.5, 574.0], [76.6, 575.0], [76.7, 576.0], [76.8, 578.0], [76.9, 579.0], [77.0, 581.0], [77.1, 582.0], [77.2, 583.0], [77.3, 584.0], [77.4, 585.0], [77.5, 586.0], [77.6, 587.0], [77.7, 587.0], [77.8, 588.0], [77.9, 589.0], [78.0, 590.0], [78.1, 591.0], [78.2, 592.0], [78.3, 592.0], [78.4, 593.0], [78.5, 594.0], [78.6, 595.0], [78.7, 596.0], [78.8, 597.0], [78.9, 597.0], [79.0, 598.0], [79.1, 599.0], [79.2, 599.0], [79.3, 600.0], [79.4, 601.0], [79.5, 602.0], [79.6, 603.0], [79.7, 603.0], [79.8, 604.0], [79.9, 605.0], [80.0, 606.0], [80.1, 607.0], [80.2, 608.0], [80.3, 608.0], [80.4, 609.0], [80.5, 609.0], [80.6, 610.0], [80.7, 610.0], [80.8, 611.0], [80.9, 612.0], [81.0, 613.0], [81.1, 613.0], [81.2, 614.0], [81.3, 614.0], [81.4, 615.0], [81.5, 615.0], [81.6, 616.0], [81.7, 616.0], [81.8, 617.0], [81.9, 617.0], [82.0, 618.0], [82.1, 618.0], [82.2, 619.0], [82.3, 620.0], [82.4, 620.0], [82.5, 621.0], [82.6, 622.0], [82.7, 622.0], [82.8, 623.0], [82.9, 624.0], [83.0, 624.0], [83.1, 625.0], [83.2, 626.0], [83.3, 627.0], [83.4, 629.0], [83.5, 630.0], [83.6, 633.0], [83.7, 635.0], [83.8, 637.0], [83.9, 639.0], [84.0, 643.0], [84.1, 645.0], [84.2, 647.0], [84.3, 650.0], [84.4, 652.0], [84.5, 654.0], [84.6, 657.0], [84.7, 661.0], [84.8, 665.0], [84.9, 669.0], [85.0, 674.0], [85.1, 678.0], [85.2, 684.0], [85.3, 687.0], [85.4, 689.0], [85.5, 693.0], [85.6, 697.0], [85.7, 701.0], [85.8, 706.0], [85.9, 711.0], [86.0, 716.0], [86.1, 727.0], [86.2, 733.0], [86.3, 739.0], [86.4, 746.0], [86.5, 749.0], [86.6, 752.0], [86.7, 755.0], [86.8, 759.0], [86.9, 761.0], [87.0, 763.0], [87.1, 766.0], [87.2, 768.0], [87.3, 770.0], [87.4, 772.0], [87.5, 775.0], [87.6, 777.0], [87.7, 781.0], [87.8, 783.0], [87.9, 785.0], [88.0, 787.0], [88.1, 791.0], [88.2, 794.0], [88.3, 799.0], [88.4, 802.0], [88.5, 805.0], [88.6, 810.0], [88.7, 814.0], [88.8, 819.0], [88.9, 822.0], [89.0, 824.0], [89.1, 828.0], [89.2, 830.0], [89.3, 836.0], [89.4, 841.0], [89.5, 844.0], [89.6, 845.0], [89.7, 847.0], [89.8, 850.0], [89.9, 852.0], [90.0, 854.0], [90.1, 855.0], [90.2, 857.0], [90.3, 859.0], [90.4, 861.0], [90.5, 863.0], [90.6, 864.0], [90.7, 865.0], [90.8, 866.0], [90.9, 867.0], [91.0, 869.0], [91.1, 870.0], [91.2, 871.0], [91.3, 873.0], [91.4, 875.0], [91.5, 877.0], [91.6, 879.0], [91.7, 881.0], [91.8, 883.0], [91.9, 885.0], [92.0, 886.0], [92.1, 888.0], [92.2, 890.0], [92.3, 892.0], [92.4, 894.0], [92.5, 897.0], [92.6, 902.0], [92.7, 907.0], [92.8, 912.0], [92.9, 919.0], [93.0, 924.0], [93.1, 932.0], [93.2, 936.0], [93.3, 939.0], [93.4, 942.0], [93.5, 944.0], [93.6, 946.0], [93.7, 949.0], [93.8, 953.0], [93.9, 957.0], [94.0, 960.0], [94.1, 964.0], [94.2, 967.0], [94.3, 972.0], [94.4, 978.0], [94.5, 982.0], [94.6, 985.0], [94.7, 989.0], [94.8, 994.0], [94.9, 999.0], [95.0, 1001.0], [95.1, 1003.0], [95.2, 1007.0], [95.3, 1012.0], [95.4, 1015.0], [95.5, 1020.0], [95.6, 1025.0], [95.7, 1030.0], [95.8, 1037.0], [95.9, 1045.0], [96.0, 1053.0], [96.1, 1060.0], [96.2, 1065.0], [96.3, 1073.0], [96.4, 1079.0], [96.5, 1086.0], [96.6, 1096.0], [96.7, 1104.0], [96.8, 1108.0], [96.9, 1131.0], [97.0, 1145.0], [97.1, 1183.0], [97.2, 1199.0], [97.3, 1209.0], [97.4, 1218.0], [97.5, 1228.0], [97.6, 1239.0], [97.7, 1256.0], [97.8, 1263.0], [97.9, 1275.0], [98.0, 1339.0], [98.1, 1385.0], [98.2, 1453.0], [98.3, 1496.0], [98.4, 1517.0], [98.5, 1532.0], [98.6, 1556.0], [98.7, 1573.0], [98.8, 1585.0], [98.9, 1597.0], [99.0, 1605.0], [99.1, 1616.0], [99.2, 1626.0], [99.3, 1630.0], [99.4, 1635.0], [99.5, 1649.0], [99.6, 1667.0], [99.7, 1674.0], [99.8, 1682.0], [99.9, 1698.0], [100.0, 3157.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 40890.0, "series": [{"data": [[0.0, 1416.0], [2200.0, 2.0], [2300.0, 1.0], [600.0, 6409.0], [2700.0, 1.0], [700.0, 2669.0], [3100.0, 1.0], [800.0, 4219.0], [900.0, 2395.0], [1000.0, 1698.0], [1100.0, 560.0], [1200.0, 731.0], [300.0, 21079.0], [1300.0, 181.0], [1400.0, 193.0], [1500.0, 611.0], [1600.0, 1000.0], [100.0, 1.0], [400.0, 40890.0], [1700.0, 49.0], [1800.0, 16.0], [1900.0, 3.0], [2000.0, 6.0], [500.0, 15869.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 63603.0, "series": [{"data": [[0.0, 63603.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 34710.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1686.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 980.088000983017, "minX": 1.6667043E12, "maxY": 999.9777999257386, "series": [{"data": [[1.6667043E12, 999.9777999257386], [1.66670436E12, 980.088000983017]], "isOverall": false, "label": "Get employee by id", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 145.0, "maxY": 630.0, "series": [{"data": [[145.0, 2.0], [1022.0, 439.0], [1023.0, 440.0], [1009.0, 437.5], [1011.0, 438.0], [1010.0, 440.0], [1013.0, 440.0], [1012.0, 439.0], [1021.0, 439.0], [1020.0, 441.5], [1018.0, 442.0], [1017.0, 441.0], [1016.0, 443.0], [1007.0, 436.0], [1006.0, 436.0], [1005.0, 437.0], [1004.0, 437.0], [1003.0, 436.0], [1002.0, 422.0], [1001.0, 412.0], [1015.0, 441.0], [1014.0, 441.0], [1084.0, 432.0], [1064.0, 426.0], [1086.0, 432.5], [1058.0, 430.0], [1056.0, 432.5], [1062.0, 429.0], [1060.0, 433.0], [1082.0, 427.0], [1078.0, 424.0], [1076.0, 419.0], [1038.0, 438.0], [1034.0, 435.0], [1032.0, 437.0], [1030.0, 437.0], [1028.0, 436.5], [1026.0, 437.0], [1024.0, 440.0], [1054.0, 434.0], [1052.0, 432.0], [1050.0, 432.0], [1048.0, 437.0], [1040.0, 438.5], [1070.0, 424.0], [1068.0, 425.0], [1066.0, 421.0], [1140.0, 447.0], [1148.0, 445.0], [1128.0, 440.0], [1134.0, 447.0], [1150.0, 443.0], [1120.0, 441.0], [1124.0, 439.0], [1122.0, 441.0], [1146.0, 449.0], [1144.0, 446.0], [1142.0, 450.0], [1138.0, 446.0], [1136.0, 446.6666666666667], [1118.0, 439.0], [1088.0, 434.0], [1092.0, 438.0], [1090.0, 438.0], [1100.0, 440.0], [1098.0, 438.0], [1116.0, 443.0], [1112.0, 440.0], [1110.0, 440.0], [1108.0, 438.0], [1106.0, 439.0], [1104.0, 441.0], [1208.0, 425.0], [1190.0, 410.0], [1212.0, 430.0], [1186.0, 409.0], [1184.0, 410.0], [1194.0, 409.0], [1192.0, 409.0], [1198.0, 417.0], [1210.0, 429.0], [1206.0, 423.0], [1204.0, 420.0], [1202.0, 419.0], [1200.0, 418.0], [1182.0, 409.0], [1154.0, 433.5], [1152.0, 441.0], [1158.0, 425.0], [1160.0, 425.0], [1162.0, 425.0], [1164.0, 428.0], [1166.0, 423.0], [1180.0, 415.0], [1178.0, 417.5], [1176.0, 417.0], [1174.0, 411.0], [1172.0, 411.0], [1170.0, 416.0], [1168.0, 422.0], [1268.0, 471.0], [1254.0, 459.0], [1248.0, 456.0], [1250.0, 457.0], [1252.0, 460.0], [1256.0, 465.0], [1260.0, 466.0], [1278.0, 474.0], [1272.0, 472.5], [1270.0, 472.0], [1266.0, 470.0], [1264.0, 469.0], [1216.0, 435.6], [1220.0, 434.0], [1222.0, 435.0], [1226.0, 437.3333333333333], [1224.0, 436.0], [1228.0, 436.6666666666667], [1230.0, 434.5], [1246.0, 452.5], [1244.0, 448.5], [1242.0, 446.6666666666667], [1240.0, 445.0], [1238.0, 446.0], [1236.0, 437.0], [1232.0, 434.0], [1336.0, 512.0], [1312.0, 493.3333333333333], [1316.0, 498.0], [1318.0, 498.0], [1322.0, 505.0], [1320.0, 335.3333333333333], [1324.0, 506.4], [1326.0, 508.75], [1342.0, 518.0], [1338.0, 513.0], [1334.0, 511.0], [1332.0, 511.0], [1328.0, 508.0], [1294.0, 482.0], [1292.0, 480.0], [1290.0, 478.8], [1282.0, 475.0], [1310.0, 494.0], [1308.0, 492.0], [1306.0, 487.0], [1304.0, 486.5], [1300.0, 486.0], [1298.0, 482.0], [1296.0, 480.5], [1404.0, 521.0], [1406.0, 521.0], [1376.0, 513.6666666666666], [1378.0, 515.6666666666666], [1380.0, 518.0], [1382.0, 515.3333333333334], [1384.0, 514.0], [1386.0, 2.0], [1388.0, 514.0], [1390.0, 514.0], [1402.0, 520.0], [1400.0, 518.0], [1398.0, 518.0], [1396.0, 520.0], [1394.0, 515.0], [1344.0, 522.5], [1346.0, 523.0], [1348.0, 525.0], [1350.0, 519.0], [1352.0, 518.5], [1354.0, 518.3333333333334], [1356.0, 519.0], [1358.0, 518.5], [1374.0, 512.0], [1372.0, 513.0], [1370.0, 514.5], [1368.0, 517.0], [1364.0, 518.5], [1360.0, 518.0], [1468.0, 568.0], [1440.0, 548.0], [1444.0, 567.5], [1446.0, 575.0], [1448.0, 565.0], [1450.0, 566.0], [1452.0, 570.0], [1454.0, 569.3333333333334], [1470.0, 568.0], [1464.0, 569.0], [1462.0, 568.0], [1460.0, 567.0], [1458.0, 565.0], [1456.0, 567.0], [1422.0, 533.3333333333334], [1420.0, 542.0], [1418.0, 537.5], [1416.0, 530.5], [1414.0, 530.0], [1412.0, 524.5], [1410.0, 523.0], [1408.0, 523.3333333333334], [1438.0, 550.0], [1436.0, 3.0], [1434.0, 539.0], [1432.0, 561.0], [1430.0, 550.0], [1428.0, 562.0], [1426.0, 537.6666666666666], [1424.0, 536.0], [1526.0, 582.0], [1522.0, 584.0], [1530.0, 579.0], [1506.0, 574.0], [1508.0, 568.0], [1510.0, 573.0], [1512.0, 572.5], [1514.0, 573.0], [1516.0, 578.8], [1518.0, 577.5], [1532.0, 580.5], [1528.0, 581.0], [1524.0, 584.3333333333334], [1520.0, 387.6666666666667], [1472.0, 3.0], [1474.0, 570.0], [1478.0, 572.0], [1480.0, 580.0], [1482.0, 570.0], [1484.0, 572.3333333333334], [1502.0, 574.5], [1500.0, 576.0], [1498.0, 576.0], [1496.0, 575.5], [1494.0, 574.0], [1490.0, 573.6666666666666], [1488.0, 571.0], [1596.0, 530.6666666666666], [1598.0, 528.5], [1568.0, 559.0], [1570.0, 554.0], [1572.0, 552.3333333333334], [1574.0, 553.0], [1576.0, 553.5], [1578.0, 441.6], [1580.0, 553.0], [1582.0, 551.0], [1594.0, 534.0], [1592.0, 536.0], [1590.0, 538.8], [1588.0, 551.0], [1586.0, 550.6666666666666], [1550.0, 574.0], [1548.0, 596.0], [1546.0, 575.5], [1544.0, 576.6], [1542.0, 576.0], [1540.0, 602.0], [1538.0, 18.0], [1536.0, 578.0], [1566.0, 569.0], [1564.0, 563.5], [1562.0, 566.0], [1560.0, 569.0], [1558.0, 571.0], [1556.0, 583.0], [1554.0, 572.0], [1552.0, 630.0], [1660.0, 469.0], [1632.0, 379.5], [1634.0, 507.0], [1638.0, 497.3333333333333], [1640.0, 374.25], [1642.0, 495.5], [1644.0, 496.0], [1646.0, 163.66666666666669], [1662.0, 468.0], [1658.0, 475.75], [1656.0, 476.4], [1654.0, 478.3333333333333], [1652.0, 480.44444444444446], [1650.0, 486.0], [1648.0, 486.0], [1614.0, 514.0], [1612.0, 515.0], [1610.0, 260.5], [1608.0, 347.33333333333337], [1606.0, 522.6666666666666], [1604.0, 525.0], [1602.0, 353.33333333333337], [1600.0, 527.3333333333334], [1630.0, 506.5], [1626.0, 510.00000000000006], [1624.0, 511.0], [1620.0, 512.1428571428571], [1618.0, 513.0], [1616.0, 513.0], [1724.0, 433.0], [1698.0, 385.0], [1702.0, 464.625], [1700.0, 464.0], [1704.0, 465.0], [1706.0, 234.5], [1708.0, 466.6], [1710.0, 391.2857142857143], [1726.0, 434.0], [1722.0, 434.0], [1720.0, 450.4545454545455], [1718.0, 455.0], [1714.0, 451.0], [1664.0, 466.0], [1666.0, 465.0], [1670.0, 461.3333333333333], [1672.0, 461.75], [1674.0, 461.0], [1676.0, 462.0], [1678.0, 372.0], [1694.0, 463.0], [1692.0, 462.0], [1690.0, 463.0], [1688.0, 466.75], [1686.0, 467.1818181818182], [1684.0, 468.75], [1682.0, 468.0], [1680.0, 465.3333333333333], [1782.0, 368.00000000000006], [1778.0, 376.5], [1788.0, 376.6666666666667], [1760.0, 392.50000000000006], [1762.0, 393.0], [1764.0, 390.0], [1768.0, 390.0], [1770.0, 386.0], [1772.0, 384.8], [1774.0, 383.5], [1790.0, 377.0], [1786.0, 329.75], [1780.0, 299.2], [1776.0, 378.5], [1728.0, 443.0], [1730.0, 425.57142857142856], [1734.0, 209.0], [1736.0, 415.75], [1738.0, 409.3333333333333], [1740.0, 408.0], [1742.0, 403.0], [1758.0, 392.0], [1756.0, 392.0], [1754.0, 394.4], [1752.0, 396.0], [1750.0, 397.3333333333333], [1748.0, 401.0], [1746.0, 403.5], [1744.0, 403.0], [1848.0, 360.93749999999994], [1844.0, 360.87499999999994], [1852.0, 362.09999999999997], [1824.0, 358.4782608695652], [1826.0, 359.45454545454544], [1828.0, 329.41666666666663], [1830.0, 360.0], [1832.0, 359.6], [1836.0, 358.8636363636363], [1838.0, 358.6666666666667], [1854.0, 360.6666666666667], [1850.0, 361.3333333333333], [1846.0, 362.4], [1842.0, 360.0], [1840.0, 356.66666666666663], [1792.0, 377.0], [1794.0, 370.375], [1798.0, 368.25], [1796.0, 368.5], [1800.0, 367.75], [1802.0, 365.77777777777777], [1804.0, 367.0], [1806.0, 366.5], [1822.0, 356.0], [1820.0, 355.0], [1818.0, 343.18518518518516], [1816.0, 357.5], [1814.0, 360.5999999999999], [1812.0, 359.0], [1810.0, 361.0], [1808.0, 363.0], [1912.0, 395.3333333333333], [1896.0, 374.5], [1890.0, 375.25], [1892.0, 374.2], [1894.0, 344.6923076923077], [1898.0, 377.9], [1900.0, 377.0], [1902.0, 381.1764705882353], [1914.0, 393.6666666666667], [1910.0, 394.0], [1908.0, 385.62500000000006], [1906.0, 384.0], [1904.0, 384.0], [1856.0, 362.5], [1858.0, 362.0], [1860.0, 361.0], [1862.0, 367.16666666666663], [1864.0, 365.0], [1866.0, 4.0], [1868.0, 361.0], [1870.0, 366.5714285714286], [1886.0, 345.00000000000006], [1884.0, 370.0], [1882.0, 369.125], [1880.0, 368.6666666666667], [1878.0, 342.4375], [1876.0, 364.0], [1874.0, 364.3333333333333], [1872.0, 366.0769230769231], [1976.0, 465.2673267326732], [1980.0, 426.2857142857143], [1942.0, 491.68292682926824], [1940.0, 430.38888888888886], [1938.0, 446.8571428571429], [1936.0, 428.13793103448273], [1944.0, 494.5714285714285], [1982.0, 447.10526315789474], [1952.0, 509.3333333333333], [1954.0, 510.0], [1956.0, 510.0], [1958.0, 472.96], [1960.0, 514.6666666666666], [1962.0, 503.2571428571428], [1964.0, 520.4666666666667], [1966.0, 515.0], [1978.0, 451.27272727272725], [1974.0, 505.1875], [1972.0, 502.3333333333333], [1970.0, 506.70000000000005], [1968.0, 464.06060606060606], [1922.0, 401.6], [1924.0, 407.6666666666667], [1926.0, 408.77777777777766], [1928.0, 435.9677419354838], [1930.0, 416.2222222222223], [1932.0, 440.5], [1934.0, 442.1666666666667], [1950.0, 511.5], [1948.0, 478.49999999999994], [1946.0, 509.23584905660385], [1988.0, 394.8333333333334], [1996.0, 402.3714285714287], [1986.0, 380.7682119205299], [1990.0, 393.5238095238095], [2000.0, 539.5296552170089], [1984.0, 419.5277777777779], [1998.0, 427.3133561643834], [1994.0, 401.3364485981309], [1992.0, 359.41489361702145], [1083.0, 432.0], [1087.0, 433.0], [1059.0, 429.0], [1057.0, 432.0], [1063.0, 424.0], [1061.0, 430.0], [1067.0, 423.0], [1065.0, 426.0], [1081.0, 427.5], [1079.0, 425.0], [1077.0, 423.0], [1075.0, 419.5], [1073.0, 419.0], [1037.0, 437.5], [1035.0, 435.0], [1033.0, 437.0], [1029.0, 437.5], [1053.0, 432.0], [1049.0, 432.0], [1047.0, 438.0], [1045.0, 436.5], [1041.0, 437.0], [1071.0, 420.0], [1069.0, 424.0], [1139.0, 446.0], [1149.0, 444.0], [1151.0, 438.0], [1125.0, 440.0], [1121.0, 439.0], [1127.0, 438.0], [1131.0, 446.5], [1129.0, 441.0], [1135.0, 445.0], [1147.0, 447.0], [1145.0, 447.0], [1141.0, 450.0], [1137.0, 444.0], [1103.0, 439.0], [1101.0, 440.0], [1099.0, 443.0], [1097.0, 439.5], [1095.0, 439.0], [1093.0, 439.0], [1089.0, 436.0], [1119.0, 439.0], [1113.0, 440.0], [1109.0, 441.0], [1107.0, 438.0], [1105.0, 438.0], [1205.0, 421.0], [1209.0, 425.0], [1189.0, 410.0], [1187.0, 408.0], [1191.0, 409.0], [1197.0, 415.5], [1195.0, 409.0], [1199.0, 419.0], [1211.0, 428.0], [1207.0, 423.0], [1203.0, 419.0], [1157.0, 424.5], [1155.0, 433.0], [1159.0, 423.0], [1161.0, 425.0], [1163.0, 425.0], [1165.0, 425.0], [1167.0, 422.0], [1181.0, 413.0], [1179.0, 415.0], [1175.0, 416.0], [1173.0, 413.0], [1171.0, 415.0], [1169.0, 420.0], [1273.0, 473.0], [1279.0, 474.0], [1249.0, 457.0], [1251.0, 458.0], [1253.0, 459.0], [1255.0, 460.6], [1257.0, 463.0], [1259.0, 464.5], [1263.0, 469.5], [1261.0, 467.0], [1275.0, 473.3333333333333], [1269.0, 471.5], [1267.0, 471.0], [1265.0, 470.0], [1247.0, 451.5], [1219.0, 427.0], [1223.0, 435.0], [1227.0, 436.0], [1231.0, 435.0], [1245.0, 448.0], [1241.0, 450.0], [1237.0, 448.0], [1235.0, 440.6666666666667], [1233.0, 434.5], [1331.0, 508.5], [1335.0, 512.5], [1317.0, 499.0], [1339.0, 513.0], [1343.0, 521.8333333333333], [1315.0, 498.0], [1323.0, 503.0], [1325.0, 2.0], [1341.0, 515.6666666666666], [1337.0, 512.0], [1333.0, 512.0], [1293.0, 479.0], [1291.0, 479.0], [1287.0, 478.8], [1283.0, 320.0], [1281.0, 475.0], [1309.0, 490.5], [1307.0, 488.5], [1305.0, 489.0], [1303.0, 486.6666666666667], [1301.0, 486.0], [1299.0, 484.5], [1297.0, 482.0], [1399.0, 518.0], [1395.0, 517.0], [1403.0, 522.0], [1377.0, 516.6666666666666], [1379.0, 517.0], [1381.0, 518.0], [1383.0, 514.5], [1385.0, 515.5], [1387.0, 516.0], [1389.0, 514.0], [1405.0, 521.0], [1401.0, 521.0], [1397.0, 517.0], [1393.0, 514.75], [1375.0, 512.0], [1345.0, 523.0], [1347.0, 522.6666666666666], [1349.0, 519.5], [1351.0, 519.0], [1355.0, 518.0], [1357.0, 518.0], [1359.0, 519.0], [1373.0, 512.0], [1371.0, 513.0], [1369.0, 515.0], [1367.0, 518.0], [1365.0, 518.0], [1363.0, 517.5], [1467.0, 568.0], [1459.0, 568.0], [1471.0, 568.0], [1441.0, 562.0], [1443.0, 563.6666666666666], [1445.0, 571.0], [1447.0, 576.0], [1449.0, 572.5], [1451.0, 563.0], [1455.0, 564.6], [1469.0, 569.0], [1465.0, 568.0], [1463.0, 569.5], [1461.0, 568.0], [1457.0, 565.0], [1419.0, 538.0], [1417.0, 532.0], [1415.0, 533.5], [1413.0, 529.0], [1411.0, 528.0], [1409.0, 523.0], [1439.0, 545.0], [1435.0, 537.0], [1433.0, 558.5], [1431.0, 553.3333333333334], [1429.0, 571.0], [1425.0, 536.0], [1533.0, 581.0], [1535.0, 578.0], [1505.0, 574.0], [1507.0, 574.0], [1509.0, 568.0], [1511.0, 573.0], [1513.0, 572.0], [1515.0, 574.4], [1517.0, 579.0], [1519.0, 578.2], [1529.0, 580.0], [1527.0, 583.0], [1525.0, 583.0], [1523.0, 294.5], [1521.0, 291.5], [1503.0, 573.5], [1473.0, 569.0], [1477.0, 571.3333333333334], [1479.0, 572.5], [1481.0, 573.0], [1483.0, 570.0], [1485.0, 572.0], [1501.0, 576.0], [1499.0, 585.0], [1495.0, 576.0], [1493.0, 573.5], [1491.0, 574.0], [1595.0, 20.0], [1575.0, 553.3333333333334], [1569.0, 556.6666666666666], [1571.0, 558.6666666666666], [1573.0, 553.0], [1579.0, 552.4285714285714], [1581.0, 552.5], [1583.0, 552.0], [1597.0, 528.0], [1593.0, 535.6], [1591.0, 538.0], [1589.0, 550.0], [1585.0, 552.0], [1551.0, 573.3333333333334], [1549.0, 578.6666666666666], [1547.0, 575.0], [1545.0, 576.0], [1543.0, 577.0], [1541.0, 577.0], [1539.0, 583.0], [1537.0, 579.0], [1567.0, 560.6666666666666], [1565.0, 563.0], [1561.0, 569.0], [1559.0, 568.0], [1557.0, 569.0], [1555.0, 570.0], [1553.0, 573.0], [1659.0, 472.0], [1651.0, 486.3333333333333], [1663.0, 467.0], [1633.0, 504.4], [1637.0, 498.6], [1635.0, 468.93333333333334], [1639.0, 2.0], [1641.0, 298.2], [1643.0, 496.0], [1645.0, 492.4], [1647.0, 487.8], [1661.0, 468.0], [1657.0, 476.0], [1655.0, 476.7272727272728], [1649.0, 486.0], [1615.0, 513.5], [1613.0, 514.6666666666666], [1611.0, 515.0], [1609.0, 517.0], [1607.0, 418.2], [1605.0, 480.9166666666667], [1603.0, 530.0], [1601.0, 526.5], [1631.0, 506.0], [1629.0, 506.8333333333333], [1627.0, 506.6666666666667], [1623.0, 511.5], [1621.0, 511.4], [1619.0, 513.0], [1617.0, 513.0], [1723.0, 434.3333333333333], [1715.0, 451.0], [1727.0, 433.0], [1697.0, 462.0], [1699.0, 463.2], [1703.0, 464.3333333333333], [1707.0, 463.2], [1709.0, 460.8], [1711.0, 456.5], [1725.0, 434.0], [1721.0, 436.0], [1719.0, 448.0], [1717.0, 450.6666666666667], [1713.0, 460.8], [1695.0, 463.0], [1665.0, 465.0], [1669.0, 462.5], [1667.0, 463.0], [1671.0, 461.5], [1673.0, 464.0], [1675.0, 462.0], [1677.0, 462.6666666666667], [1679.0, 464.625], [1693.0, 463.0], [1691.0, 460.72727272727275], [1687.0, 466.75], [1685.0, 468.25], [1683.0, 469.0], [1681.0, 464.3333333333333], [1789.0, 379.0], [1791.0, 376.3333333333333], [1761.0, 394.0], [1763.0, 327.75], [1767.0, 391.0], [1769.0, 389.2], [1771.0, 383.5], [1773.0, 383.5], [1775.0, 381.1], [1785.0, 366.75], [1783.0, 305.5], [1781.0, 370.0], [1779.0, 375.5], [1777.0, 377.0], [1759.0, 391.3333333333333], [1729.0, 427.25], [1731.0, 423.5], [1733.0, 422.4], [1735.0, 416.5], [1737.0, 415.0], [1741.0, 366.3], [1743.0, 1.0], [1757.0, 393.0], [1755.0, 391.6666666666667], [1753.0, 395.25], [1751.0, 396.0], [1749.0, 400.5], [1747.0, 401.5], [1745.0, 409.0], [1853.0, 362.0], [1855.0, 346.04347826086945], [1825.0, 359.0], [1827.0, 359.4], [1829.0, 360.625], [1831.0, 360.16666666666663], [1835.0, 359.0769230769231], [1837.0, 358.9166666666667], [1839.0, 359.0], [1851.0, 363.0], [1849.0, 361.0], [1847.0, 361.0833333333333], [1845.0, 361.0], [1843.0, 359.25], [1841.0, 338.11764705882365], [1823.0, 356.0], [1793.0, 375.8], [1795.0, 368.0], [1801.0, 364.0], [1803.0, 366.8571428571429], [1805.0, 367.1111111111111], [1807.0, 365.0], [1821.0, 357.0], [1819.0, 355.5], [1817.0, 305.8571428571429], [1815.0, 358.0], [1811.0, 332.69230769230774], [1809.0, 362.5], [1913.0, 391.0], [1915.0, 396.75], [1889.0, 375.22222222222223], [1891.0, 374.3333333333333], [1893.0, 374.3333333333333], [1895.0, 311.66666666666663], [1897.0, 353.1111111111111], [1899.0, 336.3333333333333], [1901.0, 380.14285714285717], [1903.0, 383.75], [1911.0, 393.0], [1909.0, 361.33333333333337], [1907.0, 384.0], [1905.0, 384.0], [1887.0, 374.0], [1857.0, 302.3333333333333], [1859.0, 361.49999999999994], [1861.0, 352.4615384615385], [1863.0, 365.1333333333333], [1865.0, 364.0], [1867.0, 364.0], [1869.0, 328.8], [1871.0, 367.1315789473683], [1885.0, 372.0], [1883.0, 369.50000000000006], [1881.0, 371.0], [1879.0, 368.2857142857143], [1877.0, 365.0], [1875.0, 364.5], [1873.0, 364.0], [1975.0, 480.87999999999994], [1943.0, 543.875], [1941.0, 461.94999999999993], [1939.0, 451.2142857142857], [1937.0, 444.99999999999994], [1983.0, 429.3214285714285], [1953.0, 509.64285714285717], [1955.0, 510.0], [1957.0, 512.470588235294], [1959.0, 513.2105263157894], [1961.0, 515.3684210526316], [1963.0, 520.0], [1965.0, 517.8125000000001], [1967.0, 474.6153846153846], [1981.0, 437.97999999999996], [1979.0, 450.0], [1977.0, 449.88461538461536], [1973.0, 504.84615384615387], [1971.0, 507.84615384615387], [1969.0, 506.23529411764713], [1951.0, 510.6666666666667], [1921.0, 396.5000000000001], [1923.0, 402.49999999999994], [1925.0, 403.9375], [1927.0, 436.0], [1929.0, 408.5714285714286], [1931.0, 438.8666666666667], [1933.0, 440.7142857142858], [1935.0, 442.22222222222223], [1949.0, 342.0], [1947.0, 509.6499999999999], [1945.0, 499.6060606060607], [1987.0, 386.5], [1985.0, 416.75862068965523], [1989.0, 394.97435897435895], [1999.0, 435.3110757816642], [1997.0, 421.9619047619046], [1995.0, 410.7142857142857], [1993.0, 380.57272727272715]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1990.2569800000012, 531.8066900000023]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 109865.25, "minX": 1.6667043E12, "maxY": 889407.9666666667, "series": [{"data": [[1.6667043E12, 889407.9666666667], [1.66670436E12, 848158.2166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6667043E12, 115132.5], [1.66670436E12, 109865.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 483.9052612177205, "minX": 1.6667043E12, "maxY": 577.5157608801826, "series": [{"data": [[1.6667043E12, 577.5157608801826], [1.66670436E12, 483.9052612177205]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 483.8657150463897, "minX": 1.6667043E12, "maxY": 577.477692442981, "series": [{"data": [[1.6667043E12, 577.477692442981], [1.66670436E12, 483.8657150463897]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6667043E12, "maxY": 0.07254108772546912, "series": [{"data": [[1.6667043E12, 0.07254108772546912], [1.66670436E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6667043E12, "maxY": 3157.0, "series": [{"data": [[1.6667043E12, 3157.0], [1.66670436E12, 1126.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6667043E12, 634.0], [1.66670436E12, 518.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6667043E12, 1002.0], [1.66670436E12, 864.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6667043E12, 861.4500000000662], [1.66670436E12, 732.0000000000728]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6667043E12, 0.0], [1.66670436E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6667043E12, 470.0], [1.66670436E12, 425.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 1599.0, "series": [{"data": [[565.0, 1535.0], [597.0, 1599.0], [688.0, 537.0], [993.0, 866.0], [1020.0, 521.0], [1031.0, 1313.0], [1071.0, 986.0], [1043.0, 939.0], [1232.0, 824.0], [1292.0, 843.0], [1327.0, 472.0], [1339.0, 487.0], [1401.0, 959.0], [1501.0, 421.0], [1641.0, 454.0], [1682.0, 730.0], [1668.0, 669.0], [1757.0, 615.0], [1761.0, 473.0], [1836.0, 606.0], [1847.0, 548.0], [1865.0, 547.0], [1897.0, 464.0], [1958.0, 584.0], [1961.0, 635.0], [1999.0, 526.0], [2039.0, 454.0], [2168.0, 471.0], [2072.0, 474.0], [2105.0, 492.0], [2142.0, 472.0], [2159.0, 466.0], [2131.0, 452.0], [2099.0, 461.0], [2101.0, 543.0], [2200.0, 440.0], [2195.0, 514.0], [2281.0, 424.0], [2291.0, 441.0], [2405.0, 409.0], [2397.0, 418.0], [2366.0, 415.5], [2414.0, 426.0], [2504.0, 463.0], [2474.0, 396.5], [2434.0, 406.0], [2638.0, 375.0], [2667.0, 395.0], [2631.0, 377.0], [2613.0, 390.0], [2799.0, 370.0], [2758.0, 369.0], [16.0, 999.0], [171.0, 438.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2799.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1599.0, "series": [{"data": [[565.0, 1535.0], [597.0, 1599.0], [688.0, 537.0], [993.0, 866.0], [1020.0, 521.0], [1031.0, 1312.0], [1071.0, 986.0], [1043.0, 938.0], [1232.0, 824.0], [1292.0, 843.0], [1327.0, 472.0], [1339.0, 487.0], [1401.0, 959.0], [1501.0, 421.0], [1641.0, 454.0], [1682.0, 730.0], [1668.0, 669.0], [1757.0, 615.0], [1761.0, 473.0], [1836.0, 606.0], [1847.0, 548.0], [1865.0, 547.0], [1897.0, 464.0], [1958.0, 584.0], [1961.0, 635.0], [1999.0, 526.0], [2039.0, 453.0], [2168.0, 471.0], [2072.0, 474.0], [2105.0, 492.0], [2142.0, 472.0], [2159.0, 466.0], [2131.0, 452.0], [2099.0, 461.0], [2101.0, 543.0], [2200.0, 440.0], [2195.0, 514.0], [2281.0, 424.0], [2291.0, 441.0], [2405.0, 409.0], [2397.0, 418.0], [2366.0, 415.0], [2414.0, 426.0], [2504.0, 463.0], [2474.0, 396.0], [2434.0, 406.0], [2638.0, 375.0], [2667.0, 395.0], [2631.0, 377.0], [2613.0, 390.0], [2799.0, 370.0], [2758.0, 369.0], [16.0, 999.0], [171.0, 437.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2799.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 797.15, "minX": 1.6667043E12, "maxY": 869.5166666666667, "series": [{"data": [[1.6667043E12, 869.5166666666667], [1.66670436E12, 797.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6667043E12, "maxY": 852.8333333333334, "series": [{"data": [[1.6667043E12, 852.8333333333334], [1.66670436E12, 813.8166666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6667043E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6667043E12, "maxY": 852.8333333333334, "series": [{"data": [[1.6667043E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6667043E12, 852.8333333333334], [1.66670436E12, 813.8166666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6667043E12, "maxY": 852.8333333333334, "series": [{"data": [[1.6667043E12, 852.8333333333334], [1.66670436E12, 813.8166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6667043E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

