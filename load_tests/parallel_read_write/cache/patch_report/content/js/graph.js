/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2873.0, "series": [{"data": [[0.0, 1.0], [0.1, 4.0], [0.2, 4.0], [0.3, 5.0], [0.4, 6.0], [0.5, 8.0], [0.6, 10.0], [0.7, 18.0], [0.8, 42.0], [0.9, 55.0], [1.0, 75.0], [1.1, 87.0], [1.2, 97.0], [1.3, 109.0], [1.4, 125.0], [1.5, 137.0], [1.6, 153.0], [1.7, 165.0], [1.8, 173.0], [1.9, 187.0], [2.0, 197.0], [2.1, 208.0], [2.2, 219.0], [2.3, 228.0], [2.4, 234.0], [2.5, 237.0], [2.6, 241.0], [2.7, 244.0], [2.8, 245.0], [2.9, 247.0], [3.0, 248.0], [3.1, 249.0], [3.2, 250.0], [3.3, 251.0], [3.4, 252.0], [3.5, 253.0], [3.6, 254.0], [3.7, 254.0], [3.8, 255.0], [3.9, 255.0], [4.0, 256.0], [4.1, 257.0], [4.2, 258.0], [4.3, 259.0], [4.4, 260.0], [4.5, 260.0], [4.6, 261.0], [4.7, 261.0], [4.8, 261.0], [4.9, 262.0], [5.0, 262.0], [5.1, 263.0], [5.2, 263.0], [5.3, 263.0], [5.4, 263.0], [5.5, 264.0], [5.6, 264.0], [5.7, 265.0], [5.8, 265.0], [5.9, 266.0], [6.0, 267.0], [6.1, 267.0], [6.2, 268.0], [6.3, 270.0], [6.4, 272.0], [6.5, 274.0], [6.6, 282.0], [6.7, 285.0], [6.8, 288.0], [6.9, 290.0], [7.0, 291.0], [7.1, 292.0], [7.2, 294.0], [7.3, 295.0], [7.4, 296.0], [7.5, 298.0], [7.6, 299.0], [7.7, 301.0], [7.8, 302.0], [7.9, 304.0], [8.0, 305.0], [8.1, 306.0], [8.2, 308.0], [8.3, 309.0], [8.4, 310.0], [8.5, 311.0], [8.6, 312.0], [8.7, 312.0], [8.8, 313.0], [8.9, 314.0], [9.0, 314.0], [9.1, 315.0], [9.2, 316.0], [9.3, 316.0], [9.4, 317.0], [9.5, 317.0], [9.6, 318.0], [9.7, 318.0], [9.8, 319.0], [9.9, 319.0], [10.0, 320.0], [10.1, 320.0], [10.2, 321.0], [10.3, 322.0], [10.4, 322.0], [10.5, 323.0], [10.6, 323.0], [10.7, 324.0], [10.8, 324.0], [10.9, 325.0], [11.0, 326.0], [11.1, 327.0], [11.2, 327.0], [11.3, 328.0], [11.4, 329.0], [11.5, 330.0], [11.6, 331.0], [11.7, 332.0], [11.8, 333.0], [11.9, 334.0], [12.0, 335.0], [12.1, 336.0], [12.2, 337.0], [12.3, 339.0], [12.4, 341.0], [12.5, 344.0], [12.6, 345.0], [12.7, 347.0], [12.8, 349.0], [12.9, 350.0], [13.0, 351.0], [13.1, 353.0], [13.2, 354.0], [13.3, 355.0], [13.4, 356.0], [13.5, 357.0], [13.6, 357.0], [13.7, 358.0], [13.8, 359.0], [13.9, 359.0], [14.0, 360.0], [14.1, 360.0], [14.2, 361.0], [14.3, 361.0], [14.4, 362.0], [14.5, 362.0], [14.6, 363.0], [14.7, 363.0], [14.8, 364.0], [14.9, 365.0], [15.0, 365.0], [15.1, 366.0], [15.2, 366.0], [15.3, 367.0], [15.4, 368.0], [15.5, 368.0], [15.6, 369.0], [15.7, 370.0], [15.8, 370.0], [15.9, 371.0], [16.0, 372.0], [16.1, 372.0], [16.2, 373.0], [16.3, 373.0], [16.4, 374.0], [16.5, 375.0], [16.6, 375.0], [16.7, 376.0], [16.8, 376.0], [16.9, 377.0], [17.0, 377.0], [17.1, 378.0], [17.2, 379.0], [17.3, 379.0], [17.4, 380.0], [17.5, 380.0], [17.6, 381.0], [17.7, 381.0], [17.8, 382.0], [17.9, 382.0], [18.0, 383.0], [18.1, 383.0], [18.2, 384.0], [18.3, 384.0], [18.4, 385.0], [18.5, 385.0], [18.6, 386.0], [18.7, 386.0], [18.8, 387.0], [18.9, 388.0], [19.0, 388.0], [19.1, 388.0], [19.2, 389.0], [19.3, 390.0], [19.4, 390.0], [19.5, 391.0], [19.6, 392.0], [19.7, 392.0], [19.8, 392.0], [19.9, 393.0], [20.0, 393.0], [20.1, 394.0], [20.2, 394.0], [20.3, 395.0], [20.4, 396.0], [20.5, 396.0], [20.6, 397.0], [20.7, 398.0], [20.8, 398.0], [20.9, 399.0], [21.0, 400.0], [21.1, 400.0], [21.2, 401.0], [21.3, 402.0], [21.4, 402.0], [21.5, 403.0], [21.6, 404.0], [21.7, 404.0], [21.8, 405.0], [21.9, 406.0], [22.0, 406.0], [22.1, 407.0], [22.2, 407.0], [22.3, 408.0], [22.4, 409.0], [22.5, 409.0], [22.6, 410.0], [22.7, 411.0], [22.8, 411.0], [22.9, 412.0], [23.0, 413.0], [23.1, 413.0], [23.2, 414.0], [23.3, 414.0], [23.4, 415.0], [23.5, 415.0], [23.6, 416.0], [23.7, 416.0], [23.8, 417.0], [23.9, 417.0], [24.0, 418.0], [24.1, 419.0], [24.2, 419.0], [24.3, 420.0], [24.4, 420.0], [24.5, 421.0], [24.6, 421.0], [24.7, 422.0], [24.8, 422.0], [24.9, 423.0], [25.0, 423.0], [25.1, 424.0], [25.2, 424.0], [25.3, 425.0], [25.4, 425.0], [25.5, 426.0], [25.6, 426.0], [25.7, 427.0], [25.8, 427.0], [25.9, 428.0], [26.0, 428.0], [26.1, 429.0], [26.2, 430.0], [26.3, 430.0], [26.4, 431.0], [26.5, 431.0], [26.6, 432.0], [26.7, 432.0], [26.8, 432.0], [26.9, 433.0], [27.0, 433.0], [27.1, 434.0], [27.2, 434.0], [27.3, 434.0], [27.4, 435.0], [27.5, 435.0], [27.6, 435.0], [27.7, 436.0], [27.8, 436.0], [27.9, 437.0], [28.0, 437.0], [28.1, 437.0], [28.2, 438.0], [28.3, 438.0], [28.4, 438.0], [28.5, 438.0], [28.6, 439.0], [28.7, 439.0], [28.8, 439.0], [28.9, 440.0], [29.0, 440.0], [29.1, 441.0], [29.2, 441.0], [29.3, 441.0], [29.4, 442.0], [29.5, 442.0], [29.6, 442.0], [29.7, 443.0], [29.8, 443.0], [29.9, 443.0], [30.0, 444.0], [30.1, 444.0], [30.2, 445.0], [30.3, 445.0], [30.4, 445.0], [30.5, 446.0], [30.6, 446.0], [30.7, 446.0], [30.8, 447.0], [30.9, 447.0], [31.0, 448.0], [31.1, 448.0], [31.2, 448.0], [31.3, 449.0], [31.4, 449.0], [31.5, 450.0], [31.6, 450.0], [31.7, 450.0], [31.8, 451.0], [31.9, 451.0], [32.0, 452.0], [32.1, 452.0], [32.2, 453.0], [32.3, 453.0], [32.4, 453.0], [32.5, 454.0], [32.6, 454.0], [32.7, 455.0], [32.8, 455.0], [32.9, 455.0], [33.0, 456.0], [33.1, 456.0], [33.2, 457.0], [33.3, 457.0], [33.4, 457.0], [33.5, 458.0], [33.6, 458.0], [33.7, 459.0], [33.8, 459.0], [33.9, 460.0], [34.0, 460.0], [34.1, 461.0], [34.2, 461.0], [34.3, 461.0], [34.4, 462.0], [34.5, 462.0], [34.6, 463.0], [34.7, 463.0], [34.8, 463.0], [34.9, 464.0], [35.0, 464.0], [35.1, 465.0], [35.2, 465.0], [35.3, 465.0], [35.4, 466.0], [35.5, 466.0], [35.6, 467.0], [35.7, 467.0], [35.8, 468.0], [35.9, 468.0], [36.0, 468.0], [36.1, 469.0], [36.2, 469.0], [36.3, 469.0], [36.4, 470.0], [36.5, 470.0], [36.6, 470.0], [36.7, 471.0], [36.8, 471.0], [36.9, 472.0], [37.0, 472.0], [37.1, 472.0], [37.2, 473.0], [37.3, 473.0], [37.4, 474.0], [37.5, 474.0], [37.6, 474.0], [37.7, 475.0], [37.8, 475.0], [37.9, 476.0], [38.0, 476.0], [38.1, 476.0], [38.2, 477.0], [38.3, 477.0], [38.4, 477.0], [38.5, 478.0], [38.6, 478.0], [38.7, 479.0], [38.8, 479.0], [38.9, 480.0], [39.0, 480.0], [39.1, 480.0], [39.2, 481.0], [39.3, 481.0], [39.4, 482.0], [39.5, 482.0], [39.6, 483.0], [39.7, 483.0], [39.8, 483.0], [39.9, 484.0], [40.0, 484.0], [40.1, 485.0], [40.2, 485.0], [40.3, 486.0], [40.4, 486.0], [40.5, 487.0], [40.6, 487.0], [40.7, 488.0], [40.8, 488.0], [40.9, 489.0], [41.0, 489.0], [41.1, 490.0], [41.2, 490.0], [41.3, 491.0], [41.4, 491.0], [41.5, 492.0], [41.6, 493.0], [41.7, 493.0], [41.8, 494.0], [41.9, 494.0], [42.0, 495.0], [42.1, 495.0], [42.2, 496.0], [42.3, 497.0], [42.4, 497.0], [42.5, 498.0], [42.6, 498.0], [42.7, 499.0], [42.8, 499.0], [42.9, 500.0], [43.0, 500.0], [43.1, 500.0], [43.2, 501.0], [43.3, 501.0], [43.4, 502.0], [43.5, 502.0], [43.6, 502.0], [43.7, 503.0], [43.8, 503.0], [43.9, 504.0], [44.0, 504.0], [44.1, 505.0], [44.2, 505.0], [44.3, 506.0], [44.4, 506.0], [44.5, 507.0], [44.6, 507.0], [44.7, 508.0], [44.8, 508.0], [44.9, 508.0], [45.0, 509.0], [45.1, 509.0], [45.2, 510.0], [45.3, 510.0], [45.4, 510.0], [45.5, 511.0], [45.6, 511.0], [45.7, 512.0], [45.8, 512.0], [45.9, 513.0], [46.0, 513.0], [46.1, 514.0], [46.2, 514.0], [46.3, 515.0], [46.4, 515.0], [46.5, 515.0], [46.6, 516.0], [46.7, 516.0], [46.8, 517.0], [46.9, 517.0], [47.0, 518.0], [47.1, 518.0], [47.2, 518.0], [47.3, 519.0], [47.4, 519.0], [47.5, 520.0], [47.6, 520.0], [47.7, 521.0], [47.8, 521.0], [47.9, 522.0], [48.0, 522.0], [48.1, 522.0], [48.2, 523.0], [48.3, 523.0], [48.4, 523.0], [48.5, 524.0], [48.6, 524.0], [48.7, 525.0], [48.8, 525.0], [48.9, 525.0], [49.0, 526.0], [49.1, 526.0], [49.2, 527.0], [49.3, 527.0], [49.4, 528.0], [49.5, 528.0], [49.6, 529.0], [49.7, 529.0], [49.8, 530.0], [49.9, 530.0], [50.0, 531.0], [50.1, 531.0], [50.2, 531.0], [50.3, 532.0], [50.4, 532.0], [50.5, 533.0], [50.6, 533.0], [50.7, 534.0], [50.8, 534.0], [50.9, 535.0], [51.0, 535.0], [51.1, 535.0], [51.2, 536.0], [51.3, 536.0], [51.4, 537.0], [51.5, 537.0], [51.6, 538.0], [51.7, 538.0], [51.8, 539.0], [51.9, 539.0], [52.0, 539.0], [52.1, 540.0], [52.2, 540.0], [52.3, 541.0], [52.4, 541.0], [52.5, 542.0], [52.6, 542.0], [52.7, 542.0], [52.8, 543.0], [52.9, 543.0], [53.0, 544.0], [53.1, 544.0], [53.2, 544.0], [53.3, 545.0], [53.4, 545.0], [53.5, 545.0], [53.6, 546.0], [53.7, 546.0], [53.8, 547.0], [53.9, 547.0], [54.0, 547.0], [54.1, 548.0], [54.2, 548.0], [54.3, 549.0], [54.4, 549.0], [54.5, 549.0], [54.6, 550.0], [54.7, 550.0], [54.8, 551.0], [54.9, 551.0], [55.0, 552.0], [55.1, 552.0], [55.2, 553.0], [55.3, 553.0], [55.4, 553.0], [55.5, 554.0], [55.6, 554.0], [55.7, 555.0], [55.8, 556.0], [55.9, 556.0], [56.0, 557.0], [56.1, 557.0], [56.2, 558.0], [56.3, 558.0], [56.4, 559.0], [56.5, 559.0], [56.6, 560.0], [56.7, 560.0], [56.8, 561.0], [56.9, 561.0], [57.0, 562.0], [57.1, 563.0], [57.2, 563.0], [57.3, 564.0], [57.4, 564.0], [57.5, 565.0], [57.6, 566.0], [57.7, 566.0], [57.8, 567.0], [57.9, 567.0], [58.0, 568.0], [58.1, 568.0], [58.2, 569.0], [58.3, 569.0], [58.4, 570.0], [58.5, 570.0], [58.6, 571.0], [58.7, 571.0], [58.8, 572.0], [58.9, 572.0], [59.0, 573.0], [59.1, 573.0], [59.2, 574.0], [59.3, 574.0], [59.4, 575.0], [59.5, 575.0], [59.6, 576.0], [59.7, 577.0], [59.8, 577.0], [59.9, 578.0], [60.0, 578.0], [60.1, 579.0], [60.2, 579.0], [60.3, 580.0], [60.4, 581.0], [60.5, 581.0], [60.6, 582.0], [60.7, 582.0], [60.8, 583.0], [60.9, 584.0], [61.0, 584.0], [61.1, 585.0], [61.2, 586.0], [61.3, 586.0], [61.4, 587.0], [61.5, 587.0], [61.6, 588.0], [61.7, 589.0], [61.8, 589.0], [61.9, 590.0], [62.0, 591.0], [62.1, 591.0], [62.2, 592.0], [62.3, 593.0], [62.4, 593.0], [62.5, 594.0], [62.6, 595.0], [62.7, 595.0], [62.8, 596.0], [62.9, 596.0], [63.0, 597.0], [63.1, 597.0], [63.2, 598.0], [63.3, 599.0], [63.4, 600.0], [63.5, 600.0], [63.6, 601.0], [63.7, 601.0], [63.8, 602.0], [63.9, 603.0], [64.0, 603.0], [64.1, 604.0], [64.2, 604.0], [64.3, 605.0], [64.4, 605.0], [64.5, 606.0], [64.6, 606.0], [64.7, 607.0], [64.8, 608.0], [64.9, 608.0], [65.0, 609.0], [65.1, 609.0], [65.2, 610.0], [65.3, 611.0], [65.4, 611.0], [65.5, 612.0], [65.6, 612.0], [65.7, 613.0], [65.8, 613.0], [65.9, 614.0], [66.0, 615.0], [66.1, 615.0], [66.2, 616.0], [66.3, 617.0], [66.4, 617.0], [66.5, 618.0], [66.6, 618.0], [66.7, 619.0], [66.8, 620.0], [66.9, 620.0], [67.0, 621.0], [67.1, 622.0], [67.2, 623.0], [67.3, 623.0], [67.4, 624.0], [67.5, 624.0], [67.6, 625.0], [67.7, 626.0], [67.8, 627.0], [67.9, 627.0], [68.0, 628.0], [68.1, 629.0], [68.2, 629.0], [68.3, 630.0], [68.4, 631.0], [68.5, 632.0], [68.6, 632.0], [68.7, 633.0], [68.8, 634.0], [68.9, 635.0], [69.0, 636.0], [69.1, 637.0], [69.2, 638.0], [69.3, 639.0], [69.4, 639.0], [69.5, 640.0], [69.6, 641.0], [69.7, 642.0], [69.8, 643.0], [69.9, 643.0], [70.0, 644.0], [70.1, 645.0], [70.2, 646.0], [70.3, 646.0], [70.4, 647.0], [70.5, 648.0], [70.6, 649.0], [70.7, 650.0], [70.8, 651.0], [70.9, 652.0], [71.0, 652.0], [71.1, 653.0], [71.2, 654.0], [71.3, 654.0], [71.4, 655.0], [71.5, 656.0], [71.6, 656.0], [71.7, 657.0], [71.8, 658.0], [71.9, 658.0], [72.0, 659.0], [72.1, 660.0], [72.2, 661.0], [72.3, 662.0], [72.4, 663.0], [72.5, 665.0], [72.6, 666.0], [72.7, 667.0], [72.8, 668.0], [72.9, 669.0], [73.0, 670.0], [73.1, 671.0], [73.2, 672.0], [73.3, 674.0], [73.4, 675.0], [73.5, 676.0], [73.6, 677.0], [73.7, 677.0], [73.8, 678.0], [73.9, 679.0], [74.0, 680.0], [74.1, 681.0], [74.2, 682.0], [74.3, 684.0], [74.4, 685.0], [74.5, 686.0], [74.6, 687.0], [74.7, 688.0], [74.8, 690.0], [74.9, 691.0], [75.0, 692.0], [75.1, 693.0], [75.2, 695.0], [75.3, 696.0], [75.4, 697.0], [75.5, 698.0], [75.6, 700.0], [75.7, 701.0], [75.8, 703.0], [75.9, 704.0], [76.0, 705.0], [76.1, 707.0], [76.2, 708.0], [76.3, 710.0], [76.4, 711.0], [76.5, 712.0], [76.6, 713.0], [76.7, 715.0], [76.8, 716.0], [76.9, 717.0], [77.0, 719.0], [77.1, 721.0], [77.2, 722.0], [77.3, 724.0], [77.4, 725.0], [77.5, 727.0], [77.6, 728.0], [77.7, 729.0], [77.8, 730.0], [77.9, 731.0], [78.0, 732.0], [78.1, 734.0], [78.2, 735.0], [78.3, 736.0], [78.4, 737.0], [78.5, 739.0], [78.6, 740.0], [78.7, 741.0], [78.8, 743.0], [78.9, 744.0], [79.0, 745.0], [79.1, 747.0], [79.2, 748.0], [79.3, 750.0], [79.4, 751.0], [79.5, 752.0], [79.6, 754.0], [79.7, 755.0], [79.8, 756.0], [79.9, 758.0], [80.0, 759.0], [80.1, 760.0], [80.2, 761.0], [80.3, 762.0], [80.4, 763.0], [80.5, 765.0], [80.6, 766.0], [80.7, 767.0], [80.8, 768.0], [80.9, 770.0], [81.0, 771.0], [81.1, 772.0], [81.2, 773.0], [81.3, 775.0], [81.4, 776.0], [81.5, 777.0], [81.6, 779.0], [81.7, 780.0], [81.8, 781.0], [81.9, 782.0], [82.0, 783.0], [82.1, 785.0], [82.2, 786.0], [82.3, 788.0], [82.4, 790.0], [82.5, 792.0], [82.6, 794.0], [82.7, 798.0], [82.8, 801.0], [82.9, 803.0], [83.0, 806.0], [83.1, 809.0], [83.2, 812.0], [83.3, 815.0], [83.4, 817.0], [83.5, 819.0], [83.6, 822.0], [83.7, 825.0], [83.8, 827.0], [83.9, 830.0], [84.0, 832.0], [84.1, 834.0], [84.2, 837.0], [84.3, 839.0], [84.4, 841.0], [84.5, 843.0], [84.6, 845.0], [84.7, 847.0], [84.8, 849.0], [84.9, 850.0], [85.0, 852.0], [85.1, 854.0], [85.2, 855.0], [85.3, 858.0], [85.4, 859.0], [85.5, 861.0], [85.6, 864.0], [85.7, 866.0], [85.8, 868.0], [85.9, 870.0], [86.0, 872.0], [86.1, 874.0], [86.2, 876.0], [86.3, 878.0], [86.4, 880.0], [86.5, 883.0], [86.6, 885.0], [86.7, 888.0], [86.8, 890.0], [86.9, 893.0], [87.0, 895.0], [87.1, 898.0], [87.2, 901.0], [87.3, 905.0], [87.4, 909.0], [87.5, 913.0], [87.6, 916.0], [87.7, 920.0], [87.8, 924.0], [87.9, 928.0], [88.0, 933.0], [88.1, 937.0], [88.2, 940.0], [88.3, 944.0], [88.4, 947.0], [88.5, 950.0], [88.6, 953.0], [88.7, 956.0], [88.8, 959.0], [88.9, 962.0], [89.0, 964.0], [89.1, 966.0], [89.2, 968.0], [89.3, 970.0], [89.4, 972.0], [89.5, 975.0], [89.6, 979.0], [89.7, 982.0], [89.8, 984.0], [89.9, 987.0], [90.0, 989.0], [90.1, 992.0], [90.2, 994.0], [90.3, 997.0], [90.4, 1000.0], [90.5, 1002.0], [90.6, 1005.0], [90.7, 1008.0], [90.8, 1011.0], [90.9, 1015.0], [91.0, 1019.0], [91.1, 1023.0], [91.2, 1028.0], [91.3, 1032.0], [91.4, 1037.0], [91.5, 1042.0], [91.6, 1047.0], [91.7, 1052.0], [91.8, 1057.0], [91.9, 1061.0], [92.0, 1065.0], [92.1, 1068.0], [92.2, 1071.0], [92.3, 1074.0], [92.4, 1078.0], [92.5, 1082.0], [92.6, 1086.0], [92.7, 1090.0], [92.8, 1094.0], [92.9, 1097.0], [93.0, 1102.0], [93.1, 1107.0], [93.2, 1111.0], [93.3, 1116.0], [93.4, 1121.0], [93.5, 1126.0], [93.6, 1132.0], [93.7, 1137.0], [93.8, 1142.0], [93.9, 1148.0], [94.0, 1154.0], [94.1, 1161.0], [94.2, 1166.0], [94.3, 1172.0], [94.4, 1176.0], [94.5, 1181.0], [94.6, 1186.0], [94.7, 1191.0], [94.8, 1195.0], [94.9, 1200.0], [95.0, 1203.0], [95.1, 1207.0], [95.2, 1213.0], [95.3, 1221.0], [95.4, 1228.0], [95.5, 1236.0], [95.6, 1244.0], [95.7, 1252.0], [95.8, 1258.0], [95.9, 1264.0], [96.0, 1272.0], [96.1, 1282.0], [96.2, 1293.0], [96.3, 1303.0], [96.4, 1313.0], [96.5, 1323.0], [96.6, 1332.0], [96.7, 1346.0], [96.8, 1360.0], [96.9, 1375.0], [97.0, 1384.0], [97.1, 1390.0], [97.2, 1398.0], [97.3, 1410.0], [97.4, 1429.0], [97.5, 1457.0], [97.6, 1490.0], [97.7, 1505.0], [97.8, 1522.0], [97.9, 1540.0], [98.0, 1560.0], [98.1, 1591.0], [98.2, 1609.0], [98.3, 1629.0], [98.4, 1641.0], [98.5, 1654.0], [98.6, 1676.0], [98.7, 1709.0], [98.8, 1758.0], [98.9, 1780.0], [99.0, 1794.0], [99.1, 1808.0], [99.2, 1823.0], [99.3, 1844.0], [99.4, 1868.0], [99.5, 1930.0], [99.6, 1975.0], [99.7, 2008.0], [99.8, 2116.0], [99.9, 2265.0], [100.0, 2873.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 21893.0, "series": [{"data": [[0.0, 1226.0], [600.0, 12189.0], [700.0, 7165.0], [800.0, 4382.0], [900.0, 3258.0], [1000.0, 2555.0], [1100.0, 1926.0], [1200.0, 1394.0], [1300.0, 940.0], [1400.0, 444.0], [1500.0, 482.0], [1600.0, 535.0], [100.0, 808.0], [1700.0, 365.0], [1800.0, 432.0], [1900.0, 204.0], [2000.0, 97.0], [2100.0, 113.0], [2200.0, 33.0], [2300.0, 39.0], [2400.0, 13.0], [2500.0, 20.0], [2600.0, 2.0], [2800.0, 2.0], [2700.0, 10.0], [200.0, 5569.0], [300.0, 13387.0], [400.0, 21893.0], [500.0, 20517.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 54544.0, "series": [{"data": [[0.0, 43112.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 54544.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2340.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 972.2928891098993, "minX": 1.6667043E12, "maxY": 999.9156450181144, "series": [{"data": [[1.6667043E12, 999.9156450181144], [1.66670436E12, 972.2928891098993]], "isOverall": false, "label": "Change employee name", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.0, "maxY": 1000.0, "series": [{"data": [[5.0, 5.5], [6.0, 7.0], [7.0, 10.5], [8.0, 9.0], [9.0, 9.0], [10.0, 8.75], [11.0, 11.0], [13.0, 24.0], [14.0, 17.0], [15.0, 14.0], [16.0, 14.0], [17.0, 13.5], [18.0, 15.666666666666666], [19.0, 16.0], [20.0, 10.5], [21.0, 16.0], [22.0, 25.25], [23.0, 29.666666666666668], [25.0, 35.666666666666664], [26.0, 38.0], [28.0, 35.5], [29.0, 35.0], [30.0, 84.4], [33.0, 42.0], [32.0, 32.0], [35.0, 41.0], [37.0, 42.5], [39.0, 43.5], [41.0, 44.0], [43.0, 43.666666666666664], [45.0, 44.0], [44.0, 314.0], [49.0, 28.0], [48.0, 40.57142857142857], [51.0, 31.0], [53.0, 30.0], [52.0, 113.50000000000001], [55.0, 34.0], [54.0, 31.5], [57.0, 38.0], [56.0, 159.0], [59.0, 20.5], [61.0, 39.5], [60.0, 219.33333333333334], [63.0, 42.0], [62.0, 39.0], [67.0, 44.0], [66.0, 44.0], [65.0, 52.5], [71.0, 121.0], [70.0, 118.0], [69.0, 117.66666666666666], [68.0, 41.0], [74.0, 235.25], [73.0, 45.0], [72.0, 266.0], [79.0, 48.0], [78.0, 199.8], [77.0, 269.0], [76.0, 97.66666666666667], [80.0, 125.0], [87.0, 281.0], [86.0, 53.0], [85.0, 56.5], [84.0, 107.85714285714286], [89.0, 136.5], [88.0, 135.8], [95.0, 233.0], [94.0, 233.5], [93.0, 64.0], [92.0, 88.66666666666667], [99.0, 67.0], [98.0, 68.0], [96.0, 66.5], [103.0, 77.0], [102.0, 302.0], [107.0, 69.5], [105.0, 71.0], [104.0, 4.0], [111.0, 5.0], [110.0, 6.0], [109.0, 39.0], [108.0, 100.5], [115.0, 75.57142857142858], [114.0, 71.0], [113.0, 75.0], [112.0, 49.666666666666664], [119.0, 61.25], [117.0, 74.0], [116.0, 79.0], [123.0, 79.0], [122.0, 204.0], [121.0, 269.0], [120.0, 174.0], [127.0, 3.0], [126.0, 153.0], [125.0, 4.0], [124.0, 631.0], [135.0, 87.25], [134.0, 123.16666666666667], [133.0, 4.0], [132.0, 163.0], [130.0, 82.0], [129.0, 144.71428571428572], [128.0, 267.75], [143.0, 109.0], [142.0, 110.0], [141.0, 224.0], [140.0, 142.66666666666666], [139.0, 116.5], [138.0, 251.33333333333334], [137.0, 130.0], [136.0, 120.66666666666666], [145.0, 50.0], [151.0, 231.0], [150.0, 119.0], [149.0, 118.0], [148.0, 120.0], [147.0, 232.5], [146.0, 169.0], [159.0, 124.0], [158.0, 231.0], [157.0, 286.25], [156.0, 177.0], [154.0, 119.0], [153.0, 127.25], [152.0, 119.0], [166.0, 207.75], [164.0, 130.0], [163.0, 134.83333333333331], [162.0, 128.0], [161.0, 34.25], [160.0, 162.33333333333334], [175.0, 135.0], [174.0, 188.42857142857144], [171.0, 239.33333333333334], [170.0, 148.5], [169.0, 183.71428571428572], [168.0, 186.0], [182.0, 322.5], [181.0, 228.5], [179.0, 140.0], [178.0, 293.5], [176.0, 86.5], [191.0, 354.0], [190.0, 144.0], [189.0, 354.0], [188.0, 355.0], [187.0, 300.5], [185.0, 188.83333333333331], [184.0, 278.3333333333333], [199.0, 6.0], [198.0, 77.5], [197.0, 96.42857142857143], [196.0, 216.66666666666666], [195.0, 233.0], [194.0, 6.0], [193.0, 6.0], [192.0, 7.0], [207.0, 239.5], [205.0, 135.0], [203.0, 10.0], [202.0, 8.333333333333334], [201.0, 7.0], [200.0, 8.5], [215.0, 252.0], [214.0, 12.0], [213.0, 269.25], [212.0, 13.0], [210.0, 23.0], [209.0, 109.5], [208.0, 13.5], [223.0, 40.0], [222.0, 206.0], [221.0, 156.0], [220.0, 144.14285714285714], [219.0, 8.0], [218.0, 8.5], [217.0, 132.0], [216.0, 10.5], [231.0, 99.0], [224.0, 77.0], [239.0, 103.5], [238.0, 39.0], [237.0, 165.0], [236.0, 196.375], [234.0, 113.25], [233.0, 96.66666666666667], [232.0, 198.49999999999997], [247.0, 147.0], [246.0, 115.28571428571428], [245.0, 36.0], [244.0, 36.0], [243.0, 145.66666666666666], [242.0, 143.0], [241.0, 240.7], [240.0, 101.0], [255.0, 81.0], [253.0, 149.0], [252.0, 150.0], [251.0, 42.0], [250.0, 184.4], [249.0, 113.66666666666667], [248.0, 113.0], [269.0, 51.5], [271.0, 85.0], [268.0, 48.25], [259.0, 321.25], [258.0, 149.0], [257.0, 47.0], [256.0, 47.0], [267.0, 154.0], [265.0, 101.0], [264.0, 49.0], [262.0, 81.33333333333333], [261.0, 152.0], [260.0, 48.0], [286.0, 60.0], [287.0, 269.0], [285.0, 215.0], [284.0, 266.5], [283.0, 82.0], [282.0, 61.0], [281.0, 159.0], [280.0, 170.39999999999998], [278.0, 138.6], [274.0, 100.55555555555556], [273.0, 155.0], [272.0, 94.4], [277.0, 158.0], [302.0, 170.0], [303.0, 222.0], [301.0, 117.5], [300.0, 168.5], [299.0, 167.0], [298.0, 99.0], [297.0, 237.66666666666669], [296.0, 270.0], [295.0, 134.0], [290.0, 165.25], [288.0, 106.14285714285714], [293.0, 97.0], [292.0, 165.5], [318.0, 233.71428571428572], [319.0, 72.25], [317.0, 279.0], [306.0, 99.0], [305.0, 65.0], [304.0, 276.0], [315.0, 174.25], [314.0, 278.0], [313.0, 231.0], [312.0, 198.5], [311.0, 170.5], [310.0, 241.66666666666669], [309.0, 369.0], [308.0, 143.25], [334.0, 234.2], [335.0, 232.0], [333.0, 180.0], [332.0, 180.0], [331.0, 162.4], [330.0, 76.0], [329.0, 144.66666666666666], [328.0, 249.66666666666669], [327.0, 179.0], [322.0, 329.5], [321.0, 227.0], [326.0, 161.5], [325.0, 177.0], [324.0, 215.70000000000002], [349.0, 210.5], [350.0, 240.5], [348.0, 194.0], [339.0, 251.0], [337.0, 156.25], [336.0, 78.5], [347.0, 161.42857142857142], [346.0, 326.0], [345.0, 189.0], [344.0, 101.6], [342.0, 134.5], [341.0, 523.5], [340.0, 166.33333333333334], [366.0, 276.6666666666667], [367.0, 179.77777777777774], [364.0, 308.0], [354.0, 89.25], [353.0, 160.33333333333331], [352.0, 90.0], [363.0, 163.5], [361.0, 292.5], [360.0, 197.5], [359.0, 165.33333333333334], [358.0, 173.0], [357.0, 127.0], [356.0, 162.33333333333334], [382.0, 212.0], [383.0, 175.33333333333334], [381.0, 155.0], [380.0, 156.0], [378.0, 181.25], [377.0, 94.0], [376.0, 162.14285714285714], [375.0, 205.0], [369.0, 579.0], [368.0, 309.0], [371.0, 429.3333333333333], [370.0, 322.25], [374.0, 161.71428571428572], [373.0, 138.0], [372.0, 204.5], [398.0, 320.0], [399.0, 227.0], [397.0, 231.75], [396.0, 270.5], [395.0, 110.5], [394.0, 296.0], [393.0, 112.0], [392.0, 463.00000000000006], [391.0, 193.4], [384.0, 194.33333333333334], [387.0, 209.5], [385.0, 447.5], [390.0, 231.4], [389.0, 219.0], [388.0, 232.16666666666666], [414.0, 228.0], [415.0, 276.5], [413.0, 228.66666666666666], [403.0, 239.2], [402.0, 228.0], [401.0, 232.11111111111111], [411.0, 324.0], [410.0, 322.75], [409.0, 203.75], [408.0, 143.5], [407.0, 323.0], [406.0, 257.8888888888889], [404.0, 242.2], [429.0, 133.5], [431.0, 183.25], [428.0, 134.0], [419.0, 168.8], [418.0, 262.6666666666667], [417.0, 203.75], [416.0, 227.2], [427.0, 131.0], [426.0, 136.0], [425.0, 185.5], [424.0, 288.0], [423.0, 244.76923076923077], [422.0, 189.4], [445.0, 246.0], [446.0, 489.0], [444.0, 288.0], [435.0, 239.0], [434.0, 192.6], [443.0, 322.25], [442.0, 236.6], [440.0, 279.0], [439.0, 417.0], [437.0, 239.0], [436.0, 240.0], [462.0, 277.57142857142856], [463.0, 346.0], [461.0, 237.1428571428571], [460.0, 124.5], [459.0, 152.0], [458.0, 199.0], [457.0, 198.0], [456.0, 158.0], [455.0, 261.0], [448.0, 206.6], [451.0, 245.8], [449.0, 215.29999999999998], [454.0, 179.18181818181816], [452.0, 261.6666666666667], [478.0, 213.5], [479.0, 346.5], [477.0, 349.0], [476.0, 195.0], [475.0, 164.0], [474.0, 209.5], [472.0, 254.5], [471.0, 208.5], [465.0, 158.0], [464.0, 203.5], [467.0, 232.8], [466.0, 465.66666666666663], [469.0, 162.25], [468.0, 227.0], [493.0, 268.3333333333333], [494.0, 512.3333333333334], [492.0, 285.8], [483.0, 167.0], [482.0, 138.0], [481.0, 261.0], [480.0, 164.0], [491.0, 201.00000000000003], [490.0, 169.0], [489.0, 218.75], [488.0, 168.5], [487.0, 260.0], [485.0, 222.4], [509.0, 248.85714285714286], [511.0, 444.0], [508.0, 172.0], [499.0, 287.75], [498.0, 327.1428571428571], [497.0, 316.0], [496.0, 356.3333333333333], [507.0, 360.99999999999994], [506.0, 351.0], [505.0, 305.0], [503.0, 276.25], [502.0, 201.28571428571428], [501.0, 225.0], [500.0, 354.0], [540.0, 185.0], [542.0, 188.66666666666666], [528.0, 354.0], [530.0, 252.57142857142858], [532.0, 412.5], [538.0, 230.125], [536.0, 247.66666666666666], [518.0, 408.6], [516.0, 172.0], [514.0, 266.6666666666667], [512.0, 349.6666666666667], [526.0, 176.0], [524.0, 326.45454545454544], [522.0, 237.33333333333334], [520.0, 363.0], [534.0, 228.75], [572.0, 199.0], [560.0, 191.0], [562.0, 194.0], [564.0, 268.0], [574.0, 223.66666666666666], [570.0, 416.25], [568.0, 270.3333333333333], [544.0, 275.8], [546.0, 189.5], [550.0, 223.33333333333334], [558.0, 231.0], [556.0, 340.0], [552.0, 238.5], [566.0, 196.0], [604.0, 294.0], [606.0, 322.6666666666667], [592.0, 294.3333333333333], [594.0, 324.5], [596.0, 320.25], [602.0, 397.6], [600.0, 268.83333333333337], [582.0, 423.0], [580.0, 217.5], [578.0, 262.15], [576.0, 262.75], [590.0, 349.5], [588.0, 380.25], [586.0, 226.66666666666666], [584.0, 195.5], [598.0, 206.0], [636.0, 307.5], [638.0, 385.4], [624.0, 210.0], [628.0, 471.5], [634.0, 291.1666666666667], [632.0, 332.2857142857143], [614.0, 314.0], [612.0, 291.6666666666667], [610.0, 328.0], [622.0, 259.0], [620.0, 213.0], [618.0, 398.0], [616.0, 215.66666666666666], [630.0, 214.0], [668.0, 324.0], [664.0, 261.3333333333333], [658.0, 304.75000000000006], [656.0, 361.0], [660.0, 349.2], [670.0, 265.6666666666667], [666.0, 233.25], [640.0, 220.0], [642.0, 249.0], [644.0, 220.0], [646.0, 221.0], [654.0, 363.5], [652.0, 268.6363636363636], [650.0, 344.0], [648.0, 282.6666666666667], [662.0, 325.0], [698.0, 288.22222222222223], [702.0, 257.4], [688.0, 251.6], [690.0, 316.5], [692.0, 283.125], [700.0, 285.0], [696.0, 247.63636363636365], [678.0, 322.0], [676.0, 258.375], [674.0, 358.3333333333333], [672.0, 593.3333333333334], [686.0, 345.2307692307692], [684.0, 336.75], [680.0, 365.0], [694.0, 236.0], [732.0, 373.85714285714283], [720.0, 253.0], [722.0, 252.0], [724.0, 292.09090909090907], [734.0, 488.5], [730.0, 309.53846153846155], [728.0, 251.0], [704.0, 247.66666666666666], [706.0, 273.2], [708.0, 332.0], [710.0, 307.06666666666666], [718.0, 346.25], [716.0, 252.0], [714.0, 334.8275862068965], [712.0, 358.0], [726.0, 464.99999999999994], [764.0, 329.0], [752.0, 289.8], [754.0, 327.6666666666667], [756.0, 313.2], [766.0, 283.0], [762.0, 346.57142857142856], [760.0, 316.6], [750.0, 410.2], [736.0, 361.0], [738.0, 329.5], [740.0, 297.33333333333337], [742.0, 304.90909090909093], [748.0, 266.0], [746.0, 265.0], [744.0, 460.75], [758.0, 267.0], [794.0, 254.0], [798.0, 304.88], [784.0, 327.3333333333333], [786.0, 309.9047619047618], [768.0, 274.25], [770.0, 279.875], [772.0, 478.0], [774.0, 326.57142857142856], [782.0, 270.3333333333333], [780.0, 267.75], [778.0, 322.0], [776.0, 296.6], [790.0, 304.2727272727273], [788.0, 311.22222222222223], [828.0, 307.0], [830.0, 282.55555555555554], [816.0, 272.0], [818.0, 349.3333333333333], [820.0, 346.0], [826.0, 385.75], [824.0, 314.7333333333333], [806.0, 281.2], [804.0, 311.0], [802.0, 318.3333333333333], [814.0, 329.0], [812.0, 300.56], [810.0, 324.625], [808.0, 269.5], [822.0, 235.16666666666666], [858.0, 324.625], [856.0, 340.0], [862.0, 310.0], [848.0, 349.2857142857143], [850.0, 255.0], [860.0, 329.3333333333333], [832.0, 233.0], [836.0, 311.59999999999997], [838.0, 241.0], [846.0, 340.0], [842.0, 333.5], [840.0, 269.6666666666667], [854.0, 260.3333333333333], [852.0, 342.0], [892.0, 377.25], [880.0, 378.1818181818181], [882.0, 359.0], [884.0, 446.90909090909093], [894.0, 347.4], [890.0, 364.2], [888.0, 369.45714285714286], [870.0, 324.3333333333333], [878.0, 376.09999999999997], [876.0, 349.1666666666667], [874.0, 341.3888888888889], [872.0, 379.3333333333333], [886.0, 391.4], [924.0, 335.31250000000006], [912.0, 335.7627118644067], [914.0, 335.45454545454544], [916.0, 363.85294117647055], [926.0, 387.0], [922.0, 328.5], [920.0, 295.0], [896.0, 480.1904761904762], [898.0, 391.625], [900.0, 403.8461538461538], [902.0, 374.4], [910.0, 321.67391304347825], [908.0, 456.8333333333333], [906.0, 395.64285714285717], [904.0, 426.5], [918.0, 336.6666666666667], [956.0, 334.4200000000001], [944.0, 333.0], [946.0, 354.7368421052631], [948.0, 352.14285714285717], [958.0, 298.0], [954.0, 375.5714285714286], [952.0, 352.86111111111114], [928.0, 383.29999999999995], [930.0, 371.40000000000003], [932.0, 387.1111111111113], [934.0, 453.69230769230774], [942.0, 344.09090909090907], [940.0, 335.3333333333333], [938.0, 360.45454545454544], [936.0, 354.6666666666667], [950.0, 335.3333333333333], [988.0, 342.15384615384613], [976.0, 310.55], [978.0, 290.6212121212122], [980.0, 287.8620689655172], [990.0, 295.09615384615387], [986.0, 334.08888888888896], [984.0, 324.42857142857144], [960.0, 391.75], [962.0, 403.92307692307696], [964.0, 404.02205882352956], [966.0, 317.55555555555554], [974.0, 290.90476190476187], [972.0, 325.65], [970.0, 338.3461538461539], [968.0, 335.26923076923083], [982.0, 321.02941176470597], [1016.0, 438.6363636363636], [1020.0, 618.0], [1022.0, 480.0], [1010.0, 656.25], [998.0, 330.46323529411757], [996.0, 332.5409836065574], [994.0, 345.79729729729723], [992.0, 309.90909090909093], [1006.0, 514.0], [1004.0, 643.1538461538461], [1002.0, 524.6785714285716], [1000.0, 402.1386168299016], [1014.0, 757.2], [1012.0, 620.6666666666667], [1032.0, 546.75], [1056.0, 446.85714285714283], [1084.0, 569.5], [1076.0, 581.7142857142857], [1024.0, 440.0], [1052.0, 501.0769230769231], [1048.0, 458.5], [1040.0, 504.5], [1136.0, 513.3], [1100.0, 112.0], [1144.0, 683.5], [1148.0, 604.0], [1124.0, 595.2], [1140.0, 604.8], [1092.0, 604.25], [1088.0, 688.3333333333334], [1116.0, 544.5555555555555], [1108.0, 545.4285714285714], [1104.0, 612.0], [1200.0, 422.5], [1192.0, 415.0], [1160.0, 433.0], [1152.0, 459.4347826086957], [1180.0, 488.0], [1172.0, 416.0], [1168.0, 453.5], [1228.0, 723.8333333333333], [1248.0, 593.6249999999999], [1252.0, 710.0], [1264.0, 359.33333333333337], [1220.0, 435.2857142857143], [1216.0, 585.3571428571429], [1240.0, 564.25], [1236.0, 613.0], [1232.0, 467.8], [1332.0, 660.75], [1336.0, 519.0], [1316.0, 500.0], [1320.0, 637.625], [1324.0, 635.6249999999999], [1292.0, 876.0], [1304.0, 555.2222222222222], [1300.0, 567.0], [1296.0, 612.0], [1400.0, 705.8888888888888], [1376.0, 599.6666666666667], [1380.0, 786.0], [1384.0, 867.0], [1388.0, 597.0], [1404.0, 528.0], [1396.0, 684.0], [1356.0, 562.3333333333334], [1352.0, 522.0], [1348.0, 615.8571428571428], [1372.0, 517.0], [1368.0, 608.6666666666666], [1364.0, 522.0], [1456.0, 659.6], [1420.0, 562.5454545454545], [1416.0, 536.0], [1412.0, 571.75], [1408.0, 574.0000000000001], [1432.0, 545.0], [1520.0, 823.0], [1484.0, 696.6666666666667], [1512.0, 740.25], [1528.0, 665.0], [1516.0, 714.0], [1524.0, 703.25], [1480.0, 685.5], [1476.0, 572.0], [1500.0, 575.0], [1492.0, 677.0], [1488.0, 749.25], [1548.0, 714.2857142857142], [1592.0, 542.0], [1596.0, 607.0], [1568.0, 608.2857142857142], [1572.0, 641.625], [1576.0, 640.7500000000001], [1544.0, 620.7999999999998], [1540.0, 615.0], [1556.0, 572.5], [1552.0, 620.5], [1652.0, 537.4705882352941], [1656.0, 479.0], [1648.0, 687.9000000000001], [1600.0, 530.0], [1604.0, 528.0], [1608.0, 521.0], [1612.0, 645.7777777777778], [1620.0, 649.3333333333334], [1720.0, 482.3333333333333], [1704.0, 491.3333333333333], [1708.0, 530.0], [1724.0, 602.0], [1668.0, 546.0], [1672.0, 547.1428571428572], [1676.0, 546.0], [1692.0, 466.0], [1688.0, 440.5], [1684.0, 527.3333333333334], [1680.0, 525.3333333333334], [1788.0, 458.0], [1760.0, 567.75], [1764.0, 434.5], [1772.0, 498.25], [1780.0, 428.0], [1740.0, 409.0], [1736.0, 507.0], [1756.0, 395.0], [1752.0, 521.0], [1848.0, 467.6086956521739], [1852.0, 426.0], [1824.0, 421.8], [1828.0, 398.14285714285717], [1832.0, 487.5], [1836.0, 444.18181818181824], [1844.0, 447.3333333333333], [1840.0, 454.1111111111111], [1804.0, 502.6], [1800.0, 417.6666666666667], [1796.0, 318.125], [1792.0, 459.625], [1816.0, 393.6], [1812.0, 483.5], [1808.0, 401.75], [1912.0, 526.6666666666666], [1896.0, 377.0], [1892.0, 443.5], [1900.0, 520.3333333333334], [1908.0, 467.59999999999997], [1868.0, 423.61538461538464], [1864.0, 365.0], [1884.0, 429.0], [1880.0, 424.25], [1876.0, 497.85714285714283], [1872.0, 450.9], [1968.0, 541.7], [1976.0, 524.272727272727], [1940.0, 631.0], [1936.0, 579.3461538461538], [1944.0, 547.470588235294], [1948.0, 597.0625000000001], [1956.0, 610.0], [1960.0, 541.0], [1964.0, 556.3750000000001], [1980.0, 524.6190476190476], [1972.0, 549.25], [1924.0, 564.8333333333333], [1928.0, 576.0731707317076], [1932.0, 769.0], [1992.0, 465.37301587301573], [1996.0, 506.65384615384613], [2000.0, 663.8002226522044], [1984.0, 499.14999999999986], [1988.0, 457.70000000000005], [1077.0, 582.548387096774], [1057.0, 445.00000000000006], [1061.0, 558.75], [1065.0, 538.1111111111111], [1069.0, 394.57142857142856], [1081.0, 486.0], [1073.0, 633.8], [1025.0, 515.0], [1029.0, 488.0], [1033.0, 500.38888888888886], [1037.0, 527.0], [1053.0, 434.0], [1049.0, 566.5], [1045.0, 456.4], [1041.0, 468.0833333333333], [1097.0, 763.0], [1129.0, 434.0], [1149.0, 632.5], [1145.0, 551.0], [1093.0, 441.0], [1089.0, 644.0], [1113.0, 559.2], [1109.0, 497.0], [1105.0, 441.0], [1209.0, 534.5416666666666], [1189.0, 464.4], [1205.0, 577.8750000000001], [1161.0, 543.0], [1181.0, 400.75], [1173.0, 540.1111111111111], [1169.0, 451.75], [1197.0, 567.5999999999999], [1253.0, 598.25], [1249.0, 430.0], [1261.0, 723.0], [1269.0, 580.6], [1265.0, 732.75], [1237.0, 518.0], [1233.0, 686.0], [1317.0, 954.0], [1341.0, 899.3333333333334], [1321.0, 781.5], [1337.0, 744.75], [1293.0, 599.0], [1301.0, 561.4285714285714], [1297.0, 612.75], [1325.0, 641.0], [1397.0, 525.0], [1377.0, 732.0], [1381.0, 563.6666666666666], [1385.0, 517.0], [1389.0, 533.5714285714286], [1405.0, 4.0], [1393.0, 580.2857142857143], [1357.0, 669.0], [1349.0, 596.5000000000001], [1373.0, 854.5], [1369.0, 661.0], [1365.0, 598.0], [1465.0, 569.0], [1441.0, 694.0], [1449.0, 654.0], [1445.0, 685.5], [1469.0, 673.0], [1461.0, 801.0], [1457.0, 918.0], [1417.0, 569.3333333333334], [1413.0, 596.0], [1433.0, 709.0], [1425.0, 632.3333333333334], [1509.0, 571.0], [1533.0, 662.1428571428572], [1513.0, 646.4999999999999], [1517.0, 694.3333333333334], [1521.0, 645.0], [1485.0, 575.0], [1477.0, 700.0], [1473.0, 613.25], [1585.0, 603.0], [1569.0, 639.8888888888889], [1581.0, 620.4285714285714], [1589.0, 615.4285714285714], [1541.0, 637.1428571428572], [1561.0, 608.75], [1557.0, 730.3333333333334], [1553.0, 600.3333333333334], [1661.0, 642.0], [1657.0, 477.0], [1633.0, 546.5], [1637.0, 469.40000000000003], [1641.0, 500.0], [1645.0, 458.66666666666674], [1601.0, 538.6666666666667], [1605.0, 573.8], [1621.0, 1000.0], [1713.0, 494.0], [1717.0, 452.0], [1721.0, 602.9999999999999], [1709.0, 535.1111111111112], [1669.0, 589.5], [1673.0, 636.0], [1677.0, 521.7199999999999], [1693.0, 466.0], [1685.0, 472.0], [1681.0, 525.6666666666666], [1789.0, 458.6666666666667], [1761.0, 380.0], [1769.0, 485.42857142857144], [1773.0, 468.5], [1741.0, 462.0], [1737.0, 506.0], [1733.0, 480.2777777777778], [1729.0, 597.0], [1757.0, 395.0], [1749.0, 408.0], [1849.0, 449.5], [1825.0, 495.0], [1829.0, 363.0], [1837.0, 290.25], [1853.0, 364.0], [1845.0, 445.0], [1841.0, 419.9166666666667], [1805.0, 436.2173913043478], [1801.0, 392.6666666666667], [1793.0, 194.0], [1821.0, 422.0], [1817.0, 439.3333333333333], [1809.0, 363.4], [1909.0, 521.7777777777778], [1889.0, 418.8888888888889], [1893.0, 477.25], [1897.0, 504.53846153846155], [1901.0, 453.5], [1905.0, 388.0], [1869.0, 492.7142857142857], [1865.0, 922.0], [1861.0, 414.53846153846155], [1857.0, 461.09999999999997], [1885.0, 453.4], [1881.0, 433.14285714285717], [1873.0, 607.0], [1949.0, 718.7777777777778], [1977.0, 532.1794871794873], [1941.0, 616.1842105263158], [1937.0, 515.6000000000001], [1945.0, 623.6774193548389], [1953.0, 578.8], [1957.0, 557.9999999999999], [1961.0, 585.7500000000001], [1965.0, 617.5], [1981.0, 523.3448275862066], [1973.0, 617.1999999999999], [1969.0, 572.3], [1921.0, 520.7777777777778], [1925.0, 562.6481481481484], [1929.0, 544.2941176470588], [1933.0, 579.3636363636363], [1997.0, 512.1530612244898], [1985.0, 450.6271186440677], [1993.0, 461.4324324324324], [1989.0, 444.8500000000001], [537.0, 155.0], [541.0, 227.22222222222223], [529.0, 343.57142857142856], [531.0, 557.0], [533.0, 264.2222222222222], [539.0, 187.5], [519.0, 302.4], [517.0, 398.4], [515.0, 245.6], [513.0, 171.0], [527.0, 569.5], [525.0, 337.25], [523.0, 395.33333333333337], [521.0, 360.2857142857143], [535.0, 364.0], [573.0, 193.0], [575.0, 196.0], [561.0, 233.75], [563.0, 232.99999999999997], [565.0, 225.0], [571.0, 286.0], [569.0, 236.66666666666666], [559.0, 186.0], [545.0, 348.25], [547.0, 191.5], [557.0, 283.0], [555.0, 225.5], [553.0, 312.6666666666667], [567.0, 557.5], [601.0, 422.25], [607.0, 261.5], [595.0, 306.6], [597.0, 206.0], [603.0, 288.0], [583.0, 610.0], [581.0, 272.71428571428567], [579.0, 239.5], [591.0, 277.375], [589.0, 228.0], [585.0, 330.5], [599.0, 205.0], [633.0, 337.25], [639.0, 308.0833333333333], [627.0, 240.25], [625.0, 248.0], [629.0, 216.5], [637.0, 305.3333333333333], [615.0, 264.75], [613.0, 208.0], [611.0, 204.0], [609.0, 320.5], [623.0, 213.5], [621.0, 208.0], [619.0, 363.3333333333333], [617.0, 353.3333333333333], [631.0, 252.57142857142858], [667.0, 176.25], [671.0, 294.0], [659.0, 362.0], [669.0, 278.5], [665.0, 231.0], [655.0, 298.6], [641.0, 402.14285714285717], [643.0, 220.0], [645.0, 358.3333333333333], [647.0, 266.0], [653.0, 222.5], [651.0, 335.25], [649.0, 330.0], [661.0, 423.6], [701.0, 274.6666666666667], [703.0, 247.0], [689.0, 235.0], [693.0, 297.58333333333337], [699.0, 247.0], [679.0, 262.85714285714283], [677.0, 382.6666666666667], [675.0, 418.0], [673.0, 236.0], [685.0, 236.0], [683.0, 292.0], [681.0, 244.0], [695.0, 295.5], [733.0, 306.3333333333333], [735.0, 310.14285714285717], [721.0, 251.5], [723.0, 253.0], [725.0, 533.0], [731.0, 296.77777777777777], [729.0, 363.27777777777777], [719.0, 320.8666666666666], [705.0, 257.8333333333333], [709.0, 310.75], [711.0, 254.33333333333334], [717.0, 437.0], [715.0, 279.6666666666667], [713.0, 365.6], [727.0, 302.14285714285717], [765.0, 330.1818181818182], [767.0, 271.0], [753.0, 262.0], [755.0, 262.0], [757.0, 356.1111111111111], [763.0, 286.3333333333333], [761.0, 286.3333333333333], [737.0, 287.42857142857144], [739.0, 260.8888888888889], [743.0, 303.6190476190476], [749.0, 232.25], [747.0, 316.0], [745.0, 330.6666666666667], [759.0, 304.0], [795.0, 297.1818181818182], [793.0, 292.72727272727275], [799.0, 305.5], [785.0, 321.2857142857143], [797.0, 320.7692307692308], [783.0, 325.8461538461538], [771.0, 345.3333333333333], [773.0, 294.25], [775.0, 284.11111111111114], [781.0, 300.5], [779.0, 291.15384615384613], [777.0, 320.0], [789.0, 358.42857142857144], [787.0, 281.75], [825.0, 232.0], [829.0, 252.4], [817.0, 283.1], [819.0, 352.8333333333333], [821.0, 372.3571428571429], [827.0, 320.6666666666667], [807.0, 309.6666666666667], [805.0, 290.3571428571429], [803.0, 238.0], [801.0, 272.8333333333333], [815.0, 241.0], [813.0, 236.33333333333334], [811.0, 235.0], [809.0, 288.85714285714283], [823.0, 357.1818181818182], [859.0, 315.0], [861.0, 260.0], [849.0, 321.25], [851.0, 315.18749999999994], [847.0, 338.5], [833.0, 322.6666666666667], [839.0, 236.5], [845.0, 313.7777777777778], [843.0, 284.1818181818182], [841.0, 240.0], [855.0, 311.52941176470586], [853.0, 326.7368421052632], [893.0, 342.3437500000001], [895.0, 367.8636363636364], [881.0, 359.0], [883.0, 361.2222222222223], [885.0, 412.5], [891.0, 382.0], [889.0, 382.0], [879.0, 401.0], [865.0, 318.65], [869.0, 336.7931034482759], [867.0, 284.2], [871.0, 372.25], [877.0, 407.5238095238095], [875.0, 327.0], [873.0, 350.5], [887.0, 386.2], [925.0, 365.6296296296297], [927.0, 354.625], [913.0, 345.0], [915.0, 394.75], [917.0, 347.3333333333333], [923.0, 344.79999999999995], [921.0, 400.58333333333326], [911.0, 328.9], [897.0, 466.25], [899.0, 364.8], [901.0, 434.3714285714285], [903.0, 457.5], [909.0, 541.0], [907.0, 428.00000000000006], [905.0, 419.625], [919.0, 296.6], [957.0, 370.73033707865164], [959.0, 412.8285714285714], [945.0, 348.5882352941176], [947.0, 364.32352941176464], [949.0, 332.0], [955.0, 315.1666666666667], [953.0, 340.5], [943.0, 311.1666666666667], [929.0, 355.4666666666667], [931.0, 288.0], [933.0, 444.5], [935.0, 402.5263157894736], [941.0, 322.3333333333333], [937.0, 342.69230769230774], [951.0, 333.25], [989.0, 315.5084745762711], [991.0, 311.0909090909091], [977.0, 297.1111111111111], [979.0, 271.0192307692308], [981.0, 297.26190476190476], [987.0, 323.33333333333337], [985.0, 337.49122807017557], [975.0, 292.125], [961.0, 391.25], [963.0, 401.6], [965.0, 341.596153846154], [967.0, 414.0], [973.0, 315.32000000000016], [971.0, 277.0], [969.0, 288.5], [983.0, 330.9444444444445], [1021.0, 520.4285714285714], [1011.0, 628.75], [1023.0, 516.0], [1009.0, 634.4615384615386], [999.0, 304.1138211382114], [997.0, 325.57250470809805], [995.0, 303.4560439560439], [993.0, 315.81428571428586], [1007.0, 573.75], [1005.0, 585.25], [1003.0, 604.3333333333334], [1001.0, 473.1599999999999], [1015.0, 499.2], [1082.0, 486.5], [1086.0, 542.4], [1058.0, 499.3333333333333], [1062.0, 595.5], [1066.0, 426.0], [1070.0, 469.57142857142856], [1078.0, 562.5], [1026.0, 463.6666666666667], [1034.0, 476.5], [1038.0, 490.2857142857143], [1054.0, 490.00000000000006], [1050.0, 813.5], [1142.0, 769.6666666666666], [1122.0, 411.29999999999995], [1150.0, 627.3333333333333], [1146.0, 582.0], [1098.0, 691.6666666666666], [1090.0, 544.75], [1118.0, 495.0], [1110.0, 815.0], [1106.0, 482.6], [1202.0, 594.5000000000001], [1206.0, 813.0], [1186.0, 593.5], [1190.0, 544.0], [1194.0, 544.5555555555555], [1162.0, 290.33333333333337], [1154.0, 571.9411764705883], [1178.0, 418.77777777777777], [1174.0, 547.0], [1170.0, 544.5], [1198.0, 529.6666666666666], [1270.0, 538.0], [1250.0, 461.0], [1254.0, 685.6666666666666], [1278.0, 692.8571428571428], [1266.0, 726.0], [1230.0, 460.16666666666663], [1226.0, 657.1111111111111], [1222.0, 460.8], [1246.0, 534.1], [1242.0, 587.0], [1334.0, 774.5], [1318.0, 635.0], [1282.0, 629.0], [1290.0, 590.0], [1310.0, 739.5], [1298.0, 616.3333333333334], [1326.0, 552.75], [1394.0, 622.2500000000001], [1406.0, 715.3333333333334], [1378.0, 597.1666666666666], [1382.0, 519.0], [1386.0, 517.0], [1390.0, 865.0], [1358.0, 522.0], [1354.0, 522.0], [1350.0, 556.0], [1346.0, 525.0], [1362.0, 521.0], [1462.0, 624.0], [1450.0, 680.0], [1454.0, 778.5], [1470.0, 625.5], [1418.0, 550.8571428571428], [1414.0, 686.0], [1410.0, 532.5], [1434.0, 514.1666666666666], [1426.0, 556.6666666666666], [1526.0, 690.3333333333334], [1514.0, 622.5], [1518.0, 562.7777777777778], [1530.0, 687.0], [1478.0, 576.0], [1474.0, 615.5], [1502.0, 679.2857142857143], [1498.0, 577.0], [1494.0, 676.0], [1490.0, 697.0], [1586.0, 630.3], [1578.0, 681.3333333333334], [1594.0, 580.0], [1590.0, 693.0], [1550.0, 577.0], [1546.0, 591.0], [1566.0, 734.0], [1562.0, 4.0], [1558.0, 629.25], [1554.0, 728.0], [1634.0, 612.0], [1638.0, 557.4], [1658.0, 558.5], [1606.0, 592.625], [1614.0, 517.0], [1630.0, 509.0], [1626.0, 599.5555555555555], [1646.0, 455.6], [1714.0, 453.0], [1718.0, 486.5], [1698.0, 525.25], [1702.0, 587.1666666666667], [1706.0, 465.3333333333333], [1710.0, 566.6666666666666], [1694.0, 499.0], [1666.0, 487.25], [1678.0, 540.3750000000001], [1690.0, 550.0], [1686.0, 593.3333333333334], [1782.0, 392.2], [1786.0, 430.83333333333337], [1790.0, 488.8], [1762.0, 491.4], [1770.0, 550.2222222222222], [1774.0, 387.0], [1778.0, 464.0], [1738.0, 473.72727272727275], [1734.0, 548.0], [1730.0, 463.3], [1758.0, 394.0], [1754.0, 323.0], [1750.0, 486.3333333333333], [1746.0, 567.0], [1854.0, 453.66666666666663], [1826.0, 446.2666666666667], [1830.0, 440.0], [1838.0, 423.75], [1850.0, 456.0], [1846.0, 406.0], [1842.0, 405.5], [1806.0, 456.6666666666667], [1802.0, 432.57142857142856], [1798.0, 449.125], [1794.0, 511.79999999999995], [1822.0, 400.0], [1818.0, 434.56], [1814.0, 532.4285714285714], [1810.0, 419.5], [1910.0, 483.0], [1906.0, 573.0], [1914.0, 524.25], [1890.0, 462.0], [1894.0, 486.45454545454544], [1898.0, 493.0], [1902.0, 450.40000000000003], [1870.0, 446.3333333333333], [1866.0, 458.0], [1862.0, 468.42857142857144], [1886.0, 461.6], [1882.0, 452.75], [1878.0, 415.57142857142856], [1874.0, 538.0], [1950.0, 890.0], [1942.0, 562.157894736842], [1938.0, 566.0], [1946.0, 608.0681818181818], [1954.0, 513.5], [1958.0, 520.421052631579], [1962.0, 604.8666666666666], [1966.0, 626.0], [1982.0, 398.7], [1978.0, 507.2], [1974.0, 603.4166666666666], [1970.0, 545.4], [1922.0, 556.0], [1926.0, 599.7619047619048], [1930.0, 575.3157894736842], [1934.0, 507.0], [1998.0, 509.1294642857141], [1994.0, 504.2656250000001], [1990.0, 479.03846153846155], [1986.0, 471.4234234234234], [1079.0, 537.6666666666666], [1083.0, 914.0], [1087.0, 915.0], [1071.0, 640.4], [1075.0, 449.5], [1055.0, 812.5], [1027.0, 440.0], [1035.0, 592.8333333333333], [1047.0, 504.0], [1143.0, 680.0], [1139.0, 657.75], [1151.0, 726.5], [1131.0, 453.22222222222223], [1147.0, 545.6666666666666], [1103.0, 717.3333333333333], [1099.0, 615.0], [1119.0, 750.4285714285714], [1107.0, 459.52941176470586], [1203.0, 423.0], [1211.0, 569.75], [1187.0, 544.25], [1191.0, 413.0], [1195.0, 500.4444444444444], [1167.0, 541.0], [1163.0, 333.8], [1155.0, 403.25], [1171.0, 444.6666666666667], [1275.0, 516.6666666666666], [1279.0, 480.75], [1251.0, 461.0], [1255.0, 624.4], [1263.0, 594.5], [1267.0, 717.0], [1231.0, 578.4285714285714], [1227.0, 438.0], [1223.0, 592.2], [1219.0, 583.1666666666667], [1247.0, 459.0], [1235.0, 311.5], [1331.0, 623.0], [1343.0, 601.4374999999999], [1315.0, 564.6666666666667], [1335.0, 777.0], [1311.0, 502.0], [1287.0, 589.7], [1283.0, 733.0], [1291.0, 618.5], [1307.0, 763.0], [1299.0, 642.2], [1399.0, 524.0], [1383.0, 517.0], [1379.0, 521.0], [1387.0, 651.6666666666666], [1359.0, 522.0], [1355.0, 657.75], [1351.0, 659.0], [1347.0, 544.4], [1375.0, 595.0], [1371.0, 568.6666666666666], [1367.0, 790.5], [1443.0, 569.0], [1471.0, 702.5], [1451.0, 679.0], [1455.0, 697.4], [1463.0, 721.25], [1431.0, 677.8], [1527.0, 740.0], [1535.0, 822.0], [1507.0, 586.2857142857143], [1511.0, 662.0], [1515.0, 697.2222222222222], [1519.0, 640.5], [1479.0, 526.0], [1503.0, 674.0], [1499.0, 913.0], [1495.0, 693.3333333333334], [1491.0, 754.5], [1591.0, 624.3333333333334], [1595.0, 609.0], [1571.0, 634.7777777777778], [1579.0, 709.25], [1551.0, 591.6], [1543.0, 434.0], [1539.0, 679.8888888888889], [1567.0, 600.0], [1559.0, 729.0], [1555.0, 634.5], [1635.0, 575.6666666666666], [1643.0, 497.0], [1659.0, 582.8333333333333], [1655.0, 568.0625], [1631.0, 544.4285714285714], [1627.0, 540.5], [1619.0, 774.1666666666666], [1647.0, 611.25], [1723.0, 453.4], [1703.0, 548.0], [1727.0, 419.8], [1699.0, 544.0], [1707.0, 485.0], [1711.0, 537.0], [1719.0, 524.0], [1667.0, 591.0], [1671.0, 464.5], [1675.0, 590.0], [1679.0, 544.3], [1691.0, 466.66666666666663], [1687.0, 584.6], [1783.0, 394.6], [1763.0, 434.45454545454544], [1767.0, 475.0], [1771.0, 520.0], [1775.0, 377.55555555555554], [1779.0, 419.5], [1759.0, 517.75], [1751.0, 521.0], [1747.0, 489.5], [1855.0, 426.7083333333333], [1843.0, 540.0], [1827.0, 444.0], [1831.0, 421.6666666666667], [1835.0, 532.8], [1839.0, 474.3333333333333], [1847.0, 449.76923076923083], [1807.0, 404.5], [1803.0, 423.7647058823529], [1823.0, 498.0], [1819.0, 421.625], [1815.0, 401.17647058823525], [1811.0, 471.7142857142857], [1907.0, 387.5], [1891.0, 464.0], [1899.0, 520.5], [1903.0, 488.8], [1911.0, 396.0], [1871.0, 452.45454545454544], [1867.0, 403.85714285714283], [1863.0, 513.3749999999998], [1883.0, 441.75], [1879.0, 490.0], [1875.0, 487.6666666666667], [1975.0, 586.8888888888889], [1943.0, 720.2727272727273], [1939.0, 509.4], [1947.0, 602.5384615384614], [1983.0, 558.7058823529412], [1955.0, 553.4285714285714], [1959.0, 547.75], [1967.0, 551.7777777777778], [1979.0, 510.875], [1971.0, 622.0000000000001], [1951.0, 584.6], [1923.0, 523.0], [1931.0, 576.8095238095237], [1935.0, 550.0], [1999.0, 559.6831302116746], [1995.0, 469.15], [1987.0, 430.1428571428571], [1.0, 2.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1793.152180000004, 601.9881900000023]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 177127.25, "minX": 1.6667043E12, "maxY": 1012896.9666666667, "series": [{"data": [[1.6667043E12, 724974.9166666666], [1.66670436E12, 1012896.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6667043E12, 177127.25], [1.66670436E12, 247855.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 524.309041650231, "minX": 1.6667043E12, "maxY": 710.6748878385804, "series": [{"data": [[1.6667043E12, 710.6748878385804], [1.66670436E12, 524.309041650231]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 524.2667741216343, "minX": 1.6667043E12, "maxY": 710.6186991674874, "series": [{"data": [[1.6667043E12, 710.6186991674874], [1.66670436E12, 524.2667741216343]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.002932149042336117, "minX": 1.6667043E12, "maxY": 0.2319042249466219, "series": [{"data": [[1.6667043E12, 0.2319042249466219], [1.66670436E12, 0.002932149042336117]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6667043E12, "maxY": 2873.0, "series": [{"data": [[1.6667043E12, 2873.0], [1.66670436E12, 2358.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6667043E12, 915.0], [1.66670436E12, 623.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6667043E12, 1311.0], [1.66670436E12, 1035.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6667043E12, 1039.0], [1.66670436E12, 771.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6667043E12, 2.0], [1.66670436E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6667043E12, 578.0], [1.66670436E12, 327.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.5, "minX": 4.0, "maxY": 1679.0, "series": [{"data": [[583.0, 659.0], [778.0, 1093.0], [820.0, 661.5], [844.0, 1679.0], [858.0, 987.5], [891.0, 1108.0], [1005.0, 950.0], [1029.0, 1010.0], [1112.0, 1324.5], [1123.0, 569.0], [1238.0, 509.5], [1310.0, 547.0], [1391.0, 1236.0], [1393.0, 592.0], [1374.0, 1063.0], [1471.0, 662.0], [1431.0, 725.0], [1460.0, 443.0], [1511.0, 643.0], [1517.0, 564.0], [1508.0, 686.0], [1473.0, 628.0], [1547.0, 717.0], [1540.0, 881.0], [1639.0, 613.0], [1694.0, 516.5], [1719.0, 552.0], [1672.0, 542.5], [1715.0, 826.0], [1676.0, 559.0], [1745.0, 557.0], [1741.0, 642.5], [1758.0, 539.0], [1738.0, 534.0], [1750.0, 543.0], [1828.0, 523.5], [1912.0, 572.0], [1899.0, 466.0], [1868.0, 515.0], [1979.0, 482.0], [1954.0, 515.0], [2011.0, 519.0], [1990.0, 465.0], [1986.0, 494.0], [2008.0, 515.0], [2138.0, 450.0], [2139.0, 496.0], [2167.0, 445.0], [2124.0, 464.0], [2289.0, 445.0], [2248.0, 451.0], [2381.0, 462.0], [2502.0, 232.0], [2659.0, 343.0], [2785.0, 329.0], [3159.0, 303.0], [3114.0, 316.0], [80.0, 1053.0], [495.0, 1634.0], [486.0, 1659.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 22.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3159.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 1678.5, "series": [{"data": [[583.0, 659.0], [778.0, 1093.0], [820.0, 661.5], [844.0, 1678.5], [858.0, 987.5], [891.0, 1108.0], [1005.0, 950.0], [1029.0, 1010.0], [1112.0, 1324.0], [1123.0, 569.0], [1238.0, 509.5], [1310.0, 547.0], [1391.0, 1236.0], [1393.0, 591.0], [1374.0, 1063.0], [1471.0, 662.0], [1431.0, 725.0], [1460.0, 443.0], [1511.0, 643.0], [1517.0, 564.0], [1508.0, 686.0], [1473.0, 628.0], [1547.0, 717.0], [1540.0, 881.0], [1639.0, 613.0], [1694.0, 516.0], [1719.0, 552.0], [1672.0, 542.5], [1715.0, 826.0], [1676.0, 559.0], [1745.0, 557.0], [1741.0, 642.5], [1758.0, 539.0], [1738.0, 534.0], [1750.0, 543.0], [1828.0, 523.5], [1912.0, 572.0], [1899.0, 466.0], [1868.0, 515.0], [1979.0, 482.0], [1954.0, 515.0], [2011.0, 519.0], [1990.0, 465.0], [1986.0, 494.0], [2008.0, 515.0], [2138.0, 450.0], [2139.0, 496.0], [2167.0, 445.0], [2124.0, 464.0], [2289.0, 445.0], [2248.0, 451.0], [2381.0, 462.0], [2502.0, 232.0], [2659.0, 342.0], [2785.0, 329.0], [3159.0, 303.0], [3114.0, 316.0], [80.0, 1053.0], [495.0, 1634.0], [486.0, 1658.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3159.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 711.35, "minX": 1.6667043E12, "maxY": 955.3166666666667, "series": [{"data": [[1.6667043E12, 711.35], [1.66670436E12, 955.3166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6667043E12, "maxY": 971.9833333333333, "series": [{"data": [[1.6667043E12, 694.6166666666667], [1.66670436E12, 971.9833333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6667043E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670436E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6667043E12, "maxY": 971.9833333333333, "series": [{"data": [[1.6667043E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6667043E12, 694.6166666666667], [1.66670436E12, 971.9833333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6667043E12, "maxY": 971.9833333333333, "series": [{"data": [[1.6667043E12, 694.6166666666667], [1.66670436E12, 971.9833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6667043E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670436E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

