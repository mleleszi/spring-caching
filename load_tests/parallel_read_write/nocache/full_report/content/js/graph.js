/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3362.0, "series": [{"data": [[0.0, 1.0], [0.1, 3.0], [0.2, 4.0], [0.3, 6.0], [0.4, 10.0], [0.5, 46.0], [0.6, 78.0], [0.7, 111.0], [0.8, 140.0], [0.9, 167.0], [1.0, 212.0], [1.1, 259.0], [1.2, 287.0], [1.3, 319.0], [1.4, 362.0], [1.5, 409.0], [1.6, 441.0], [1.7, 471.0], [1.8, 486.0], [1.9, 493.0], [2.0, 501.0], [2.1, 519.0], [2.2, 533.0], [2.3, 539.0], [2.4, 543.0], [2.5, 546.0], [2.6, 547.0], [2.7, 550.0], [2.8, 552.0], [2.9, 553.0], [3.0, 554.0], [3.1, 556.0], [3.2, 558.0], [3.3, 559.0], [3.4, 561.0], [3.5, 562.0], [3.6, 563.0], [3.7, 564.0], [3.8, 565.0], [3.9, 566.0], [4.0, 567.0], [4.1, 568.0], [4.2, 569.0], [4.3, 570.0], [4.4, 570.0], [4.5, 571.0], [4.6, 571.0], [4.7, 572.0], [4.8, 573.0], [4.9, 573.0], [5.0, 574.0], [5.1, 574.0], [5.2, 575.0], [5.3, 576.0], [5.4, 577.0], [5.5, 578.0], [5.6, 578.0], [5.7, 579.0], [5.8, 580.0], [5.9, 581.0], [6.0, 582.0], [6.1, 582.0], [6.2, 583.0], [6.3, 583.0], [6.4, 584.0], [6.5, 584.0], [6.6, 585.0], [6.7, 586.0], [6.8, 587.0], [6.9, 587.0], [7.0, 588.0], [7.1, 589.0], [7.2, 590.0], [7.3, 590.0], [7.4, 591.0], [7.5, 592.0], [7.6, 593.0], [7.7, 594.0], [7.8, 595.0], [7.9, 595.0], [8.0, 596.0], [8.1, 596.0], [8.2, 597.0], [8.3, 597.0], [8.4, 598.0], [8.5, 599.0], [8.6, 599.0], [8.7, 600.0], [8.8, 600.0], [8.9, 601.0], [9.0, 601.0], [9.1, 602.0], [9.2, 602.0], [9.3, 603.0], [9.4, 603.0], [9.5, 604.0], [9.6, 604.0], [9.7, 605.0], [9.8, 605.0], [9.9, 606.0], [10.0, 606.0], [10.1, 607.0], [10.2, 607.0], [10.3, 608.0], [10.4, 608.0], [10.5, 609.0], [10.6, 609.0], [10.7, 610.0], [10.8, 610.0], [10.9, 610.0], [11.0, 611.0], [11.1, 611.0], [11.2, 612.0], [11.3, 612.0], [11.4, 613.0], [11.5, 613.0], [11.6, 614.0], [11.7, 614.0], [11.8, 615.0], [11.9, 615.0], [12.0, 615.0], [12.1, 616.0], [12.2, 616.0], [12.3, 617.0], [12.4, 617.0], [12.5, 618.0], [12.6, 618.0], [12.7, 618.0], [12.8, 619.0], [12.9, 619.0], [13.0, 620.0], [13.1, 620.0], [13.2, 620.0], [13.3, 621.0], [13.4, 621.0], [13.5, 621.0], [13.6, 622.0], [13.7, 622.0], [13.8, 622.0], [13.9, 623.0], [14.0, 623.0], [14.1, 623.0], [14.2, 624.0], [14.3, 624.0], [14.4, 624.0], [14.5, 625.0], [14.6, 625.0], [14.7, 626.0], [14.8, 626.0], [14.9, 626.0], [15.0, 627.0], [15.1, 627.0], [15.2, 628.0], [15.3, 628.0], [15.4, 629.0], [15.5, 629.0], [15.6, 630.0], [15.7, 630.0], [15.8, 631.0], [15.9, 631.0], [16.0, 632.0], [16.1, 632.0], [16.2, 632.0], [16.3, 633.0], [16.4, 633.0], [16.5, 634.0], [16.6, 634.0], [16.7, 634.0], [16.8, 635.0], [16.9, 635.0], [17.0, 636.0], [17.1, 636.0], [17.2, 636.0], [17.3, 637.0], [17.4, 637.0], [17.5, 638.0], [17.6, 638.0], [17.7, 639.0], [17.8, 639.0], [17.9, 639.0], [18.0, 640.0], [18.1, 640.0], [18.2, 641.0], [18.3, 641.0], [18.4, 641.0], [18.5, 642.0], [18.6, 642.0], [18.7, 643.0], [18.8, 643.0], [18.9, 643.0], [19.0, 644.0], [19.1, 644.0], [19.2, 644.0], [19.3, 645.0], [19.4, 645.0], [19.5, 646.0], [19.6, 646.0], [19.7, 647.0], [19.8, 647.0], [19.9, 647.0], [20.0, 648.0], [20.1, 648.0], [20.2, 649.0], [20.3, 649.0], [20.4, 650.0], [20.5, 650.0], [20.6, 651.0], [20.7, 651.0], [20.8, 652.0], [20.9, 652.0], [21.0, 653.0], [21.1, 653.0], [21.2, 653.0], [21.3, 654.0], [21.4, 654.0], [21.5, 655.0], [21.6, 655.0], [21.7, 655.0], [21.8, 656.0], [21.9, 656.0], [22.0, 657.0], [22.1, 657.0], [22.2, 657.0], [22.3, 658.0], [22.4, 658.0], [22.5, 659.0], [22.6, 659.0], [22.7, 660.0], [22.8, 660.0], [22.9, 661.0], [23.0, 661.0], [23.1, 661.0], [23.2, 662.0], [23.3, 662.0], [23.4, 662.0], [23.5, 663.0], [23.6, 663.0], [23.7, 663.0], [23.8, 663.0], [23.9, 664.0], [24.0, 664.0], [24.1, 664.0], [24.2, 665.0], [24.3, 665.0], [24.4, 665.0], [24.5, 666.0], [24.6, 666.0], [24.7, 666.0], [24.8, 667.0], [24.9, 667.0], [25.0, 667.0], [25.1, 668.0], [25.2, 668.0], [25.3, 669.0], [25.4, 669.0], [25.5, 669.0], [25.6, 670.0], [25.7, 670.0], [25.8, 671.0], [25.9, 671.0], [26.0, 671.0], [26.1, 672.0], [26.2, 672.0], [26.3, 672.0], [26.4, 673.0], [26.5, 673.0], [26.6, 673.0], [26.7, 674.0], [26.8, 674.0], [26.9, 675.0], [27.0, 675.0], [27.1, 675.0], [27.2, 676.0], [27.3, 676.0], [27.4, 677.0], [27.5, 677.0], [27.6, 677.0], [27.7, 678.0], [27.8, 678.0], [27.9, 678.0], [28.0, 679.0], [28.1, 679.0], [28.2, 680.0], [28.3, 680.0], [28.4, 680.0], [28.5, 681.0], [28.6, 681.0], [28.7, 682.0], [28.8, 682.0], [28.9, 682.0], [29.0, 683.0], [29.1, 683.0], [29.2, 684.0], [29.3, 684.0], [29.4, 684.0], [29.5, 685.0], [29.6, 685.0], [29.7, 685.0], [29.8, 686.0], [29.9, 686.0], [30.0, 687.0], [30.1, 687.0], [30.2, 687.0], [30.3, 688.0], [30.4, 688.0], [30.5, 688.0], [30.6, 689.0], [30.7, 689.0], [30.8, 689.0], [30.9, 690.0], [31.0, 690.0], [31.1, 690.0], [31.2, 691.0], [31.3, 691.0], [31.4, 691.0], [31.5, 692.0], [31.6, 692.0], [31.7, 693.0], [31.8, 693.0], [31.9, 693.0], [32.0, 694.0], [32.1, 694.0], [32.2, 695.0], [32.3, 695.0], [32.4, 695.0], [32.5, 696.0], [32.6, 696.0], [32.7, 696.0], [32.8, 697.0], [32.9, 697.0], [33.0, 697.0], [33.1, 698.0], [33.2, 698.0], [33.3, 698.0], [33.4, 699.0], [33.5, 699.0], [33.6, 700.0], [33.7, 700.0], [33.8, 700.0], [33.9, 701.0], [34.0, 701.0], [34.1, 701.0], [34.2, 702.0], [34.3, 702.0], [34.4, 702.0], [34.5, 703.0], [34.6, 703.0], [34.7, 703.0], [34.8, 704.0], [34.9, 704.0], [35.0, 704.0], [35.1, 704.0], [35.2, 705.0], [35.3, 705.0], [35.4, 705.0], [35.5, 706.0], [35.6, 706.0], [35.7, 707.0], [35.8, 707.0], [35.9, 707.0], [36.0, 708.0], [36.1, 708.0], [36.2, 708.0], [36.3, 709.0], [36.4, 709.0], [36.5, 710.0], [36.6, 710.0], [36.7, 710.0], [36.8, 711.0], [36.9, 711.0], [37.0, 712.0], [37.1, 712.0], [37.2, 713.0], [37.3, 713.0], [37.4, 714.0], [37.5, 714.0], [37.6, 714.0], [37.7, 715.0], [37.8, 715.0], [37.9, 716.0], [38.0, 716.0], [38.1, 716.0], [38.2, 717.0], [38.3, 717.0], [38.4, 717.0], [38.5, 718.0], [38.6, 718.0], [38.7, 719.0], [38.8, 719.0], [38.9, 719.0], [39.0, 720.0], [39.1, 720.0], [39.2, 721.0], [39.3, 721.0], [39.4, 722.0], [39.5, 722.0], [39.6, 722.0], [39.7, 723.0], [39.8, 723.0], [39.9, 724.0], [40.0, 725.0], [40.1, 725.0], [40.2, 726.0], [40.3, 726.0], [40.4, 727.0], [40.5, 727.0], [40.6, 728.0], [40.7, 728.0], [40.8, 728.0], [40.9, 729.0], [41.0, 729.0], [41.1, 730.0], [41.2, 730.0], [41.3, 731.0], [41.4, 731.0], [41.5, 732.0], [41.6, 732.0], [41.7, 733.0], [41.8, 733.0], [41.9, 734.0], [42.0, 734.0], [42.1, 734.0], [42.2, 735.0], [42.3, 735.0], [42.4, 736.0], [42.5, 736.0], [42.6, 736.0], [42.7, 737.0], [42.8, 737.0], [42.9, 738.0], [43.0, 738.0], [43.1, 739.0], [43.2, 739.0], [43.3, 740.0], [43.4, 740.0], [43.5, 740.0], [43.6, 741.0], [43.7, 741.0], [43.8, 742.0], [43.9, 742.0], [44.0, 743.0], [44.1, 743.0], [44.2, 744.0], [44.3, 744.0], [44.4, 745.0], [44.5, 745.0], [44.6, 745.0], [44.7, 746.0], [44.8, 746.0], [44.9, 747.0], [45.0, 747.0], [45.1, 747.0], [45.2, 748.0], [45.3, 748.0], [45.4, 749.0], [45.5, 749.0], [45.6, 749.0], [45.7, 750.0], [45.8, 750.0], [45.9, 751.0], [46.0, 751.0], [46.1, 751.0], [46.2, 752.0], [46.3, 752.0], [46.4, 752.0], [46.5, 753.0], [46.6, 753.0], [46.7, 754.0], [46.8, 754.0], [46.9, 754.0], [47.0, 755.0], [47.1, 755.0], [47.2, 756.0], [47.3, 756.0], [47.4, 756.0], [47.5, 757.0], [47.6, 757.0], [47.7, 758.0], [47.8, 758.0], [47.9, 759.0], [48.0, 759.0], [48.1, 760.0], [48.2, 760.0], [48.3, 761.0], [48.4, 761.0], [48.5, 762.0], [48.6, 762.0], [48.7, 762.0], [48.8, 763.0], [48.9, 763.0], [49.0, 763.0], [49.1, 764.0], [49.2, 764.0], [49.3, 764.0], [49.4, 765.0], [49.5, 765.0], [49.6, 766.0], [49.7, 766.0], [49.8, 766.0], [49.9, 767.0], [50.0, 767.0], [50.1, 768.0], [50.2, 768.0], [50.3, 769.0], [50.4, 769.0], [50.5, 770.0], [50.6, 770.0], [50.7, 770.0], [50.8, 771.0], [50.9, 771.0], [51.0, 772.0], [51.1, 772.0], [51.2, 773.0], [51.3, 773.0], [51.4, 774.0], [51.5, 774.0], [51.6, 774.0], [51.7, 775.0], [51.8, 775.0], [51.9, 776.0], [52.0, 776.0], [52.1, 777.0], [52.2, 777.0], [52.3, 778.0], [52.4, 778.0], [52.5, 779.0], [52.6, 779.0], [52.7, 780.0], [52.8, 780.0], [52.9, 781.0], [53.0, 781.0], [53.1, 781.0], [53.2, 782.0], [53.3, 782.0], [53.4, 783.0], [53.5, 783.0], [53.6, 783.0], [53.7, 784.0], [53.8, 784.0], [53.9, 785.0], [54.0, 785.0], [54.1, 786.0], [54.2, 786.0], [54.3, 786.0], [54.4, 787.0], [54.5, 787.0], [54.6, 788.0], [54.7, 788.0], [54.8, 788.0], [54.9, 789.0], [55.0, 790.0], [55.1, 790.0], [55.2, 790.0], [55.3, 791.0], [55.4, 791.0], [55.5, 792.0], [55.6, 792.0], [55.7, 793.0], [55.8, 793.0], [55.9, 794.0], [56.0, 794.0], [56.1, 795.0], [56.2, 795.0], [56.3, 795.0], [56.4, 796.0], [56.5, 797.0], [56.6, 797.0], [56.7, 798.0], [56.8, 798.0], [56.9, 799.0], [57.0, 799.0], [57.1, 800.0], [57.2, 800.0], [57.3, 801.0], [57.4, 802.0], [57.5, 802.0], [57.6, 803.0], [57.7, 804.0], [57.8, 804.0], [57.9, 805.0], [58.0, 805.0], [58.1, 806.0], [58.2, 807.0], [58.3, 807.0], [58.4, 808.0], [58.5, 808.0], [58.6, 809.0], [58.7, 809.0], [58.8, 810.0], [58.9, 810.0], [59.0, 811.0], [59.1, 811.0], [59.2, 812.0], [59.3, 813.0], [59.4, 813.0], [59.5, 814.0], [59.6, 814.0], [59.7, 815.0], [59.8, 816.0], [59.9, 817.0], [60.0, 817.0], [60.1, 818.0], [60.2, 818.0], [60.3, 819.0], [60.4, 820.0], [60.5, 820.0], [60.6, 821.0], [60.7, 822.0], [60.8, 822.0], [60.9, 823.0], [61.0, 823.0], [61.1, 824.0], [61.2, 825.0], [61.3, 825.0], [61.4, 826.0], [61.5, 826.0], [61.6, 827.0], [61.7, 828.0], [61.8, 828.0], [61.9, 829.0], [62.0, 830.0], [62.1, 830.0], [62.2, 831.0], [62.3, 832.0], [62.4, 832.0], [62.5, 833.0], [62.6, 833.0], [62.7, 834.0], [62.8, 835.0], [62.9, 835.0], [63.0, 836.0], [63.1, 837.0], [63.2, 838.0], [63.3, 838.0], [63.4, 839.0], [63.5, 840.0], [63.6, 840.0], [63.7, 841.0], [63.8, 842.0], [63.9, 843.0], [64.0, 843.0], [64.1, 844.0], [64.2, 845.0], [64.3, 846.0], [64.4, 847.0], [64.5, 848.0], [64.6, 848.0], [64.7, 849.0], [64.8, 850.0], [64.9, 851.0], [65.0, 851.0], [65.1, 852.0], [65.2, 853.0], [65.3, 854.0], [65.4, 854.0], [65.5, 855.0], [65.6, 856.0], [65.7, 857.0], [65.8, 858.0], [65.9, 859.0], [66.0, 859.0], [66.1, 860.0], [66.2, 861.0], [66.3, 862.0], [66.4, 863.0], [66.5, 864.0], [66.6, 865.0], [66.7, 866.0], [66.8, 867.0], [66.9, 867.0], [67.0, 868.0], [67.1, 869.0], [67.2, 870.0], [67.3, 871.0], [67.4, 872.0], [67.5, 873.0], [67.6, 874.0], [67.7, 875.0], [67.8, 876.0], [67.9, 876.0], [68.0, 877.0], [68.1, 878.0], [68.2, 879.0], [68.3, 879.0], [68.4, 880.0], [68.5, 881.0], [68.6, 881.0], [68.7, 882.0], [68.8, 883.0], [68.9, 884.0], [69.0, 884.0], [69.1, 885.0], [69.2, 886.0], [69.3, 886.0], [69.4, 887.0], [69.5, 888.0], [69.6, 889.0], [69.7, 890.0], [69.8, 890.0], [69.9, 891.0], [70.0, 892.0], [70.1, 893.0], [70.2, 893.0], [70.3, 894.0], [70.4, 895.0], [70.5, 896.0], [70.6, 897.0], [70.7, 898.0], [70.8, 899.0], [70.9, 900.0], [71.0, 901.0], [71.1, 903.0], [71.2, 904.0], [71.3, 905.0], [71.4, 906.0], [71.5, 908.0], [71.6, 909.0], [71.7, 910.0], [71.8, 911.0], [71.9, 912.0], [72.0, 913.0], [72.1, 914.0], [72.2, 915.0], [72.3, 917.0], [72.4, 918.0], [72.5, 919.0], [72.6, 921.0], [72.7, 922.0], [72.8, 924.0], [72.9, 926.0], [73.0, 928.0], [73.1, 929.0], [73.2, 931.0], [73.3, 933.0], [73.4, 934.0], [73.5, 936.0], [73.6, 938.0], [73.7, 939.0], [73.8, 941.0], [73.9, 942.0], [74.0, 943.0], [74.1, 945.0], [74.2, 946.0], [74.3, 947.0], [74.4, 949.0], [74.5, 950.0], [74.6, 951.0], [74.7, 952.0], [74.8, 953.0], [74.9, 954.0], [75.0, 956.0], [75.1, 957.0], [75.2, 958.0], [75.3, 960.0], [75.4, 961.0], [75.5, 962.0], [75.6, 963.0], [75.7, 964.0], [75.8, 966.0], [75.9, 967.0], [76.0, 968.0], [76.1, 970.0], [76.2, 972.0], [76.3, 973.0], [76.4, 975.0], [76.5, 977.0], [76.6, 979.0], [76.7, 980.0], [76.8, 982.0], [76.9, 984.0], [77.0, 986.0], [77.1, 988.0], [77.2, 989.0], [77.3, 991.0], [77.4, 993.0], [77.5, 994.0], [77.6, 996.0], [77.7, 998.0], [77.8, 1000.0], [77.9, 1001.0], [78.0, 1003.0], [78.1, 1004.0], [78.2, 1007.0], [78.3, 1008.0], [78.4, 1010.0], [78.5, 1011.0], [78.6, 1013.0], [78.7, 1015.0], [78.8, 1017.0], [78.9, 1018.0], [79.0, 1019.0], [79.1, 1020.0], [79.2, 1021.0], [79.3, 1022.0], [79.4, 1024.0], [79.5, 1025.0], [79.6, 1027.0], [79.7, 1029.0], [79.8, 1030.0], [79.9, 1031.0], [80.0, 1033.0], [80.1, 1034.0], [80.2, 1036.0], [80.3, 1038.0], [80.4, 1040.0], [80.5, 1042.0], [80.6, 1043.0], [80.7, 1045.0], [80.8, 1047.0], [80.9, 1050.0], [81.0, 1051.0], [81.1, 1054.0], [81.2, 1056.0], [81.3, 1058.0], [81.4, 1059.0], [81.5, 1061.0], [81.6, 1062.0], [81.7, 1064.0], [81.8, 1065.0], [81.9, 1067.0], [82.0, 1068.0], [82.1, 1071.0], [82.2, 1073.0], [82.3, 1075.0], [82.4, 1077.0], [82.5, 1079.0], [82.6, 1081.0], [82.7, 1083.0], [82.8, 1085.0], [82.9, 1087.0], [83.0, 1090.0], [83.1, 1092.0], [83.2, 1094.0], [83.3, 1096.0], [83.4, 1097.0], [83.5, 1099.0], [83.6, 1100.0], [83.7, 1101.0], [83.8, 1102.0], [83.9, 1103.0], [84.0, 1105.0], [84.1, 1106.0], [84.2, 1107.0], [84.3, 1109.0], [84.4, 1110.0], [84.5, 1112.0], [84.6, 1114.0], [84.7, 1115.0], [84.8, 1117.0], [84.9, 1118.0], [85.0, 1119.0], [85.1, 1120.0], [85.2, 1122.0], [85.3, 1123.0], [85.4, 1125.0], [85.5, 1126.0], [85.6, 1128.0], [85.7, 1129.0], [85.8, 1130.0], [85.9, 1132.0], [86.0, 1133.0], [86.1, 1134.0], [86.2, 1135.0], [86.3, 1136.0], [86.4, 1138.0], [86.5, 1139.0], [86.6, 1141.0], [86.7, 1142.0], [86.8, 1144.0], [86.9, 1145.0], [87.0, 1147.0], [87.1, 1149.0], [87.2, 1151.0], [87.3, 1153.0], [87.4, 1155.0], [87.5, 1156.0], [87.6, 1158.0], [87.7, 1160.0], [87.8, 1162.0], [87.9, 1163.0], [88.0, 1164.0], [88.1, 1166.0], [88.2, 1168.0], [88.3, 1169.0], [88.4, 1172.0], [88.5, 1174.0], [88.6, 1177.0], [88.7, 1179.0], [88.8, 1181.0], [88.9, 1184.0], [89.0, 1186.0], [89.1, 1189.0], [89.2, 1192.0], [89.3, 1194.0], [89.4, 1196.0], [89.5, 1198.0], [89.6, 1200.0], [89.7, 1202.0], [89.8, 1205.0], [89.9, 1209.0], [90.0, 1212.0], [90.1, 1214.0], [90.2, 1218.0], [90.3, 1222.0], [90.4, 1226.0], [90.5, 1230.0], [90.6, 1234.0], [90.7, 1238.0], [90.8, 1242.0], [90.9, 1246.0], [91.0, 1250.0], [91.1, 1255.0], [91.2, 1259.0], [91.3, 1263.0], [91.4, 1268.0], [91.5, 1271.0], [91.6, 1276.0], [91.7, 1280.0], [91.8, 1285.0], [91.9, 1290.0], [92.0, 1295.0], [92.1, 1299.0], [92.2, 1304.0], [92.3, 1311.0], [92.4, 1316.0], [92.5, 1321.0], [92.6, 1326.0], [92.7, 1331.0], [92.8, 1337.0], [92.9, 1342.0], [93.0, 1350.0], [93.1, 1356.0], [93.2, 1362.0], [93.3, 1369.0], [93.4, 1377.0], [93.5, 1382.0], [93.6, 1388.0], [93.7, 1395.0], [93.8, 1402.0], [93.9, 1409.0], [94.0, 1416.0], [94.1, 1421.0], [94.2, 1426.0], [94.3, 1432.0], [94.4, 1439.0], [94.5, 1446.0], [94.6, 1452.0], [94.7, 1459.0], [94.8, 1466.0], [94.9, 1472.0], [95.0, 1480.0], [95.1, 1489.0], [95.2, 1495.0], [95.3, 1504.0], [95.4, 1510.0], [95.5, 1517.0], [95.6, 1524.0], [95.7, 1533.0], [95.8, 1543.0], [95.9, 1552.0], [96.0, 1557.0], [96.1, 1563.0], [96.2, 1570.0], [96.3, 1579.0], [96.4, 1590.0], [96.5, 1602.0], [96.6, 1612.0], [96.7, 1624.0], [96.8, 1635.0], [96.9, 1642.0], [97.0, 1648.0], [97.1, 1662.0], [97.2, 1673.0], [97.3, 1686.0], [97.4, 1695.0], [97.5, 1705.0], [97.6, 1716.0], [97.7, 1731.0], [97.8, 1751.0], [97.9, 1763.0], [98.0, 1775.0], [98.1, 1794.0], [98.2, 1816.0], [98.3, 1830.0], [98.4, 1854.0], [98.5, 1876.0], [98.6, 1894.0], [98.7, 1915.0], [98.8, 1956.0], [98.9, 1991.0], [99.0, 2019.0], [99.1, 2054.0], [99.2, 2095.0], [99.3, 2123.0], [99.4, 2144.0], [99.5, 2177.0], [99.6, 2224.0], [99.7, 2310.0], [99.8, 2373.0], [99.9, 2548.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 49858.0, "series": [{"data": [[0.0, 1357.0], [600.0, 49858.0], [700.0, 46868.0], [800.0, 27628.0], [900.0, 13902.0], [1000.0, 11494.0], [1100.0, 12096.0], [1200.0, 5027.0], [1300.0, 3310.0], [1400.0, 2973.0], [1500.0, 2461.0], [100.0, 600.0], [1600.0, 1932.0], [1700.0, 1377.0], [1800.0, 994.0], [1900.0, 603.0], [2000.0, 564.0], [2100.0, 675.0], [2200.0, 271.0], [2300.0, 274.0], [2400.0, 97.0], [2500.0, 127.0], [2600.0, 44.0], [2700.0, 37.0], [2800.0, 26.0], [2900.0, 7.0], [3000.0, 9.0], [3100.0, 9.0], [200.0, 554.0], [3200.0, 1.0], [3300.0, 2.0], [300.0, 435.0], [400.0, 1026.0], [500.0, 13362.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 186511.0, "series": [{"data": [[0.0, 3972.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 186511.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9491.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 26.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 858.6627275630777, "minX": 1.6667046E12, "maxY": 1000.0, "series": [{"data": [[1.6667046E12, 999.0217031694593], [1.66670472E12, 876.5354232575962], [1.66670466E12, 1000.0]], "isOverall": false, "label": "Change employee name", "isController": false}, {"data": [[1.6667046E12, 998.4349895670338], [1.66670472E12, 858.6627275630777], [1.66670466E12, 1000.0]], "isOverall": false, "label": "Get employee by id", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 1259.8965517241377, "series": [{"data": [[2.0, 2.0], [3.0, 3.0], [4.0, 3.0], [5.0, 5.0], [7.0, 8.75], [8.0, 24.0], [9.0, 18.0], [10.0, 8.0], [11.0, 3.0], [12.0, 9.0], [13.0, 10.0], [14.0, 10.5], [15.0, 15.0], [18.0, 43.0], [19.0, 28.0], [20.0, 291.0], [21.0, 26.0], [22.0, 20.0], [23.0, 22.0], [24.0, 56.0], [25.0, 23.0], [26.0, 23.0], [27.0, 350.0], [28.0, 53.0], [30.0, 117.4], [31.0, 206.5], [33.0, 28.0], [32.0, 46.666666666666664], [35.0, 4.0], [34.0, 28.0], [37.0, 64.0], [36.0, 58.0], [38.0, 5.0], [41.0, 227.0], [40.0, 29.0], [43.0, 111.66666666666666], [42.0, 38.0], [45.0, 220.5], [47.0, 37.5], [46.0, 4.0], [48.0, 295.0], [51.0, 38.0], [50.0, 21.5], [55.0, 41.0], [54.0, 70.66666666666667], [57.0, 64.5], [56.0, 45.0], [59.0, 46.0], [58.0, 318.0], [61.0, 106.0], [63.0, 55.0], [62.0, 89.0], [67.0, 55.0], [66.0, 30.5], [64.0, 190.5], [71.0, 57.0], [70.0, 44.6], [75.0, 195.0], [74.0, 104.66666666666666], [73.0, 181.33333333333331], [72.0, 56.0], [79.0, 205.0], [78.0, 62.0], [77.0, 3.0], [76.0, 4.0], [83.0, 67.0], [82.0, 263.0], [81.0, 84.25], [87.0, 224.0], [86.0, 67.0], [85.0, 146.8], [84.0, 4.0], [91.0, 155.0], [90.0, 536.0], [89.0, 41.0], [88.0, 108.0], [95.0, 84.25], [92.0, 154.5], [99.0, 321.5], [97.0, 90.0], [96.0, 313.5], [103.0, 94.0], [102.0, 288.3333333333333], [101.0, 48.0], [107.0, 239.0], [106.0, 147.25], [104.0, 94.0], [110.0, 50.5], [109.0, 98.0], [115.0, 331.33333333333337], [114.0, 414.0], [113.0, 147.33333333333334], [119.0, 251.0], [118.0, 52.5], [117.0, 250.0], [116.0, 102.0], [123.0, 102.0], [122.0, 4.0], [121.0, 104.0], [120.0, 249.5], [127.0, 110.0], [126.0, 380.5], [125.0, 184.5], [124.0, 107.5], [133.0, 118.5], [132.0, 197.0], [131.0, 148.8], [129.0, 381.0], [143.0, 281.0], [142.0, 124.0], [141.0, 4.5], [140.0, 279.0], [138.0, 338.8], [151.0, 556.0], [150.0, 133.0], [149.0, 556.0], [148.0, 125.0], [147.0, 97.0], [146.0, 6.0], [145.0, 176.33333333333334], [159.0, 221.0], [156.0, 124.0], [155.0, 281.0], [154.0, 133.0], [153.0, 352.3333333333333], [167.0, 108.5], [165.0, 142.66666666666666], [163.0, 109.25], [162.0, 448.0], [161.0, 130.0], [160.0, 135.66666666666666], [175.0, 226.5], [173.0, 145.5], [172.0, 227.0], [171.0, 229.0], [170.0, 282.66666666666663], [169.0, 295.0], [168.0, 143.5], [182.0, 75.5], [181.0, 305.0], [180.0, 284.5], [178.0, 312.0], [177.0, 191.5], [191.0, 271.5], [190.0, 161.0], [189.0, 234.5], [188.0, 277.85714285714283], [186.0, 329.0], [185.0, 603.0], [184.0, 258.0], [199.0, 472.0], [198.0, 220.0], [197.0, 6.0], [196.0, 4.0], [195.0, 158.0], [194.0, 198.25], [193.0, 321.0], [192.0, 3.0], [207.0, 176.5], [205.0, 96.5], [204.0, 198.42857142857144], [203.0, 66.0], [202.0, 15.0], [201.0, 243.5], [200.0, 160.0], [215.0, 33.0], [214.0, 174.0], [213.0, 339.0], [212.0, 27.5], [210.0, 26.0], [209.0, 96.0], [223.0, 179.0], [222.0, 174.0], [221.0, 179.0], [220.0, 182.0], [219.0, 32.0], [217.0, 174.0], [216.0, 175.5], [231.0, 85.0], [230.0, 180.33333333333334], [227.0, 33.0], [225.0, 184.0], [224.0, 32.666666666666664], [239.0, 139.0], [237.0, 201.66666666666666], [234.0, 190.0], [233.0, 190.66666666666666], [247.0, 126.5], [245.0, 367.0], [244.0, 151.0], [243.0, 203.0], [242.0, 197.0], [241.0, 196.66666666666666], [255.0, 52.0], [254.0, 55.0], [253.0, 455.5], [252.0, 209.0], [251.0, 129.5], [249.0, 207.0], [248.0, 266.5], [270.0, 220.0], [259.0, 254.16666666666666], [258.0, 215.0], [257.0, 131.5], [256.0, 207.0], [263.0, 270.0], [262.0, 273.0], [261.0, 57.0], [271.0, 218.0], [269.0, 67.0], [268.0, 376.0], [267.0, 325.0], [266.0, 217.0], [265.0, 63.5], [264.0, 216.0], [286.0, 234.0], [274.0, 65.85714285714286], [277.0, 56.0], [276.0, 360.0], [279.0, 408.5], [272.0, 249.75], [282.0, 182.5], [283.0, 60.57894736842105], [284.0, 383.5], [275.0, 406.0], [287.0, 236.0], [285.0, 388.0], [281.0, 366.6666666666667], [280.0, 257.75], [301.0, 88.0], [302.0, 245.0], [300.0, 202.8], [291.0, 159.83333333333334], [290.0, 288.0], [288.0, 158.0], [298.0, 138.0], [297.0, 84.0], [296.0, 81.0], [295.0, 82.0], [294.0, 239.0], [293.0, 82.5], [292.0, 136.33333333333334], [318.0, 393.0], [319.0, 93.0], [317.0, 91.0], [316.0, 252.0], [315.0, 91.0], [314.0, 165.5], [312.0, 245.33333333333331], [309.0, 245.0], [307.0, 354.25], [305.0, 171.5], [308.0, 600.0], [334.0, 402.42857142857144], [335.0, 439.25], [332.0, 214.0], [323.0, 99.0], [322.0, 338.0], [321.0, 278.0], [320.0, 198.33333333333331], [330.0, 462.5], [329.0, 101.0], [328.0, 98.0], [327.0, 100.0], [326.0, 262.5], [325.0, 259.0], [324.0, 98.0], [350.0, 350.0], [351.0, 295.0], [348.0, 510.0], [339.0, 114.0], [338.0, 362.0], [337.0, 116.0], [336.0, 388.0], [347.0, 295.0], [346.0, 305.6666666666667], [345.0, 207.5], [344.0, 199.5], [343.0, 287.0], [342.0, 275.0], [341.0, 392.3333333333333], [366.0, 645.0], [367.0, 253.33333333333334], [365.0, 323.0], [364.0, 305.0], [363.0, 307.0], [362.0, 287.3333333333333], [360.0, 218.0], [359.0, 296.0], [353.0, 356.625], [352.0, 411.5], [355.0, 135.0], [354.0, 303.0], [358.0, 333.6666666666667], [357.0, 274.5], [356.0, 132.0], [381.0, 424.0], [380.0, 154.0], [371.0, 309.0], [370.0, 159.0], [368.0, 415.0], [379.0, 234.5], [378.0, 149.0], [377.0, 295.0], [376.0, 311.5], [375.0, 235.6], [374.0, 308.0], [373.0, 334.5], [372.0, 229.0], [398.0, 425.0], [399.0, 452.1666666666667], [397.0, 315.0], [396.0, 342.0], [395.0, 167.0], [394.0, 162.5], [393.0, 214.5], [388.0, 342.5], [385.0, 159.0], [384.0, 262.0], [387.0, 299.0], [386.0, 453.33333333333337], [414.0, 177.66666666666666], [415.0, 352.5], [412.0, 467.8], [403.0, 192.0], [402.0, 311.2222222222222], [401.0, 535.75], [400.0, 243.5], [411.0, 176.0], [410.0, 368.75], [409.0, 481.0], [407.0, 499.25], [406.0, 512.6666666666666], [405.0, 430.0], [404.0, 184.0], [430.0, 536.0], [431.0, 220.0], [429.0, 346.75], [428.0, 197.0], [427.0, 209.0], [426.0, 431.0], [425.0, 704.0], [424.0, 193.0], [423.0, 440.5], [417.0, 347.0], [416.0, 298.5], [419.0, 436.0], [418.0, 352.0], [422.0, 278.5], [421.0, 378.8], [420.0, 355.0], [435.0, 406.375], [446.0, 314.0], [445.0, 340.5], [443.0, 334.5], [442.0, 225.0], [441.0, 377.0], [439.0, 221.0], [438.0, 389.25], [436.0, 441.0], [433.0, 216.0], [432.0, 286.0], [461.0, 411.5], [462.0, 585.0], [460.0, 240.0], [449.0, 369.4], [448.0, 292.0], [458.0, 468.0], [457.0, 295.0], [456.0, 408.0], [455.0, 453.0], [454.0, 237.0], [453.0, 289.0], [452.0, 387.0], [478.0, 357.0], [479.0, 358.0], [477.0, 249.0], [476.0, 320.3333333333333], [475.0, 357.0], [474.0, 283.3333333333333], [473.0, 245.0], [472.0, 358.0], [471.0, 245.0], [465.0, 241.0], [464.0, 279.0], [467.0, 265.4], [466.0, 385.6666666666667], [470.0, 318.6666666666667], [469.0, 243.0], [468.0, 355.0], [493.0, 250.66666666666666], [495.0, 323.3333333333333], [492.0, 358.0], [483.0, 357.0], [482.0, 357.0], [481.0, 247.5], [491.0, 491.5], [490.0, 296.6], [489.0, 400.6666666666667], [487.0, 252.0], [486.0, 359.0], [485.0, 306.0], [510.0, 294.0], [511.0, 363.6666666666667], [509.0, 260.5], [508.0, 360.0], [506.0, 261.0], [505.0, 606.0], [504.0, 322.4], [503.0, 255.0], [497.0, 252.0], [496.0, 394.3333333333333], [499.0, 361.0], [498.0, 362.0], [502.0, 358.5], [501.0, 291.3333333333333], [500.0, 308.5], [538.0, 411.5], [530.0, 319.8], [528.0, 306.5], [540.0, 279.33333333333337], [526.0, 258.5], [512.0, 258.0], [514.0, 466.0], [516.0, 420.0], [518.0, 264.0], [524.0, 314.25], [522.0, 263.0], [520.0, 262.0], [532.0, 290.6666666666667], [568.0, 560.0], [574.0, 370.6666666666667], [560.0, 590.25], [562.0, 318.0], [572.0, 371.0], [544.0, 263.0], [546.0, 313.0], [548.0, 363.0], [550.0, 729.5], [558.0, 438.5], [556.0, 472.0], [552.0, 405.3333333333333], [566.0, 371.0], [564.0, 435.5], [604.0, 327.0], [592.0, 498.0], [594.0, 459.5], [596.0, 641.0], [606.0, 326.0], [602.0, 619.5], [600.0, 353.0], [576.0, 322.5], [578.0, 436.0], [580.0, 373.5], [582.0, 499.0], [588.0, 670.5], [586.0, 414.0], [584.0, 276.0], [598.0, 336.0], [632.0, 339.5], [636.0, 652.0], [626.0, 392.0], [638.0, 470.0], [634.0, 282.0], [608.0, 276.0], [610.0, 276.0], [612.0, 467.3333333333333], [614.0, 381.0], [622.0, 353.3333333333333], [618.0, 475.0], [616.0, 502.5], [630.0, 284.0], [664.0, 557.0], [670.0, 442.5], [658.0, 291.5], [668.0, 604.0], [640.0, 288.5], [642.0, 291.0], [644.0, 418.3333333333333], [654.0, 290.0], [652.0, 465.0], [650.0, 288.0], [648.0, 348.0], [662.0, 483.0], [698.0, 364.25], [702.0, 295.0], [690.0, 487.5], [700.0, 293.0], [696.0, 656.0], [678.0, 655.5], [676.0, 292.0], [674.0, 320.25], [672.0, 288.2], [686.0, 355.6666666666667], [682.0, 558.0], [680.0, 292.0], [694.0, 613.3333333333334], [732.0, 320.0], [734.0, 470.0], [720.0, 357.0], [724.0, 652.0], [730.0, 698.5], [728.0, 393.0], [710.0, 371.0], [708.0, 444.2857142857143], [706.0, 295.5], [704.0, 563.0], [718.0, 354.3333333333333], [716.0, 451.0], [714.0, 435.3333333333333], [712.0, 558.0], [726.0, 376.25], [764.0, 407.0], [766.0, 421.8], [752.0, 332.0], [754.0, 549.5], [756.0, 332.3333333333333], [762.0, 525.6666666666666], [760.0, 333.4], [742.0, 323.0], [738.0, 420.5], [736.0, 370.3333333333333], [750.0, 458.3333333333333], [748.0, 568.0], [746.0, 327.0], [758.0, 451.5], [796.0, 483.0], [798.0, 488.3333333333333], [784.0, 570.0], [786.0, 373.0], [788.0, 716.0], [794.0, 385.0], [792.0, 617.4], [774.0, 455.2], [770.0, 340.0], [768.0, 430.0], [782.0, 474.3333333333333], [780.0, 588.6666666666666], [790.0, 378.5], [828.0, 499.0], [816.0, 448.5], [818.0, 449.5], [820.0, 497.0], [830.0, 406.0], [826.0, 498.0], [824.0, 497.0], [800.0, 393.6666666666667], [802.0, 395.0], [804.0, 394.0], [806.0, 460.2222222222223], [814.0, 440.6], [812.0, 493.3333333333333], [810.0, 517.25], [808.0, 511.50000000000006], [822.0, 662.75], [860.0, 511.0], [852.0, 421.5], [862.0, 455.0], [848.0, 559.0], [858.0, 502.3636363636364], [838.0, 510.0], [836.0, 438.3333333333333], [832.0, 616.0], [846.0, 589.0], [844.0, 557.0], [842.0, 575.3333333333334], [840.0, 409.0], [854.0, 545.0], [888.0, 625.25], [894.0, 511.44444444444446], [880.0, 431.5], [892.0, 468.0], [864.0, 571.6666666666666], [866.0, 427.0], [868.0, 542.6666666666666], [878.0, 477.5], [874.0, 474.5], [886.0, 663.0], [884.0, 568.3000000000001], [920.0, 501.5], [926.0, 605.0], [912.0, 437.0], [922.0, 441.0], [896.0, 508.8333333333333], [898.0, 631.25], [900.0, 569.3333333333334], [902.0, 550.0], [904.0, 464.25], [916.0, 681.4], [914.0, 475.6666666666667], [954.0, 589.6428571428572], [958.0, 457.0], [944.0, 505.75], [948.0, 568.6], [952.0, 649.2], [934.0, 581.0], [932.0, 578.0], [930.0, 547.0], [928.0, 445.5], [942.0, 642.0], [940.0, 659.0], [938.0, 564.0], [950.0, 746.5], [986.0, 484.0], [990.0, 735.0], [976.0, 521.0], [978.0, 522.0], [960.0, 624.0], [962.0, 565.0], [964.0, 510.6], [966.0, 476.0], [970.0, 572.0], [982.0, 541.6666666666666], [980.0, 730.0], [1020.0, 494.0], [1022.0, 692.0], [1008.0, 493.5], [1012.0, 534.3333333333333], [1010.0, 494.0], [1016.0, 492.8], [998.0, 639.4], [996.0, 495.0], [1006.0, 460.40000000000003], [1004.0, 734.0], [1002.0, 532.5], [1000.0, 535.75], [1014.0, 493.0], [1076.0, 524.8], [1072.0, 572.6666666666666], [1084.0, 575.3333333333334], [1060.0, 571.3333333333334], [1056.0, 489.0], [1080.0, 556.5], [1024.0, 519.1666666666667], [1028.0, 488.0], [1032.0, 488.0], [1036.0, 543.6666666666666], [1052.0, 515.5], [1048.0, 397.0], [1044.0, 487.6666666666667], [1040.0, 523.7142857142857], [1064.0, 491.0], [1140.0, 493.2857142857143], [1148.0, 540.0], [1124.0, 474.0], [1128.0, 623.8571428571428], [1144.0, 506.2857142857143], [1100.0, 507.25], [1096.0, 509.0], [1092.0, 503.0], [1088.0, 525.3333333333334], [1112.0, 565.6], [1104.0, 662.0], [1132.0, 537.0], [1204.0, 586.0], [1184.0, 523.0], [1192.0, 633.5], [1196.0, 514.0], [1208.0, 474.0], [1200.0, 577.0], [1156.0, 568.6666666666666], [1152.0, 465.0], [1160.0, 485.25], [1164.0, 469.0], [1180.0, 473.0], [1176.0, 527.75], [1172.0, 468.0], [1168.0, 570.6666666666667], [1272.0, 636.0], [1268.0, 513.75], [1276.0, 495.0], [1248.0, 569.4], [1252.0, 564.0], [1256.0, 593.4285714285714], [1260.0, 699.0], [1264.0, 615.7142857142857], [1216.0, 491.2], [1220.0, 575.0], [1244.0, 616.8], [1240.0, 565.25], [1236.0, 729.0], [1336.0, 496.0], [1332.0, 623.4], [1340.0, 500.0], [1312.0, 630.8333333333334], [1316.0, 741.0], [1320.0, 659.4285714285714], [1324.0, 834.5], [1292.0, 560.75], [1288.0, 507.0], [1284.0, 561.6666666666666], [1308.0, 782.5], [1304.0, 609.5000000000001], [1400.0, 607.7142857142857], [1404.0, 524.8], [1376.0, 533.25], [1380.0, 637.5], [1384.0, 515.0], [1388.0, 642.4736842105262], [1396.0, 556.2], [1392.0, 522.0], [1356.0, 584.0], [1352.0, 629.5294117647057], [1348.0, 648.3636363636364], [1344.0, 572.0], [1372.0, 510.0], [1368.0, 633.5], [1364.0, 588.3636363636363], [1360.0, 545.0], [1464.0, 659.1428571428571], [1468.0, 657.2], [1440.0, 530.0], [1444.0, 588.6666666666666], [1448.0, 602.1666666666666], [1452.0, 623.0], [1460.0, 586.7142857142857], [1456.0, 676.8571428571429], [1416.0, 587.75], [1412.0, 607.4], [1408.0, 606.7142857142857], [1436.0, 586.75], [1432.0, 575.8333333333334], [1424.0, 526.6666666666666], [1500.0, 703.6666666666666], [1488.0, 644.4], [1492.0, 664.25], [1496.0, 681.0], [1504.0, 641.8333333333333], [1508.0, 650.5714285714286], [1512.0, 582.0], [1516.0, 668.4], [1532.0, 690.25], [1528.0, 672.5], [1524.0, 658.3333333333333], [1520.0, 751.0], [1484.0, 794.4], [1480.0, 756.6], [1476.0, 642.0], [1472.0, 730.0], [1540.0, 596.0], [1596.0, 697.0], [1564.0, 736.2857142857143], [1560.0, 673.75], [1556.0, 661.8], [1552.0, 665.090909090909], [1536.0, 669.0], [1584.0, 654.8], [1544.0, 790.5714285714286], [1588.0, 747.3333333333334], [1592.0, 625.0], [1572.0, 672.8333333333334], [1576.0, 775.5], [1580.0, 625.0], [1600.0, 656.9375000000001], [1620.0, 617.3333333333334], [1624.0, 805.6666666666666], [1628.0, 720.3636363636364], [1636.0, 756.0], [1632.0, 676.0], [1640.0, 657.5], [1644.0, 673.6666666666666], [1660.0, 682.1666666666667], [1656.0, 666.7142857142858], [1652.0, 694.4], [1648.0, 729.25], [1612.0, 708.0], [1608.0, 624.0], [1604.0, 658.0], [1712.0, 814.5], [1720.0, 676.125], [1664.0, 679.9090909090909], [1668.0, 716.3333333333334], [1676.0, 654.0], [1716.0, 795.3333333333334], [1724.0, 705.9166666666665], [1700.0, 977.0], [1696.0, 626.0], [1688.0, 643.4285714285714], [1684.0, 625.3333333333334], [1680.0, 697.0], [1692.0, 661.3333333333334], [1704.0, 728.4285714285714], [1708.0, 656.3333333333334], [1732.0, 686.6296296296297], [1728.0, 685.75], [1736.0, 755.6666666666666], [1740.0, 512.25], [1776.0, 628.6666666666666], [1780.0, 690.4444444444445], [1748.0, 723.0], [1744.0, 663.6923076923077], [1752.0, 650.6595744680849], [1756.0, 695.5833333333333], [1768.0, 877.3333333333334], [1760.0, 616.2], [1772.0, 677.0], [1788.0, 646.0], [1784.0, 643.6], [1840.0, 734.8], [1796.0, 608.5714285714286], [1800.0, 604.3333333333334], [1804.0, 657.4999999999999], [1844.0, 670.25], [1848.0, 690.8181818181818], [1852.0, 691.4545454545455], [1824.0, 674.36], [1808.0, 651.8333333333333], [1816.0, 643.3999999999999], [1812.0, 680.4583333333333], [1820.0, 657.9], [1792.0, 666.0], [1828.0, 636.8888888888889], [1832.0, 683.5], [1860.0, 667.8000000000001], [1856.0, 705.4666666666667], [1864.0, 677.5714285714286], [1868.0, 676.0357142857142], [1872.0, 714.1020408163264], [1876.0, 702.3684210526317], [1880.0, 763.6315789473684], [1884.0, 634.1666666666667], [1888.0, 651.5714285714287], [1912.0, 637.4782608695651], [1916.0, 740.6666666666666], [1908.0, 637.4285714285714], [1904.0, 728.4500000000002], [1892.0, 667.3333333333331], [1896.0, 737.0], [1900.0, 729.842105263158], [1932.0, 683.8241758241757], [1920.0, 736.625], [1924.0, 704.4722222222222], [1928.0, 629.0], [1968.0, 1016.8448275862067], [1972.0, 921.190476190476], [1976.0, 943.6666666666666], [1980.0, 1195.0000000000002], [1952.0, 802.775], [1936.0, 775.1717171717171], [1940.0, 847.6885245901641], [1944.0, 739.4324324324324], [1948.0, 789.4468085106384], [1956.0, 924.3125], [1960.0, 824.7837837837837], [1964.0, 972.52], [1988.0, 1210.5276073619636], [1992.0, 809.7612903225807], [2000.0, 864.6165984166117], [1984.0, 1210.875], [1996.0, 738.8315098468273], [1081.0, 655.0], [1057.0, 561.2857142857143], [1061.0, 730.0], [1065.0, 536.5], [1085.0, 500.0], [1077.0, 571.5], [1073.0, 543.6666666666667], [1025.0, 491.0], [1037.0, 530.0], [1053.0, 569.6666666666666], [1049.0, 515.0000000000001], [1045.0, 487.0], [1041.0, 486.0], [1069.0, 520.0], [1137.0, 500.0], [1145.0, 515.6666666666666], [1125.0, 548.8333333333334], [1149.0, 576.0], [1141.0, 462.0], [1093.0, 568.3333333333333], [1101.0, 817.5], [1117.0, 478.8], [1113.0, 713.5], [1109.0, 546.3333333333334], [1133.0, 487.0], [1209.0, 563.4444444444445], [1213.0, 584.0], [1185.0, 497.0], [1189.0, 624.0], [1193.0, 472.0], [1197.0, 546.0], [1201.0, 521.6666666666666], [1153.0, 541.0], [1157.0, 542.0], [1161.0, 525.4444444444445], [1165.0, 599.6666666666666], [1181.0, 509.5], [1177.0, 561.8571428571429], [1173.0, 508.3], [1169.0, 484.6666666666667], [1273.0, 808.3333333333334], [1277.0, 496.5], [1249.0, 563.5], [1253.0, 559.875], [1257.0, 560.1999999999998], [1261.0, 736.0], [1269.0, 535.25], [1265.0, 576.0], [1217.0, 556.0], [1221.0, 599.0], [1225.0, 517.0], [1229.0, 509.375], [1245.0, 607.8750000000001], [1237.0, 481.5], [1233.0, 520.5], [1337.0, 526.2], [1341.0, 499.6], [1313.0, 594.0], [1317.0, 662.0], [1321.0, 655.7272727272727], [1333.0, 672.6666666666666], [1329.0, 723.0], [1293.0, 584.0], [1289.0, 498.0], [1285.0, 817.6666666666667], [1281.0, 555.2857142857142], [1309.0, 607.8333333333333], [1305.0, 617.5], [1301.0, 669.9230769230769], [1297.0, 535.8], [1401.0, 618.6249999999999], [1377.0, 512.3333333333334], [1381.0, 583.6666666666666], [1405.0, 601.0769230769231], [1393.0, 524.0], [1357.0, 595.0], [1353.0, 502.0], [1345.0, 500.0], [1373.0, 646.125], [1369.0, 578.3333333333333], [1365.0, 634.7777777777778], [1361.0, 546.0], [1469.0, 641.0], [1441.0, 589.0], [1449.0, 641.5714285714286], [1453.0, 612.1666666666667], [1461.0, 549.0], [1457.0, 617.16], [1421.0, 580.3333333333334], [1417.0, 607.0], [1413.0, 637.3333333333334], [1437.0, 582.6666666666666], [1433.0, 528.0], [1429.0, 680.25], [1425.0, 524.0], [1529.0, 590.0], [1497.0, 589.25], [1501.0, 712.5], [1505.0, 632.5], [1509.0, 661.5], [1517.0, 641.0], [1533.0, 644.9090909090909], [1525.0, 671.5], [1485.0, 558.5], [1481.0, 559.5], [1477.0, 628.1875], [1473.0, 668.8333333333334], [1537.0, 630.375], [1541.0, 667.7777777777778], [1561.0, 686.0], [1557.0, 692.0], [1553.0, 725.25], [1565.0, 694.5], [1585.0, 672.0], [1549.0, 693.25], [1545.0, 648.7142857142858], [1589.0, 730.3333333333334], [1569.0, 629.8823529411766], [1573.0, 626.0], [1577.0, 694.6666666666666], [1581.0, 657.0], [1597.0, 658.6363636363636], [1593.0, 662.0], [1629.0, 580.0], [1601.0, 638.6956521739132], [1621.0, 660.2307692307693], [1617.0, 661.6], [1625.0, 695.0], [1633.0, 679.6500000000001], [1641.0, 626.0], [1645.0, 665.3333333333334], [1661.0, 701.0], [1657.0, 739.5833333333333], [1653.0, 812.1666666666666], [1649.0, 685.5], [1613.0, 622.0], [1609.0, 665.1428571428571], [1605.0, 729.1666666666666], [1677.0, 663.6666666666666], [1665.0, 621.6666666666666], [1669.0, 632.7142857142857], [1673.0, 603.5454545454545], [1713.0, 712.3333333333333], [1717.0, 741.2], [1721.0, 776.6666666666666], [1725.0, 648.3333333333334], [1701.0, 768.25], [1697.0, 656.0], [1681.0, 720.8], [1689.0, 622.0], [1693.0, 726.9999999999999], [1705.0, 842.0], [1709.0, 755.5384615384615], [1733.0, 794.7499999999999], [1777.0, 721.9999999999999], [1781.0, 658.2], [1737.0, 676.0], [1729.0, 669.4444444444445], [1741.0, 728.0], [1745.0, 684.3076923076924], [1753.0, 691.6666666666666], [1757.0, 667.7142857142858], [1769.0, 740.0], [1765.0, 676.7647058823529], [1761.0, 850.3333333333334], [1773.0, 660.9999999999999], [1789.0, 619.9166666666667], [1785.0, 676.7272727272727], [1805.0, 601.0], [1801.0, 602.8], [1817.0, 677.0434782608695], [1797.0, 639.9333333333334], [1841.0, 664.9230769230769], [1849.0, 765.25], [1853.0, 707.0000000000001], [1825.0, 660.6785714285713], [1809.0, 673.5769230769232], [1813.0, 656.2857142857142], [1821.0, 729.5], [1793.0, 659.8333333333334], [1837.0, 687.0], [1833.0, 675.1666666666667], [1829.0, 690.0], [1861.0, 685.5555555555555], [1857.0, 705.153846153846], [1865.0, 657.3], [1873.0, 713.340909090909], [1877.0, 716.3333333333334], [1881.0, 812.0], [1885.0, 697.75], [1889.0, 669.6486486486486], [1917.0, 764.1666666666666], [1913.0, 665.3846153846155], [1909.0, 684.1363636363636], [1905.0, 685.8125000000001], [1869.0, 624.529411764706], [1897.0, 805.3333333333334], [1901.0, 681.5], [1933.0, 683.1846153846153], [1929.0, 833.2307692307692], [1925.0, 684.6], [1921.0, 688.8749999999999], [1969.0, 976.5882352941177], [1973.0, 970.4264705882355], [1977.0, 1166.344827586207], [1981.0, 1240.8556149732624], [1937.0, 772.0], [1941.0, 845.3999999999999], [1945.0, 788.0], [1949.0, 887.4761904761904], [1953.0, 824.3461538461539], [1957.0, 858.595238095238], [1961.0, 918.6603773584906], [1965.0, 881.8421052631579], [1989.0, 1214.9104477611943], [1993.0, 826.282608695652], [1997.0, 733.1688311688314], [1985.0, 1163.6666666666667], [537.0, 292.3333333333333], [541.0, 471.0], [543.0, 311.5], [539.0, 357.0], [515.0, 311.5], [517.0, 269.0], [519.0, 367.0], [525.0, 261.3333333333333], [521.0, 428.5], [535.0, 401.0], [533.0, 353.0], [531.0, 337.6666666666667], [569.0, 276.5], [575.0, 322.5], [561.0, 522.0], [571.0, 303.3333333333333], [559.0, 266.0], [545.0, 340.5], [547.0, 825.0], [549.0, 634.0], [551.0, 368.0], [557.0, 270.4], [555.0, 262.6666666666667], [553.0, 314.3333333333333], [565.0, 367.0], [563.0, 368.0], [605.0, 275.0], [607.0, 333.5], [593.0, 511.0], [595.0, 378.0], [597.0, 369.6], [603.0, 276.0], [601.0, 22.0], [591.0, 392.0], [577.0, 370.0], [579.0, 831.0], [581.0, 456.5], [583.0, 273.0], [589.0, 499.0], [587.0, 670.0], [585.0, 414.6666666666667], [599.0, 278.0], [637.0, 421.5], [639.0, 326.0], [625.0, 296.83333333333337], [627.0, 319.3333333333333], [635.0, 708.25], [633.0, 341.5], [623.0, 562.3333333333334], [609.0, 275.0], [611.0, 276.0], [613.0, 311.6666666666667], [615.0, 275.0], [621.0, 387.6666666666667], [619.0, 383.0], [617.0, 625.3333333333334], [629.0, 382.57142857142856], [665.0, 651.0], [671.0, 321.0], [657.0, 367.25], [667.0, 531.3333333333334], [655.0, 499.3333333333333], [641.0, 367.6666666666667], [643.0, 291.0], [647.0, 405.0], [645.0, 421.3333333333333], [653.0, 378.3333333333333], [651.0, 291.0], [649.0, 533.0], [663.0, 409.0], [661.0, 279.0], [659.0, 468.3333333333333], [697.0, 498.1666666666667], [703.0, 380.75], [689.0, 426.0], [691.0, 437.0], [701.0, 292.5], [679.0, 475.25], [675.0, 292.0], [687.0, 352.5], [685.0, 499.6666666666667], [683.0, 441.8], [681.0, 293.0], [695.0, 610.0], [729.0, 392.0], [733.0, 392.5], [723.0, 414.25], [721.0, 434.99999999999994], [725.0, 391.5], [731.0, 380.75], [711.0, 435.3333333333333], [709.0, 426.0], [707.0, 336.6666666666667], [705.0, 417.0], [719.0, 504.6666666666667], [717.0, 403.6666666666667], [715.0, 453.0], [713.0, 470.8], [727.0, 314.5], [761.0, 333.0], [767.0, 334.0], [753.0, 405.0], [755.0, 332.0], [757.0, 530.6666666666666], [765.0, 406.0], [743.0, 472.0], [741.0, 372.0], [739.0, 321.0], [737.0, 447.5], [751.0, 490.15384615384625], [749.0, 402.5], [747.0, 327.0], [745.0, 400.0], [759.0, 334.0], [793.0, 502.0], [799.0, 395.0], [785.0, 585.6666666666667], [787.0, 568.0], [795.0, 384.0], [775.0, 578.5], [773.0, 411.5], [771.0, 386.0], [769.0, 338.0], [783.0, 570.0], [779.0, 585.5], [777.0, 417.3333333333333], [789.0, 1005.0], [829.0, 671.0], [831.0, 606.0], [817.0, 494.0], [819.0, 449.5], [821.0, 536.75], [827.0, 496.0], [825.0, 504.0], [815.0, 404.0], [801.0, 487.0], [803.0, 584.0], [805.0, 396.5], [813.0, 477.8], [811.0, 595.0], [809.0, 526.6666666666666], [823.0, 428.5], [859.0, 539.0], [861.0, 426.0], [851.0, 469.3333333333333], [849.0, 660.75], [839.0, 554.5], [837.0, 498.0], [833.0, 437.0], [847.0, 591.3333333333334], [845.0, 457.25], [843.0, 413.0], [841.0, 409.0], [855.0, 422.5], [853.0, 717.3333333333334], [889.0, 501.7142857142857], [895.0, 469.0], [881.0, 670.5], [893.0, 551.5], [879.0, 610.0], [865.0, 608.25], [867.0, 554.5], [871.0, 455.3333333333333], [877.0, 490.3333333333333], [875.0, 553.3333333333334], [873.0, 427.3333333333333], [887.0, 433.0], [885.0, 432.0], [923.0, 565.0], [927.0, 503.5], [913.0, 551.0], [925.0, 651.75], [911.0, 440.0], [897.0, 437.0], [901.0, 437.0], [903.0, 577.6], [909.0, 759.0], [907.0, 499.125], [905.0, 637.0], [919.0, 479.5], [915.0, 438.0], [955.0, 878.0], [953.0, 550.2], [959.0, 609.75], [947.0, 727.3333333333334], [945.0, 679.6666666666666], [949.0, 648.0], [957.0, 659.375], [933.0, 446.0], [931.0, 663.5], [929.0, 607.6666666666666], [943.0, 448.6666666666667], [941.0, 643.0], [939.0, 569.6666666666666], [937.0, 556.75], [951.0, 620.0], [987.0, 593.5], [985.0, 591.6666666666666], [991.0, 489.0], [977.0, 473.0], [979.0, 697.3333333333334], [989.0, 630.5], [975.0, 567.125], [961.0, 584.3333333333334], [963.0, 573.2727272727273], [965.0, 735.0], [967.0, 537.6666666666666], [971.0, 734.0], [969.0, 564.75], [983.0, 641.0], [981.0, 657.0], [1019.0, 491.3333333333333], [1017.0, 492.0], [1023.0, 534.5], [1009.0, 493.4], [1021.0, 573.75], [999.0, 575.0], [997.0, 492.0], [995.0, 505.3846153846154], [993.0, 532.2], [1005.0, 493.0], [1003.0, 493.6666666666667], [1001.0, 494.0], [1013.0, 493.5], [1026.0, 496.0], [1082.0, 496.0], [1078.0, 588.0833333333335], [1054.0, 568.3333333333334], [1030.0, 595.6666666666666], [1034.0, 629.6666666666667], [1050.0, 806.0], [1046.0, 520.3333333333334], [1042.0, 608.0], [1070.0, 491.0], [1066.0, 558.8], [1062.0, 492.0], [1146.0, 572.3333333333334], [1150.0, 503.0], [1122.0, 477.8181818181818], [1126.0, 504.5714285714286], [1130.0, 590.25], [1142.0, 499.5], [1138.0, 523.5], [1098.0, 506.3333333333333], [1094.0, 506.5], [1090.0, 553.0], [1110.0, 582.6666666666667], [1106.0, 504.0], [1134.0, 499.875], [1206.0, 531.5], [1210.0, 597.0], [1190.0, 567.2], [1194.0, 528.0], [1198.0, 572.5], [1202.0, 473.0], [1182.0, 508.0], [1162.0, 517.0], [1166.0, 582.6666666666666], [1178.0, 471.0], [1170.0, 519.3333333333334], [1278.0, 576.0], [1250.0, 349.66666666666663], [1258.0, 551.2], [1262.0, 521.1250000000001], [1274.0, 549.6666666666666], [1270.0, 575.0], [1266.0, 542.5], [1218.0, 597.1666666666667], [1222.0, 581.5714285714286], [1230.0, 558.0], [1246.0, 677.6666666666666], [1342.0, 499.5], [1314.0, 695.2857142857142], [1318.0, 633.3333333333334], [1322.0, 575.0], [1326.0, 592.9000000000001], [1338.0, 641.4], [1334.0, 676.0], [1330.0, 660.0], [1294.0, 584.5], [1290.0, 633.5], [1286.0, 582.2], [1282.0, 581.0], [1310.0, 676.4], [1306.0, 574.0], [1302.0, 621.1249999999999], [1298.0, 493.0], [1406.0, 589.0909090909091], [1382.0, 531.0], [1378.0, 721.5], [1386.0, 682.8], [1390.0, 513.4545454545454], [1402.0, 579.8333333333333], [1398.0, 526.0], [1394.0, 523.3333333333334], [1358.0, 546.5], [1354.0, 502.6666666666667], [1350.0, 501.5], [1346.0, 620.0], [1374.0, 550.0], [1370.0, 593.0], [1366.0, 683.6], [1362.0, 579.0], [1470.0, 714.0], [1442.0, 570.0], [1450.0, 576.5], [1454.0, 717.0], [1466.0, 658.2142857142857], [1462.0, 551.0], [1458.0, 630.0], [1422.0, 652.0], [1418.0, 559.0], [1414.0, 525.5], [1410.0, 607.5], [1438.0, 570.0], [1434.0, 654.5], [1430.0, 547.0], [1426.0, 608.5], [1522.0, 587.3333333333334], [1530.0, 747.0], [1490.0, 625.4444444444445], [1494.0, 608.5], [1498.0, 612.0], [1502.0, 548.5], [1506.0, 614.0], [1510.0, 667.9230769230769], [1514.0, 653.2777777777776], [1518.0, 900.0], [1534.0, 827.0], [1526.0, 660.3333333333334], [1482.0, 621.8571428571428], [1478.0, 648.5833333333333], [1474.0, 667.5], [1538.0, 645.2], [1586.0, 654.2], [1562.0, 693.0], [1554.0, 751.25], [1566.0, 625.6666666666666], [1550.0, 715.1333333333333], [1546.0, 602.5], [1542.0, 712.5], [1590.0, 691.3571428571429], [1570.0, 626.0], [1574.0, 710.8], [1578.0, 697.6666666666666], [1582.0, 654.2], [1598.0, 765.0], [1594.0, 714.5000000000001], [1630.0, 698.6875], [1622.0, 726.5], [1618.0, 619.0], [1626.0, 643.6666666666666], [1638.0, 690.2], [1634.0, 768.7777777777778], [1642.0, 620.0], [1646.0, 763.0], [1662.0, 679.6], [1658.0, 703.1428571428572], [1654.0, 626.0], [1650.0, 723.5625], [1614.0, 660.75], [1610.0, 601.8181818181818], [1606.0, 739.625], [1678.0, 641.6666666666666], [1666.0, 769.0], [1670.0, 661.1428571428572], [1674.0, 655.75], [1718.0, 909.0], [1722.0, 775.3333333333333], [1702.0, 712.5], [1698.0, 651.6], [1726.0, 673.6666666666666], [1686.0, 664.4285714285713], [1682.0, 692.5714285714286], [1690.0, 649.3333333333334], [1694.0, 689.5], [1706.0, 684.0], [1710.0, 688.5714285714286], [1734.0, 731.1], [1730.0, 622.5], [1738.0, 768.4], [1742.0, 642.1111111111111], [1778.0, 903.0], [1746.0, 908.0], [1750.0, 831.0], [1754.0, 672.2592592592592], [1758.0, 664.7142857142857], [1770.0, 714.0555555555555], [1766.0, 688.1666666666667], [1762.0, 617.3333333333334], [1774.0, 736.5000000000001], [1790.0, 641.1304347826085], [1782.0, 666.6666666666666], [1786.0, 729.0], [1842.0, 629.75], [1802.0, 600.8571428571429], [1794.0, 680.5], [1806.0, 599.0], [1846.0, 679.25], [1850.0, 718.6727272727272], [1826.0, 623.6363636363637], [1854.0, 682.4193548387098], [1810.0, 648.2666666666667], [1814.0, 614.5], [1818.0, 673.775], [1822.0, 669.9999999999999], [1838.0, 680.0], [1834.0, 685.6], [1830.0, 638.6875], [1862.0, 694.8], [1906.0, 710.8888888888889], [1858.0, 675.4444444444445], [1866.0, 630.0], [1882.0, 688.6153846153848], [1878.0, 710.3333333333333], [1886.0, 688.3333333333334], [1918.0, 770.0], [1914.0, 688.8235294117646], [1910.0, 699.88], [1870.0, 683.8235294117645], [1890.0, 689.3333333333334], [1894.0, 662.2173913043479], [1898.0, 622.8888888888889], [1902.0, 738.375], [1934.0, 700.4615384615386], [1926.0, 738.0], [1922.0, 771.5], [1930.0, 738.6363636363636], [1970.0, 910.107142857143], [1974.0, 914.2105263157896], [1978.0, 1187.5260663507102], [1982.0, 1177.660869565218], [1938.0, 787.7037037037037], [1942.0, 757.0506329113925], [1946.0, 790.0], [1950.0, 840.6818181818181], [1958.0, 837.9374999999999], [1954.0, 867.6785714285713], [1962.0, 825.0], [1966.0, 988.5172413793105], [1986.0, 1202.08], [1990.0, 1206.7870967741924], [1994.0, 801.1252609603341], [1998.0, 745.1135029354208], [1083.0, 496.6666666666667], [1087.0, 513.8333333333333], [1059.0, 768.0], [1063.0, 491.5], [1067.0, 490.0], [1079.0, 496.0], [1075.0, 540.2], [1055.0, 653.0], [1027.0, 572.0], [1035.0, 488.0], [1031.0, 524.6], [1039.0, 568.625], [1047.0, 491.0], [1071.0, 597.0], [1147.0, 541.0], [1151.0, 466.0], [1123.0, 474.0], [1131.0, 481.0], [1127.0, 470.4], [1143.0, 548.3333333333334], [1139.0, 460.0], [1119.0, 477.6666666666667], [1091.0, 505.0], [1099.0, 544.5], [1095.0, 552.2], [1103.0, 530.3333333333334], [1115.0, 510.85714285714283], [1111.0, 578.0], [1107.0, 526.8571428571429], [1135.0, 521.4444444444445], [1211.0, 766.5], [1215.0, 492.8], [1187.0, 535.8333333333333], [1195.0, 585.0], [1199.0, 727.0], [1207.0, 598.5], [1183.0, 471.0], [1155.0, 477.0], [1163.0, 542.5], [1167.0, 517.3333333333334], [1179.0, 470.0], [1175.0, 468.71428571428567], [1171.0, 569.25], [1275.0, 528.6], [1279.0, 496.0], [1251.0, 511.0], [1255.0, 585.0], [1259.0, 525.1428571428571], [1263.0, 493.0], [1271.0, 577.7142857142857], [1267.0, 551.0], [1247.0, 535.6666666666666], [1219.0, 568.375], [1223.0, 568.75], [1227.0, 599.0], [1231.0, 481.0], [1243.0, 581.0000000000001], [1239.0, 420.75], [1235.0, 563.3333333333334], [1339.0, 563.6], [1343.0, 500.0], [1315.0, 493.0], [1319.0, 584.2222222222223], [1323.0, 647.4], [1327.0, 659.0], [1335.0, 1074.0], [1331.0, 652.1428571428572], [1295.0, 563.5], [1291.0, 550.375], [1287.0, 557.4], [1283.0, 535.2], [1311.0, 548.0], [1307.0, 539.2857142857142], [1303.0, 659.0], [1299.0, 573.6923076923077], [1407.0, 524.0], [1399.0, 603.3333333333334], [1379.0, 554.875], [1383.0, 551.3333333333334], [1387.0, 543.3333333333334], [1391.0, 522.6666666666666], [1359.0, 521.8], [1355.0, 583.5], [1347.0, 660.6666666666666], [1375.0, 809.5], [1371.0, 593.0], [1367.0, 681.0], [1467.0, 646.0], [1459.0, 632.8928571428571], [1471.0, 747.1666666666667], [1443.0, 491.3333333333333], [1447.0, 530.0], [1451.0, 611.0], [1455.0, 706.0], [1463.0, 550.5], [1423.0, 554.3333333333334], [1419.0, 568.0], [1415.0, 550.7], [1439.0, 652.2857142857143], [1435.0, 529.0], [1431.0, 698.0], [1427.0, 612.0], [1535.0, 654.0], [1491.0, 649.5], [1495.0, 748.25], [1499.0, 635.8], [1507.0, 585.4285714285714], [1511.0, 667.9], [1515.0, 584.0], [1519.0, 666.1176470588236], [1527.0, 680.5333333333332], [1523.0, 676.6666666666666], [1487.0, 607.8333333333333], [1483.0, 561.0], [1479.0, 616.3333333333334], [1475.0, 683.2857142857142], [1539.0, 689.0], [1563.0, 626.0], [1555.0, 698.2222222222222], [1567.0, 627.0], [1551.0, 606.0], [1547.0, 711.5789473684212], [1543.0, 689.0], [1591.0, 686.0], [1599.0, 637.0000000000001], [1571.0, 676.75], [1575.0, 712.6249999999999], [1579.0, 661.3], [1583.0, 637.8], [1655.0, 747.125], [1651.0, 698.0], [1659.0, 625.6666666666666], [1663.0, 728.0], [1623.0, 641.3333333333334], [1619.0, 632.6666666666666], [1627.0, 617.0], [1631.0, 633.5], [1635.0, 725.6666666666667], [1639.0, 728.0], [1643.0, 704.8888888888889], [1647.0, 655.5], [1615.0, 631.2857142857142], [1611.0, 637.8333333333333], [1607.0, 782.8571428571428], [1603.0, 659.1], [1719.0, 675.8888888888889], [1679.0, 678.7272727272727], [1703.0, 712.0], [1667.0, 721.8], [1671.0, 694.3333333333334], [1675.0, 613.0], [1715.0, 800.9999999999999], [1723.0, 743.8], [1727.0, 636.0], [1699.0, 654.1], [1687.0, 655.5], [1683.0, 638.769230769231], [1691.0, 710.090909090909], [1695.0, 718.8], [1711.0, 697.2857142857143], [1735.0, 724.1111111111112], [1731.0, 650.875], [1739.0, 804.2], [1743.0, 796.6], [1779.0, 689.1153846153846], [1751.0, 1040.0], [1755.0, 707.6666666666666], [1759.0, 685.5], [1767.0, 804.8333333333333], [1763.0, 742.7777777777778], [1771.0, 687.5], [1775.0, 732.875], [1787.0, 684.0], [1791.0, 611.5], [1783.0, 664.6363636363637], [1807.0, 600.0], [1799.0, 658.8000000000001], [1795.0, 608.5], [1803.0, 629.88], [1843.0, 652.0714285714286], [1847.0, 656.0], [1851.0, 794.0], [1855.0, 706.6999999999998], [1827.0, 616.3333333333334], [1811.0, 677.0384615384615], [1815.0, 664.8181818181818], [1819.0, 706.25], [1823.0, 657.2], [1839.0, 699.8461538461539], [1835.0, 683.6666666666667], [1831.0, 640.6176470588236], [1859.0, 727.3], [1863.0, 649.8947368421054], [1875.0, 756.75], [1879.0, 751.4444444444445], [1883.0, 670.0], [1887.0, 658.0434782608696], [1919.0, 728.9200000000001], [1915.0, 732.7500000000001], [1907.0, 648.2222222222223], [1911.0, 685.7368421052632], [1871.0, 664.2142857142859], [1891.0, 654.25], [1895.0, 659.157894736842], [1899.0, 709.9285714285714], [1903.0, 725.0714285714286], [1935.0, 689.9753086419752], [1975.0, 1046.8367346938776], [1923.0, 749.9516129032257], [1927.0, 710.625], [1931.0, 728.1219512195122], [1971.0, 925.05], [1979.0, 1259.8965517241377], [1983.0, 1185.7890625000002], [1939.0, 844.4444444444445], [1947.0, 769.9375], [1951.0, 805.9062500000001], [1959.0, 852.6842105263156], [1955.0, 884.1034482758622], [1963.0, 837.4905660377354], [1967.0, 988.7500000000001], [1995.0, 762.9613095238097], [1987.0, 1236.857142857143], [1991.0, 1023.598465473146], [1999.0, 775.2607305936082], [1.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1972.6247750000177, 853.6155700000025]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 65466.0, "minX": 1.6667046E12, "maxY": 2601729.566666667, "series": [{"data": [[1.6667046E12, 530180.1833333333], [1.66670472E12, 344750.68333333335], [1.66670466E12, 2601729.566666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6667046E12, 98645.75], [1.66670472E12, 65466.0], [1.66670466E12, 485797.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 740.6013922518187, "minX": 1.6667046E12, "maxY": 1176.3830010837842, "series": [{"data": [[1.6667046E12, 1176.3830010837842], [1.66670472E12, 740.6013922518187], [1.66670466E12, 802.939656842131]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 740.5560936238877, "minX": 1.6667046E12, "maxY": 1176.2703537062034, "series": [{"data": [[1.6667046E12, 1176.2703537062034], [1.66670472E12, 740.5560936238877], [1.66670466E12, 802.8986088013454]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6667046E12, "maxY": 1.0848632138986583, "series": [{"data": [[1.6667046E12, 1.0848632138986583], [1.66670472E12, 0.0], [1.66670466E12, 0.004314519091413042]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6667046E12, "maxY": 3362.0, "series": [{"data": [[1.6667046E12, 3362.0], [1.66670472E12, 2076.0], [1.66670466E12, 2698.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6667046E12, 1297.0], [1.66670472E12, 1105.0], [1.66670466E12, 1155.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6667046E12, 1867.9900000000016], [1.66670472E12, 1457.0], [1.66670466E12, 1532.9800000000032]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6667046E12, 1435.0], [1.66670472E12, 1169.0], [1.66670466E12, 1253.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6667046E12, 1.0], [1.66670472E12, 2.0], [1.66670466E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6667046E12, 879.0], [1.66670472E12, 712.0], [1.66670466E12, 763.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34.0, "minX": 74.0, "maxY": 2209.5, "series": [{"data": [[790.0, 2209.5], [926.0, 1196.5], [965.0, 1669.0], [1113.0, 1825.0], [1275.0, 1553.0], [1287.0, 1609.0], [1333.0, 1093.0], [1361.0, 1576.0], [1371.0, 1069.0], [1459.0, 1541.0], [1512.0, 1098.0], [1537.0, 2033.0], [1546.0, 755.0], [1638.0, 716.0], [1665.0, 1198.0], [1818.0, 621.0], [1795.0, 1100.0], [1869.0, 1264.0], [1918.0, 641.5], [1936.0, 644.0], [1927.0, 817.0], [2069.0, 786.0], [2056.0, 859.0], [2119.0, 904.0], [2104.0, 910.0], [2107.0, 1137.0], [2148.0, 1102.0], [2245.0, 823.0], [2212.0, 829.0], [2274.0, 1130.0], [2278.0, 628.5], [2178.0, 850.0], [2417.0, 983.0], [2321.0, 1129.0], [2401.0, 703.0], [2427.0, 693.0], [2338.0, 791.0], [2541.0, 869.0], [2446.0, 785.0], [2452.0, 848.0], [2443.0, 838.0], [2492.0, 1038.0], [2554.0, 776.0], [2548.0, 732.0], [2489.0, 682.0], [2501.0, 810.0], [2508.0, 829.0], [2506.0, 440.0], [2539.0, 794.0], [2535.0, 814.0], [2664.0, 715.0], [2597.0, 769.0], [2684.0, 620.0], [2590.0, 684.0], [2581.0, 924.0], [2617.0, 739.0], [2618.0, 760.0], [2575.0, 730.0], [2654.0, 971.0], [2653.0, 680.0], [2631.0, 717.0], [2744.0, 672.0], [2718.0, 713.0], [2792.0, 690.0], [2780.0, 727.0], [2752.0, 631.0], [2794.0, 723.0], [2750.0, 635.0], [2890.0, 732.0], [2920.0, 617.0], [2886.0, 692.0], [2820.0, 966.0], [2941.0, 689.0], [2910.0, 693.5], [2973.0, 614.0], [3013.0, 739.0], [3007.0, 673.0], [3049.0, 609.0], [3070.0, 622.0], [2946.0, 663.0], [2976.0, 739.0], [3099.0, 641.0], [3148.0, 622.0], [74.0, 669.5], [117.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[74.0, 34.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3148.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 74.0, "maxY": 2209.0, "series": [{"data": [[790.0, 2209.0], [926.0, 1196.5], [965.0, 1669.0], [1113.0, 1825.0], [1275.0, 1553.0], [1287.0, 1609.0], [1333.0, 1093.0], [1361.0, 1576.0], [1371.0, 1069.0], [1459.0, 1540.0], [1512.0, 1098.0], [1537.0, 2033.0], [1546.0, 755.0], [1638.0, 716.0], [1665.0, 1198.0], [1818.0, 621.0], [1795.0, 1100.0], [1869.0, 1264.0], [1918.0, 641.0], [1936.0, 644.0], [1927.0, 817.0], [2069.0, 786.0], [2056.0, 859.0], [2119.0, 904.0], [2104.0, 910.0], [2107.0, 1137.0], [2148.0, 1102.0], [2245.0, 823.0], [2212.0, 829.0], [2274.0, 1130.0], [2278.0, 628.0], [2178.0, 850.0], [2417.0, 983.0], [2321.0, 1129.0], [2401.0, 703.0], [2427.0, 693.0], [2338.0, 791.0], [2541.0, 869.0], [2446.0, 785.0], [2452.0, 848.0], [2443.0, 838.0], [2492.0, 1038.0], [2554.0, 776.0], [2548.0, 732.0], [2489.0, 682.0], [2501.0, 810.0], [2508.0, 829.0], [2506.0, 440.0], [2539.0, 794.0], [2535.0, 814.0], [2664.0, 715.0], [2597.0, 769.0], [2684.0, 620.0], [2590.0, 684.0], [2581.0, 924.0], [2617.0, 739.0], [2618.0, 760.0], [2575.0, 730.0], [2654.0, 971.0], [2653.0, 680.0], [2631.0, 717.0], [2744.0, 672.0], [2718.0, 713.0], [2792.0, 690.0], [2780.0, 727.0], [2752.0, 631.0], [2794.0, 723.0], [2750.0, 635.0], [2890.0, 732.0], [2920.0, 617.0], [2886.0, 692.0], [2820.0, 966.0], [2941.0, 689.0], [2910.0, 693.5], [2973.0, 614.0], [3013.0, 739.0], [3007.0, 673.0], [3049.0, 609.0], [3070.0, 622.0], [2946.0, 663.0], [2976.0, 739.0], [3099.0, 641.0], [3148.0, 622.0], [74.0, 667.5], [117.0, 36.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[74.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3148.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 297.0833333333333, "minX": 1.6667046E12, "maxY": 2495.4333333333334, "series": [{"data": [[1.6667046E12, 540.8166666666667], [1.66670472E12, 297.0833333333333], [1.66670466E12, 2495.4333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.6667046E12, "maxY": 2495.45, "series": [{"data": [[1.6667046E12, 507.05], [1.66670472E12, 330.4], [1.66670466E12, 2495.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6667046E12, 0.43333333333333335]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.6667046E12, "maxY": 2495.45, "series": [{"data": [[1.6667046E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6667046E12, 507.05], [1.66670472E12, 330.4], [1.66670466E12, 2495.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.6667046E12, "maxY": 2495.45, "series": [{"data": [[1.6667046E12, 507.05], [1.66670472E12, 330.4], [1.66670466E12, 2495.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6667046E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

