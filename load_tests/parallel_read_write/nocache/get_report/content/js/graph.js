/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3305.0, "series": [{"data": [[0.0, 1.0], [0.1, 3.0], [0.2, 3.0], [0.3, 4.0], [0.4, 6.0], [0.5, 12.0], [0.6, 66.0], [0.7, 90.0], [0.8, 130.0], [0.9, 160.0], [1.0, 211.0], [1.1, 260.0], [1.2, 295.0], [1.3, 350.0], [1.4, 415.0], [1.5, 457.0], [1.6, 477.0], [1.7, 490.0], [1.8, 499.0], [1.9, 520.0], [2.0, 533.0], [2.1, 539.0], [2.2, 543.0], [2.3, 546.0], [2.4, 548.0], [2.5, 550.0], [2.6, 551.0], [2.7, 553.0], [2.8, 554.0], [2.9, 556.0], [3.0, 558.0], [3.1, 559.0], [3.2, 561.0], [3.3, 562.0], [3.4, 563.0], [3.5, 564.0], [3.6, 565.0], [3.7, 566.0], [3.8, 567.0], [3.9, 568.0], [4.0, 568.0], [4.1, 569.0], [4.2, 570.0], [4.3, 570.0], [4.4, 571.0], [4.5, 572.0], [4.6, 572.0], [4.7, 573.0], [4.8, 573.0], [4.9, 574.0], [5.0, 575.0], [5.1, 575.0], [5.2, 576.0], [5.3, 577.0], [5.4, 577.0], [5.5, 578.0], [5.6, 579.0], [5.7, 579.0], [5.8, 580.0], [5.9, 581.0], [6.0, 582.0], [6.1, 582.0], [6.2, 582.0], [6.3, 583.0], [6.4, 583.0], [6.5, 584.0], [6.6, 585.0], [6.7, 586.0], [6.8, 587.0], [6.9, 587.0], [7.0, 588.0], [7.1, 589.0], [7.2, 589.0], [7.3, 590.0], [7.4, 591.0], [7.5, 592.0], [7.6, 593.0], [7.7, 594.0], [7.8, 595.0], [7.9, 595.0], [8.0, 596.0], [8.1, 596.0], [8.2, 597.0], [8.3, 597.0], [8.4, 598.0], [8.5, 598.0], [8.6, 599.0], [8.7, 600.0], [8.8, 600.0], [8.9, 601.0], [9.0, 601.0], [9.1, 602.0], [9.2, 602.0], [9.3, 603.0], [9.4, 603.0], [9.5, 604.0], [9.6, 604.0], [9.7, 605.0], [9.8, 605.0], [9.9, 606.0], [10.0, 606.0], [10.1, 607.0], [10.2, 607.0], [10.3, 607.0], [10.4, 608.0], [10.5, 608.0], [10.6, 609.0], [10.7, 609.0], [10.8, 610.0], [10.9, 610.0], [11.0, 610.0], [11.1, 611.0], [11.2, 611.0], [11.3, 612.0], [11.4, 612.0], [11.5, 613.0], [11.6, 613.0], [11.7, 613.0], [11.8, 614.0], [11.9, 614.0], [12.0, 615.0], [12.1, 615.0], [12.2, 616.0], [12.3, 616.0], [12.4, 617.0], [12.5, 617.0], [12.6, 617.0], [12.7, 618.0], [12.8, 618.0], [12.9, 619.0], [13.0, 619.0], [13.1, 619.0], [13.2, 620.0], [13.3, 620.0], [13.4, 620.0], [13.5, 621.0], [13.6, 621.0], [13.7, 621.0], [13.8, 622.0], [13.9, 622.0], [14.0, 622.0], [14.1, 623.0], [14.2, 623.0], [14.3, 623.0], [14.4, 624.0], [14.5, 624.0], [14.6, 624.0], [14.7, 625.0], [14.8, 625.0], [14.9, 626.0], [15.0, 626.0], [15.1, 626.0], [15.2, 627.0], [15.3, 628.0], [15.4, 628.0], [15.5, 629.0], [15.6, 629.0], [15.7, 629.0], [15.8, 630.0], [15.9, 630.0], [16.0, 631.0], [16.1, 631.0], [16.2, 632.0], [16.3, 632.0], [16.4, 632.0], [16.5, 633.0], [16.6, 633.0], [16.7, 634.0], [16.8, 634.0], [16.9, 634.0], [17.0, 635.0], [17.1, 635.0], [17.2, 636.0], [17.3, 636.0], [17.4, 636.0], [17.5, 637.0], [17.6, 637.0], [17.7, 638.0], [17.8, 638.0], [17.9, 638.0], [18.0, 639.0], [18.1, 639.0], [18.2, 640.0], [18.3, 640.0], [18.4, 640.0], [18.5, 641.0], [18.6, 641.0], [18.7, 641.0], [18.8, 642.0], [18.9, 642.0], [19.0, 643.0], [19.1, 643.0], [19.2, 643.0], [19.3, 644.0], [19.4, 644.0], [19.5, 645.0], [19.6, 645.0], [19.7, 645.0], [19.8, 646.0], [19.9, 646.0], [20.0, 647.0], [20.1, 647.0], [20.2, 647.0], [20.3, 648.0], [20.4, 648.0], [20.5, 649.0], [20.6, 649.0], [20.7, 650.0], [20.8, 650.0], [20.9, 651.0], [21.0, 651.0], [21.1, 652.0], [21.2, 652.0], [21.3, 653.0], [21.4, 653.0], [21.5, 653.0], [21.6, 654.0], [21.7, 654.0], [21.8, 655.0], [21.9, 655.0], [22.0, 655.0], [22.1, 656.0], [22.2, 656.0], [22.3, 656.0], [22.4, 657.0], [22.5, 657.0], [22.6, 658.0], [22.7, 658.0], [22.8, 659.0], [22.9, 659.0], [23.0, 660.0], [23.1, 660.0], [23.2, 660.0], [23.3, 661.0], [23.4, 661.0], [23.5, 661.0], [23.6, 662.0], [23.7, 662.0], [23.8, 662.0], [23.9, 662.0], [24.0, 663.0], [24.1, 663.0], [24.2, 663.0], [24.3, 664.0], [24.4, 664.0], [24.5, 664.0], [24.6, 665.0], [24.7, 665.0], [24.8, 665.0], [24.9, 666.0], [25.0, 666.0], [25.1, 666.0], [25.2, 667.0], [25.3, 667.0], [25.4, 668.0], [25.5, 668.0], [25.6, 668.0], [25.7, 669.0], [25.8, 669.0], [25.9, 669.0], [26.0, 670.0], [26.1, 670.0], [26.2, 671.0], [26.3, 671.0], [26.4, 671.0], [26.5, 672.0], [26.6, 672.0], [26.7, 672.0], [26.8, 673.0], [26.9, 673.0], [27.0, 673.0], [27.1, 674.0], [27.2, 674.0], [27.3, 675.0], [27.4, 675.0], [27.5, 675.0], [27.6, 676.0], [27.7, 676.0], [27.8, 676.0], [27.9, 677.0], [28.0, 677.0], [28.1, 678.0], [28.2, 678.0], [28.3, 678.0], [28.4, 679.0], [28.5, 679.0], [28.6, 679.0], [28.7, 680.0], [28.8, 680.0], [28.9, 681.0], [29.0, 681.0], [29.1, 682.0], [29.2, 682.0], [29.3, 682.0], [29.4, 683.0], [29.5, 683.0], [29.6, 683.0], [29.7, 684.0], [29.8, 684.0], [29.9, 685.0], [30.0, 685.0], [30.1, 685.0], [30.2, 686.0], [30.3, 686.0], [30.4, 686.0], [30.5, 687.0], [30.6, 687.0], [30.7, 687.0], [30.8, 688.0], [30.9, 688.0], [31.0, 689.0], [31.1, 689.0], [31.2, 689.0], [31.3, 689.0], [31.4, 690.0], [31.5, 690.0], [31.6, 691.0], [31.7, 691.0], [31.8, 691.0], [31.9, 692.0], [32.0, 692.0], [32.1, 692.0], [32.2, 693.0], [32.3, 693.0], [32.4, 694.0], [32.5, 694.0], [32.6, 694.0], [32.7, 695.0], [32.8, 695.0], [32.9, 695.0], [33.0, 696.0], [33.1, 696.0], [33.2, 696.0], [33.3, 697.0], [33.4, 697.0], [33.5, 697.0], [33.6, 698.0], [33.7, 698.0], [33.8, 698.0], [33.9, 699.0], [34.0, 699.0], [34.1, 699.0], [34.2, 700.0], [34.3, 700.0], [34.4, 701.0], [34.5, 701.0], [34.6, 701.0], [34.7, 702.0], [34.8, 702.0], [34.9, 702.0], [35.0, 703.0], [35.1, 703.0], [35.2, 703.0], [35.3, 703.0], [35.4, 704.0], [35.5, 704.0], [35.6, 704.0], [35.7, 705.0], [35.8, 705.0], [35.9, 705.0], [36.0, 706.0], [36.1, 706.0], [36.2, 707.0], [36.3, 707.0], [36.4, 707.0], [36.5, 708.0], [36.6, 708.0], [36.7, 708.0], [36.8, 709.0], [36.9, 709.0], [37.0, 710.0], [37.1, 710.0], [37.2, 711.0], [37.3, 711.0], [37.4, 711.0], [37.5, 712.0], [37.6, 712.0], [37.7, 713.0], [37.8, 713.0], [37.9, 714.0], [38.0, 714.0], [38.1, 715.0], [38.2, 715.0], [38.3, 715.0], [38.4, 716.0], [38.5, 716.0], [38.6, 716.0], [38.7, 717.0], [38.8, 717.0], [38.9, 717.0], [39.0, 718.0], [39.1, 718.0], [39.2, 719.0], [39.3, 719.0], [39.4, 720.0], [39.5, 720.0], [39.6, 720.0], [39.7, 721.0], [39.8, 721.0], [39.9, 722.0], [40.0, 722.0], [40.1, 723.0], [40.2, 723.0], [40.3, 724.0], [40.4, 724.0], [40.5, 725.0], [40.6, 725.0], [40.7, 726.0], [40.8, 726.0], [40.9, 727.0], [41.0, 727.0], [41.1, 728.0], [41.2, 728.0], [41.3, 729.0], [41.4, 729.0], [41.5, 730.0], [41.6, 730.0], [41.7, 731.0], [41.8, 731.0], [41.9, 731.0], [42.0, 732.0], [42.1, 732.0], [42.2, 733.0], [42.3, 733.0], [42.4, 734.0], [42.5, 734.0], [42.6, 734.0], [42.7, 735.0], [42.8, 735.0], [42.9, 735.0], [43.0, 736.0], [43.1, 736.0], [43.2, 737.0], [43.3, 737.0], [43.4, 738.0], [43.5, 738.0], [43.6, 739.0], [43.7, 739.0], [43.8, 739.0], [43.9, 740.0], [44.0, 740.0], [44.1, 741.0], [44.2, 741.0], [44.3, 742.0], [44.4, 742.0], [44.5, 743.0], [44.6, 743.0], [44.7, 744.0], [44.8, 744.0], [44.9, 744.0], [45.0, 745.0], [45.1, 745.0], [45.2, 745.0], [45.3, 746.0], [45.4, 746.0], [45.5, 747.0], [45.6, 747.0], [45.7, 748.0], [45.8, 748.0], [45.9, 748.0], [46.0, 749.0], [46.1, 749.0], [46.2, 750.0], [46.3, 750.0], [46.4, 750.0], [46.5, 751.0], [46.6, 751.0], [46.7, 751.0], [46.8, 752.0], [46.9, 752.0], [47.0, 753.0], [47.1, 753.0], [47.2, 753.0], [47.3, 754.0], [47.4, 754.0], [47.5, 755.0], [47.6, 755.0], [47.7, 755.0], [47.8, 756.0], [47.9, 756.0], [48.0, 757.0], [48.1, 757.0], [48.2, 758.0], [48.3, 758.0], [48.4, 758.0], [48.5, 759.0], [48.6, 759.0], [48.7, 760.0], [48.8, 760.0], [48.9, 761.0], [49.0, 761.0], [49.1, 762.0], [49.2, 762.0], [49.3, 762.0], [49.4, 763.0], [49.5, 763.0], [49.6, 763.0], [49.7, 764.0], [49.8, 764.0], [49.9, 765.0], [50.0, 765.0], [50.1, 765.0], [50.2, 766.0], [50.3, 766.0], [50.4, 766.0], [50.5, 767.0], [50.6, 767.0], [50.7, 768.0], [50.8, 768.0], [50.9, 768.0], [51.0, 769.0], [51.1, 769.0], [51.2, 770.0], [51.3, 770.0], [51.4, 771.0], [51.5, 771.0], [51.6, 772.0], [51.7, 772.0], [51.8, 773.0], [51.9, 773.0], [52.0, 773.0], [52.1, 774.0], [52.2, 774.0], [52.3, 775.0], [52.4, 775.0], [52.5, 776.0], [52.6, 776.0], [52.7, 777.0], [52.8, 777.0], [52.9, 778.0], [53.0, 778.0], [53.1, 779.0], [53.2, 779.0], [53.3, 780.0], [53.4, 780.0], [53.5, 780.0], [53.6, 781.0], [53.7, 781.0], [53.8, 781.0], [53.9, 782.0], [54.0, 782.0], [54.1, 783.0], [54.2, 783.0], [54.3, 784.0], [54.4, 784.0], [54.5, 784.0], [54.6, 785.0], [54.7, 785.0], [54.8, 786.0], [54.9, 786.0], [55.0, 786.0], [55.1, 787.0], [55.2, 787.0], [55.3, 788.0], [55.4, 788.0], [55.5, 788.0], [55.6, 789.0], [55.7, 789.0], [55.8, 790.0], [55.9, 790.0], [56.0, 791.0], [56.1, 791.0], [56.2, 792.0], [56.3, 792.0], [56.4, 793.0], [56.5, 793.0], [56.6, 793.0], [56.7, 794.0], [56.8, 794.0], [56.9, 795.0], [57.0, 795.0], [57.1, 796.0], [57.2, 796.0], [57.3, 797.0], [57.4, 797.0], [57.5, 798.0], [57.6, 799.0], [57.7, 799.0], [57.8, 800.0], [57.9, 800.0], [58.0, 801.0], [58.1, 801.0], [58.2, 802.0], [58.3, 803.0], [58.4, 803.0], [58.5, 804.0], [58.6, 804.0], [58.7, 805.0], [58.8, 806.0], [58.9, 806.0], [59.0, 807.0], [59.1, 807.0], [59.2, 808.0], [59.3, 808.0], [59.4, 809.0], [59.5, 809.0], [59.6, 810.0], [59.7, 810.0], [59.8, 811.0], [59.9, 811.0], [60.0, 812.0], [60.1, 813.0], [60.2, 813.0], [60.3, 814.0], [60.4, 815.0], [60.5, 815.0], [60.6, 816.0], [60.7, 817.0], [60.8, 817.0], [60.9, 818.0], [61.0, 819.0], [61.1, 819.0], [61.2, 820.0], [61.3, 821.0], [61.4, 821.0], [61.5, 822.0], [61.6, 822.0], [61.7, 823.0], [61.8, 824.0], [61.9, 824.0], [62.0, 825.0], [62.1, 825.0], [62.2, 826.0], [62.3, 827.0], [62.4, 827.0], [62.5, 828.0], [62.6, 829.0], [62.7, 829.0], [62.8, 830.0], [62.9, 831.0], [63.0, 831.0], [63.1, 832.0], [63.2, 833.0], [63.3, 833.0], [63.4, 834.0], [63.5, 834.0], [63.6, 835.0], [63.7, 836.0], [63.8, 837.0], [63.9, 837.0], [64.0, 838.0], [64.1, 839.0], [64.2, 839.0], [64.3, 840.0], [64.4, 841.0], [64.5, 842.0], [64.6, 842.0], [64.7, 843.0], [64.8, 844.0], [64.9, 845.0], [65.0, 846.0], [65.1, 847.0], [65.2, 847.0], [65.3, 848.0], [65.4, 849.0], [65.5, 850.0], [65.6, 851.0], [65.7, 852.0], [65.8, 852.0], [65.9, 853.0], [66.0, 854.0], [66.1, 855.0], [66.2, 856.0], [66.3, 856.0], [66.4, 857.0], [66.5, 858.0], [66.6, 859.0], [66.7, 860.0], [66.8, 861.0], [66.9, 862.0], [67.0, 863.0], [67.1, 864.0], [67.2, 864.0], [67.3, 865.0], [67.4, 866.0], [67.5, 867.0], [67.6, 868.0], [67.7, 869.0], [67.8, 870.0], [67.9, 871.0], [68.0, 872.0], [68.1, 873.0], [68.2, 874.0], [68.3, 875.0], [68.4, 875.0], [68.5, 876.0], [68.6, 877.0], [68.7, 878.0], [68.8, 879.0], [68.9, 879.0], [69.0, 880.0], [69.1, 881.0], [69.2, 881.0], [69.3, 882.0], [69.4, 883.0], [69.5, 884.0], [69.6, 884.0], [69.7, 885.0], [69.8, 886.0], [69.9, 887.0], [70.0, 888.0], [70.1, 888.0], [70.2, 889.0], [70.3, 890.0], [70.4, 891.0], [70.5, 892.0], [70.6, 892.0], [70.7, 893.0], [70.8, 894.0], [70.9, 895.0], [71.0, 896.0], [71.1, 897.0], [71.2, 898.0], [71.3, 899.0], [71.4, 900.0], [71.5, 901.0], [71.6, 902.0], [71.7, 904.0], [71.8, 905.0], [71.9, 906.0], [72.0, 907.0], [72.1, 908.0], [72.2, 910.0], [72.3, 911.0], [72.4, 912.0], [72.5, 913.0], [72.6, 914.0], [72.7, 915.0], [72.8, 916.0], [72.9, 918.0], [73.0, 919.0], [73.1, 921.0], [73.2, 922.0], [73.3, 924.0], [73.4, 926.0], [73.5, 928.0], [73.6, 929.0], [73.7, 931.0], [73.8, 933.0], [73.9, 935.0], [74.0, 936.0], [74.1, 938.0], [74.2, 940.0], [74.3, 941.0], [74.4, 943.0], [74.5, 944.0], [74.6, 945.0], [74.7, 947.0], [74.8, 948.0], [74.9, 949.0], [75.0, 951.0], [75.1, 952.0], [75.2, 953.0], [75.3, 954.0], [75.4, 955.0], [75.5, 956.0], [75.6, 958.0], [75.7, 959.0], [75.8, 960.0], [75.9, 962.0], [76.0, 963.0], [76.1, 964.0], [76.2, 965.0], [76.3, 967.0], [76.4, 968.0], [76.5, 970.0], [76.6, 972.0], [76.7, 974.0], [76.8, 976.0], [76.9, 978.0], [77.0, 980.0], [77.1, 981.0], [77.2, 983.0], [77.3, 985.0], [77.4, 987.0], [77.5, 989.0], [77.6, 991.0], [77.7, 992.0], [77.8, 994.0], [77.9, 996.0], [78.0, 998.0], [78.1, 999.0], [78.2, 1001.0], [78.3, 1003.0], [78.4, 1005.0], [78.5, 1007.0], [78.6, 1009.0], [78.7, 1010.0], [78.8, 1012.0], [78.9, 1014.0], [79.0, 1015.0], [79.1, 1017.0], [79.2, 1018.0], [79.3, 1019.0], [79.4, 1020.0], [79.5, 1021.0], [79.6, 1022.0], [79.7, 1024.0], [79.8, 1025.0], [79.9, 1027.0], [80.0, 1029.0], [80.1, 1030.0], [80.2, 1031.0], [80.3, 1033.0], [80.4, 1034.0], [80.5, 1037.0], [80.6, 1039.0], [80.7, 1041.0], [80.8, 1042.0], [80.9, 1044.0], [81.0, 1046.0], [81.1, 1048.0], [81.2, 1050.0], [81.3, 1052.0], [81.4, 1055.0], [81.5, 1057.0], [81.6, 1058.0], [81.7, 1059.0], [81.8, 1061.0], [81.9, 1062.0], [82.0, 1064.0], [82.1, 1066.0], [82.2, 1067.0], [82.3, 1069.0], [82.4, 1072.0], [82.5, 1073.0], [82.6, 1075.0], [82.7, 1077.0], [82.8, 1080.0], [82.9, 1081.0], [83.0, 1084.0], [83.1, 1086.0], [83.2, 1087.0], [83.3, 1090.0], [83.4, 1093.0], [83.5, 1094.0], [83.6, 1096.0], [83.7, 1097.0], [83.8, 1099.0], [83.9, 1100.0], [84.0, 1101.0], [84.1, 1102.0], [84.2, 1103.0], [84.3, 1105.0], [84.4, 1106.0], [84.5, 1107.0], [84.6, 1108.0], [84.7, 1110.0], [84.8, 1112.0], [84.9, 1114.0], [85.0, 1115.0], [85.1, 1116.0], [85.2, 1117.0], [85.3, 1119.0], [85.4, 1120.0], [85.5, 1121.0], [85.6, 1122.0], [85.7, 1124.0], [85.8, 1126.0], [85.9, 1127.0], [86.0, 1129.0], [86.1, 1130.0], [86.2, 1131.0], [86.3, 1132.0], [86.4, 1133.0], [86.5, 1134.0], [86.6, 1136.0], [86.7, 1137.0], [86.8, 1138.0], [86.9, 1140.0], [87.0, 1141.0], [87.1, 1143.0], [87.2, 1144.0], [87.3, 1146.0], [87.4, 1148.0], [87.5, 1150.0], [87.6, 1152.0], [87.7, 1153.0], [87.8, 1155.0], [87.9, 1157.0], [88.0, 1159.0], [88.1, 1161.0], [88.2, 1162.0], [88.3, 1163.0], [88.4, 1165.0], [88.5, 1167.0], [88.6, 1168.0], [88.7, 1170.0], [88.8, 1172.0], [88.9, 1175.0], [89.0, 1178.0], [89.1, 1181.0], [89.2, 1182.0], [89.3, 1186.0], [89.4, 1188.0], [89.5, 1190.0], [89.6, 1193.0], [89.7, 1195.0], [89.8, 1197.0], [89.9, 1199.0], [90.0, 1201.0], [90.1, 1205.0], [90.2, 1209.0], [90.3, 1212.0], [90.4, 1215.0], [90.5, 1219.0], [90.6, 1223.0], [90.7, 1228.0], [90.8, 1232.0], [90.9, 1236.0], [91.0, 1240.0], [91.1, 1245.0], [91.2, 1250.0], [91.3, 1254.0], [91.4, 1259.0], [91.5, 1264.0], [91.6, 1268.0], [91.7, 1273.0], [91.8, 1278.0], [91.9, 1282.0], [92.0, 1287.0], [92.1, 1292.0], [92.2, 1297.0], [92.3, 1302.0], [92.4, 1308.0], [92.5, 1314.0], [92.6, 1320.0], [92.7, 1324.0], [92.8, 1328.0], [92.9, 1337.0], [93.0, 1342.0], [93.1, 1348.0], [93.2, 1355.0], [93.3, 1362.0], [93.4, 1369.0], [93.5, 1377.0], [93.6, 1383.0], [93.7, 1389.0], [93.8, 1396.0], [93.9, 1403.0], [94.0, 1409.0], [94.1, 1416.0], [94.2, 1421.0], [94.3, 1425.0], [94.4, 1430.0], [94.5, 1437.0], [94.6, 1445.0], [94.7, 1450.0], [94.8, 1457.0], [94.9, 1464.0], [95.0, 1470.0], [95.1, 1479.0], [95.2, 1488.0], [95.3, 1495.0], [95.4, 1504.0], [95.5, 1511.0], [95.6, 1518.0], [95.7, 1526.0], [95.8, 1537.0], [95.9, 1547.0], [96.0, 1554.0], [96.1, 1559.0], [96.2, 1566.0], [96.3, 1574.0], [96.4, 1586.0], [96.5, 1598.0], [96.6, 1609.0], [96.7, 1622.0], [96.8, 1634.0], [96.9, 1642.0], [97.0, 1651.0], [97.1, 1665.0], [97.2, 1677.0], [97.3, 1687.0], [97.4, 1694.0], [97.5, 1704.0], [97.6, 1716.0], [97.7, 1731.0], [97.8, 1751.0], [97.9, 1763.0], [98.0, 1774.0], [98.1, 1792.0], [98.2, 1814.0], [98.3, 1831.0], [98.4, 1855.0], [98.5, 1876.0], [98.6, 1893.0], [98.7, 1910.0], [98.8, 1948.0], [98.9, 1986.0], [99.0, 2012.0], [99.1, 2045.0], [99.2, 2088.0], [99.3, 2115.0], [99.4, 2140.0], [99.5, 2166.0], [99.6, 2214.0], [99.7, 2304.0], [99.8, 2368.0], [99.9, 2539.0], [100.0, 3305.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 25410.0, "series": [{"data": [[0.0, 725.0], [600.0, 25410.0], [700.0, 23661.0], [800.0, 13609.0], [900.0, 6740.0], [1000.0, 5731.0], [1100.0, 6051.0], [1200.0, 2347.0], [1300.0, 1600.0], [1400.0, 1495.0], [1500.0, 1170.0], [100.0, 259.0], [1600.0, 930.0], [1700.0, 703.0], [1800.0, 491.0], [1900.0, 309.0], [2000.0, 290.0], [2100.0, 328.0], [2200.0, 127.0], [2300.0, 132.0], [2400.0, 51.0], [2500.0, 64.0], [2600.0, 17.0], [2700.0, 16.0], [2800.0, 12.0], [2900.0, 6.0], [3000.0, 5.0], [3100.0, 5.0], [200.0, 222.0], [3200.0, 1.0], [3300.0, 1.0], [300.0, 168.0], [400.0, 435.0], [500.0, 6889.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 93530.0, "series": [{"data": [[0.0, 1811.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 93530.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4649.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 10.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 858.6627275630776, "minX": 1.6667046E12, "maxY": 1000.0, "series": [{"data": [[1.6667046E12, 998.4349895670338], [1.66670472E12, 858.6627275630776], [1.66670466E12, 1000.0]], "isOverall": false, "label": "Get employee by id", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 11.0, "maxY": 1375.0, "series": [{"data": [[11.0, 3.0], [12.0, 9.0], [19.0, 8.0], [22.0, 20.0], [25.0, 22.0], [26.0, 23.0], [30.0, 46.5], [31.0, 385.0], [32.0, 25.0], [41.0, 31.0], [40.0, 29.0], [43.0, 32.0], [45.0, 34.0], [46.0, 4.0], [50.0, 37.0], [54.0, 86.0], [57.0, 81.5], [62.0, 48.5], [67.0, 55.0], [64.0, 190.5], [70.0, 3.0], [75.0, 195.0], [74.0, 57.0], [73.0, 3.0], [81.0, 91.0], [87.0, 374.0], [85.0, 109.0], [90.0, 536.0], [88.0, 220.0], [95.0, 86.0], [102.0, 232.0], [101.0, 3.0], [107.0, 239.0], [106.0, 164.0], [110.0, 98.0], [109.0, 98.0], [115.0, 331.33333333333337], [114.0, 414.0], [113.0, 171.0], [123.0, 102.0], [121.0, 105.0], [120.0, 249.5], [127.0, 110.0], [124.0, 106.0], [133.0, 118.0], [129.0, 381.0], [148.0, 124.0], [147.0, 69.0], [159.0, 390.5], [156.0, 124.0], [155.0, 281.0], [153.0, 916.0], [167.0, 143.5], [165.0, 142.0], [163.0, 292.0], [161.0, 130.0], [160.0, 134.0], [175.0, 226.5], [173.0, 144.0], [171.0, 3.0], [181.0, 305.0], [177.0, 307.0], [189.0, 234.5], [188.0, 152.0], [185.0, 603.0], [184.0, 457.0], [194.0, 153.0], [207.0, 176.5], [204.0, 332.0], [210.0, 26.0], [230.0, 33.0], [227.0, 33.0], [224.0, 32.0], [239.0, 185.0], [247.0, 46.0], [245.0, 367.0], [241.0, 39.0], [253.0, 703.0], [251.0, 206.0], [259.0, 35.0], [271.0, 218.0], [270.0, 220.0], [268.0, 376.0], [263.0, 216.0], [261.0, 57.0], [257.0, 131.5], [256.0, 207.0], [287.0, 233.0], [274.0, 94.33333333333334], [277.0, 39.0], [276.0, 381.0], [283.0, 19.4], [284.0, 46.0], [275.0, 223.0], [282.0, 307.0], [281.0, 227.0], [280.0, 179.66666666666666], [279.0, 408.5], [272.0, 276.0], [302.0, 245.0], [300.0, 142.0], [298.0, 80.0], [294.0, 396.0], [293.0, 80.0], [290.0, 81.0], [288.0, 81.0], [318.0, 502.0], [317.0, 91.0], [315.0, 91.0], [312.0, 241.0], [307.0, 87.5], [335.0, 405.0], [334.0, 300.0], [330.0, 426.0], [328.0, 98.0], [327.0, 100.0], [326.0, 98.0], [325.0, 259.0], [321.0, 278.0], [320.0, 94.0], [348.0, 510.0], [347.0, 295.0], [346.0, 508.0], [341.0, 275.0], [338.0, 114.0], [367.0, 253.33333333333334], [366.0, 645.0], [365.0, 331.5], [360.0, 139.0], [359.0, 296.0], [358.0, 293.0], [356.0, 132.0], [353.0, 520.5], [377.0, 311.0], [375.0, 148.0], [370.0, 170.0], [368.0, 415.0], [399.0, 513.3333333333334], [398.0, 425.0], [396.0, 520.0], [394.0, 162.0], [393.0, 162.0], [385.0, 159.0], [384.0, 314.0], [402.0, 175.0], [414.0, 172.0], [415.0, 434.0], [412.0, 536.0], [411.0, 174.0], [407.0, 499.25], [406.0, 430.0], [405.0, 430.0], [401.0, 319.0], [400.0, 243.5], [431.0, 220.0], [429.0, 399.0], [428.0, 197.0], [425.0, 704.0], [423.0, 450.0], [421.0, 800.0], [418.0, 352.0], [416.0, 435.0], [442.0, 225.0], [435.0, 400.4], [432.0, 433.0], [461.0, 581.0], [460.0, 240.0], [458.0, 578.0], [457.0, 350.0], [455.0, 453.0], [454.0, 237.0], [452.0, 233.5], [449.0, 231.0], [448.0, 291.5], [477.0, 248.0], [476.0, 302.0], [475.0, 357.0], [474.0, 302.0], [472.0, 358.0], [470.0, 355.0], [469.0, 243.0], [468.0, 355.0], [467.0, 243.0], [495.0, 358.0], [491.0, 255.0], [490.0, 251.0], [489.0, 251.5], [487.0, 252.0], [486.0, 359.0], [481.0, 247.5], [511.0, 360.0], [509.0, 260.5], [508.0, 460.0], [504.0, 254.66666666666666], [501.0, 256.0], [500.0, 361.0], [499.0, 361.0], [496.0, 462.0], [541.0, 471.0], [543.0, 261.0], [540.0, 365.0], [538.0, 467.0], [537.0, 307.0], [519.0, 465.0], [516.0, 262.0], [515.0, 360.0], [512.0, 258.0], [526.0, 258.5], [525.0, 262.0], [520.0, 262.0], [533.0, 353.0], [532.0, 259.0], [531.0, 376.0], [528.0, 260.0], [561.0, 728.0], [575.0, 373.0], [574.0, 371.0], [571.0, 270.0], [569.0, 276.5], [559.0, 266.0], [546.0, 263.0], [545.0, 261.0], [550.0, 729.5], [547.0, 825.0], [558.0, 494.0], [557.0, 264.0], [556.0, 434.0], [555.0, 262.6666666666667], [565.0, 367.0], [563.0, 368.0], [562.0, 268.0], [560.0, 697.3333333333334], [591.0, 274.0], [607.0, 292.0], [600.0, 391.0], [583.0, 273.0], [582.0, 499.0], [581.0, 640.0], [579.0, 831.0], [578.0, 372.0], [577.0, 370.0], [576.0, 272.0], [597.0, 333.5], [594.0, 459.5], [593.0, 379.0], [589.0, 371.0], [588.0, 882.5], [587.0, 670.0], [586.0, 443.0], [637.0, 558.0], [638.0, 286.0], [635.0, 857.0], [634.0, 282.0], [632.0, 396.0], [613.0, 277.0], [610.0, 276.0], [609.0, 275.0], [623.0, 562.3333333333334], [622.0, 391.0], [621.0, 381.0], [618.0, 390.0], [616.0, 275.0], [630.0, 284.0], [629.0, 404.3333333333333], [626.0, 391.0], [625.0, 278.0], [668.0, 650.0], [670.0, 414.0], [667.0, 288.0], [665.0, 1012.0], [661.0, 555.0], [659.0, 425.0], [658.0, 289.0], [657.0, 444.0], [653.0, 555.0], [641.0, 289.0], [647.0, 405.0], [644.0, 407.0], [652.0, 346.25], [650.0, 288.0], [698.0, 375.5], [702.0, 295.0], [703.0, 468.0], [701.0, 292.5], [697.0, 352.5], [696.0, 554.0], [694.0, 613.3333333333334], [691.0, 754.0], [686.0, 349.0], [674.0, 330.3333333333333], [679.0, 657.5], [678.0, 655.5], [685.0, 424.5], [683.0, 293.0], [682.0, 558.0], [680.0, 292.0], [728.0, 467.0], [732.0, 320.0], [733.0, 392.5], [721.0, 576.0], [720.0, 306.0], [731.0, 318.0], [730.0, 319.0], [729.0, 316.0], [718.0, 455.0], [704.0, 831.0], [706.0, 294.0], [705.0, 417.0], [708.0, 540.6666666666666], [707.0, 295.0], [711.0, 300.0], [709.0, 296.0], [717.0, 452.0], [715.0, 453.0], [714.0, 373.5], [712.0, 558.0], [727.0, 313.0], [725.0, 391.5], [724.0, 650.0], [723.0, 467.0], [766.0, 409.6], [767.0, 334.0], [753.0, 333.0], [752.0, 332.0], [765.0, 477.0], [764.0, 478.0], [762.0, 675.0], [760.0, 331.5], [751.0, 559.0], [742.0, 323.0], [741.0, 323.0], [739.0, 321.0], [738.0, 469.0], [737.0, 447.5], [736.0, 370.3333333333333], [750.0, 521.0], [758.0, 451.5], [757.0, 630.0], [756.0, 331.5], [754.0, 332.0], [796.0, 421.0], [798.0, 489.0], [795.0, 383.0], [794.0, 385.0], [793.0, 487.0], [792.0, 486.0], [782.0, 470.0], [768.0, 337.0], [773.0, 340.0], [771.0, 338.5], [775.0, 743.0], [774.0, 511.0], [780.0, 530.3333333333334], [779.0, 484.0], [777.0, 340.0], [789.0, 1005.0], [788.0, 567.0], [786.0, 373.0], [785.0, 503.6666666666667], [830.0, 404.0], [831.0, 606.0], [829.0, 935.0], [825.0, 504.0], [824.0, 497.0], [806.0, 544.0], [804.0, 394.0], [802.0, 395.0], [801.0, 441.0], [800.0, 393.0], [814.0, 400.0], [812.0, 447.0], [810.0, 531.0], [808.0, 491.0], [822.0, 630.0], [821.0, 935.0], [819.0, 449.5], [816.0, 448.5], [849.0, 679.0], [862.0, 424.0], [859.0, 625.0], [858.0, 421.0], [837.0, 498.0], [836.0, 453.5], [833.0, 406.0], [832.0, 498.0], [853.0, 865.0], [852.0, 420.0], [851.0, 519.5], [848.0, 701.0], [847.0, 418.0], [846.0, 675.5], [845.0, 411.0], [844.0, 599.5], [842.0, 613.0], [841.0, 409.0], [840.0, 408.0], [894.0, 473.6], [895.0, 434.0], [893.0, 551.5], [892.0, 483.0], [889.0, 504.25], [888.0, 432.5], [878.0, 477.0], [864.0, 645.5], [867.0, 684.5], [865.0, 426.0], [871.0, 514.0], [868.0, 578.5], [877.0, 426.0], [875.0, 473.5], [874.0, 520.0], [885.0, 432.0], [884.0, 467.3333333333333], [881.0, 651.5], [880.0, 431.0], [926.0, 562.0], [927.0, 503.5], [912.0, 437.0], [925.0, 680.6666666666666], [923.0, 565.0], [922.0, 441.0], [920.0, 531.25], [909.0, 639.0], [896.0, 434.6666666666667], [900.0, 635.0], [898.0, 802.0], [903.0, 489.5], [902.0, 550.0], [907.0, 560.0], [905.0, 637.0], [904.0, 437.3333333333333], [919.0, 439.0], [916.0, 585.0], [914.0, 438.0], [913.0, 551.0], [953.0, 593.0], [958.0, 457.0], [959.0, 657.3333333333334], [944.0, 481.0], [947.0, 726.5], [945.0, 729.0], [949.0, 648.0], [948.0, 529.25], [957.0, 510.5], [955.0, 878.0], [954.0, 466.5], [952.0, 551.5], [934.0, 732.0], [933.0, 446.0], [932.0, 545.5], [929.0, 731.0], [928.0, 444.0], [943.0, 448.5], [942.0, 642.0], [941.0, 643.0], [939.0, 450.0], [938.0, 564.0], [937.0, 882.0], [951.0, 468.0], [950.0, 643.0], [989.0, 485.0], [990.0, 735.0], [987.0, 577.0], [985.0, 482.0], [983.0, 588.25], [982.0, 541.6666666666666], [979.0, 474.0], [977.0, 473.0], [975.0, 565.5], [967.0, 477.0], [965.0, 735.0], [964.0, 473.0], [963.0, 966.0], [961.0, 584.3333333333334], [960.0, 646.5], [969.0, 564.75], [1021.0, 492.0], [1023.0, 549.0], [1019.0, 491.3333333333333], [1017.0, 492.0], [1016.0, 492.5], [998.0, 492.0], [997.0, 492.0], [996.0, 495.0], [995.0, 505.3333333333333], [993.0, 483.5], [1006.0, 411.4], [1005.0, 493.0], [1004.0, 734.0], [1003.0, 493.0], [1002.0, 571.0], [1000.0, 493.0], [1014.0, 493.0], [1012.0, 575.0], [1010.0, 494.0], [1009.0, 493.0], [1084.0, 575.3333333333334], [1080.0, 497.0], [1064.0, 491.0], [1078.0, 674.5], [1076.0, 575.0], [1036.0, 486.0], [1034.0, 607.75], [1030.0, 488.0], [1024.0, 492.0], [1062.0, 491.0], [1060.0, 491.0], [1056.0, 488.3333333333333], [1054.0, 487.0], [1052.0, 528.75], [1048.0, 397.0], [1046.0, 490.0], [1044.0, 486.0], [1042.0, 727.0], [1040.0, 487.0], [1150.0, 503.0], [1144.0, 500.5], [1122.0, 477.0], [1126.0, 471.6666666666667], [1128.0, 680.0], [1130.0, 538.0], [1132.0, 537.0], [1148.0, 540.0], [1142.0, 538.0], [1140.0, 499.0], [1138.0, 536.0], [1088.0, 500.0], [1090.0, 654.0], [1094.0, 506.0], [1098.0, 508.0], [1100.0, 506.6666666666667], [1112.0, 605.0], [1110.0, 897.0], [1106.0, 504.0], [1134.0, 461.5], [1190.0, 548.0], [1210.0, 718.0], [1192.0, 718.0], [1194.0, 509.0], [1198.0, 580.6666666666666], [1196.0, 556.0], [1208.0, 474.0], [1206.0, 588.0], [1204.0, 586.0], [1200.0, 794.0], [1160.0, 466.0], [1162.0, 466.0], [1166.0, 641.0], [1182.0, 470.0], [1176.0, 508.0], [1172.0, 468.0], [1170.0, 519.3333333333334], [1168.0, 542.6666666666666], [1276.0, 495.0], [1248.0, 625.0], [1250.0, 281.5], [1252.0, 564.0], [1256.0, 748.0], [1258.0, 546.25], [1260.0, 699.0], [1262.0, 531.5], [1278.0, 576.0], [1272.0, 581.0], [1270.0, 575.0], [1268.0, 494.0], [1264.0, 661.0], [1216.0, 476.0], [1220.0, 556.5], [1222.0, 636.0], [1246.0, 735.5], [1244.0, 650.6666666666666], [1240.0, 482.0], [1236.0, 729.0], [1340.0, 500.0], [1318.0, 596.5], [1312.0, 660.0], [1314.0, 738.0], [1320.0, 659.8], [1322.0, 575.0], [1326.0, 590.0], [1324.0, 834.5], [1342.0, 498.5], [1338.0, 547.0], [1334.0, 614.5], [1332.0, 491.0], [1284.0, 678.0], [1286.0, 497.5], [1288.0, 507.0], [1290.0, 684.0], [1292.0, 583.0], [1294.0, 584.0], [1310.0, 490.0], [1306.0, 615.5], [1304.0, 671.6666666666666], [1302.0, 642.6666666666666], [1298.0, 493.0], [1396.0, 577.0], [1402.0, 550.3333333333334], [1406.0, 633.0], [1376.0, 512.0], [1378.0, 846.0], [1380.0, 637.5], [1386.0, 685.5], [1384.0, 515.0], [1388.0, 670.0], [1390.0, 490.375], [1404.0, 524.0], [1400.0, 669.0], [1394.0, 523.5], [1392.0, 522.0], [1358.0, 586.0], [1356.0, 545.0], [1354.0, 501.0], [1352.0, 648.3333333333334], [1350.0, 500.0], [1348.0, 621.0], [1346.0, 501.0], [1344.0, 578.6666666666666], [1374.0, 508.0], [1372.0, 510.0], [1370.0, 676.0], [1368.0, 675.0], [1366.0, 592.0], [1364.0, 630.0], [1362.0, 585.0], [1360.0, 545.0], [1464.0, 661.0], [1444.0, 704.0], [1466.0, 652.2], [1440.0, 530.0], [1442.0, 528.0], [1448.0, 595.5], [1450.0, 530.0], [1454.0, 808.0], [1470.0, 878.0], [1468.0, 722.6666666666666], [1462.0, 551.0], [1460.0, 632.0], [1456.0, 717.5], [1410.0, 605.5], [1408.0, 562.5], [1414.0, 525.0], [1412.0, 607.6666666666666], [1416.0, 525.0], [1418.0, 525.3333333333334], [1422.0, 608.0], [1436.0, 575.8571428571428], [1434.0, 669.0], [1432.0, 578.375], [1430.0, 525.0], [1426.0, 608.5], [1424.0, 526.0], [1502.0, 519.0], [1490.0, 625.4444444444445], [1488.0, 565.0], [1492.0, 566.0], [1494.0, 565.0], [1496.0, 726.3333333333334], [1498.0, 612.0], [1500.0, 886.0], [1504.0, 601.3333333333334], [1506.0, 614.0], [1508.0, 663.5], [1510.0, 699.5], [1514.0, 623.8333333333333], [1516.0, 627.5], [1534.0, 827.0], [1532.0, 723.3333333333334], [1530.0, 589.0], [1526.0, 652.0], [1524.0, 627.909090909091], [1522.0, 587.3333333333334], [1520.0, 751.0], [1484.0, 666.75], [1482.0, 561.0], [1480.0, 558.0], [1478.0, 650.25], [1476.0, 642.0], [1474.0, 642.0], [1472.0, 730.0], [1546.0, 602.0], [1594.0, 660.5], [1564.0, 730.5], [1562.0, 763.0], [1560.0, 673.75], [1556.0, 661.8], [1554.0, 758.75], [1552.0, 621.5], [1536.0, 676.7142857142857], [1538.0, 658.25], [1584.0, 674.0], [1550.0, 673.1666666666666], [1544.0, 968.0], [1542.0, 712.5], [1588.0, 733.5], [1586.0, 673.3333333333334], [1590.0, 756.0], [1570.0, 626.0], [1572.0, 702.0], [1574.0, 839.0], [1578.0, 698.5], [1582.0, 767.0], [1596.0, 697.0], [1614.0, 621.0], [1652.0, 650.3333333333334], [1660.0, 676.0], [1600.0, 646.8571428571429], [1630.0, 650.3], [1628.0, 735.1111111111111], [1626.0, 694.0], [1624.0, 616.0], [1622.0, 726.5], [1620.0, 617.0], [1618.0, 618.0], [1648.0, 719.3333333333334], [1612.0, 708.0], [1610.0, 647.3333333333334], [1608.0, 624.0], [1606.0, 694.75], [1604.0, 658.0], [1650.0, 746.7777777777778], [1654.0, 626.0], [1632.0, 664.0], [1634.0, 774.0], [1638.0, 726.5], [1636.0, 757.0], [1640.0, 3.0], [1642.0, 620.0], [1646.0, 766.0], [1662.0, 625.0], [1658.0, 670.6666666666666], [1656.0, 672.3333333333334], [1668.0, 620.0], [1688.0, 640.0], [1686.0, 622.25], [1684.0, 624.0], [1682.0, 677.5], [1680.0, 698.0], [1690.0, 621.0], [1692.0, 742.6666666666666], [1666.0, 773.5], [1664.0, 686.7142857142858], [1670.0, 657.1666666666666], [1674.0, 621.3333333333334], [1694.0, 724.0], [1702.0, 693.0], [1700.0, 977.0], [1698.0, 621.0], [1696.0, 626.5], [1704.0, 744.5], [1708.0, 675.5], [1706.0, 662.5], [1710.0, 707.5], [1720.0, 655.0], [1718.0, 907.0], [1716.0, 986.0], [1712.0, 1008.0], [1678.0, 678.0], [1676.0, 620.0], [1724.0, 737.5833333333334], [1722.0, 774.3333333333334], [1726.0, 673.6666666666666], [1742.0, 644.75], [1732.0, 727.3333333333334], [1730.0, 622.5], [1728.0, 699.5], [1734.0, 796.8], [1736.0, 786.25], [1740.0, 682.0], [1738.0, 768.0], [1776.0, 625.0], [1778.0, 903.0], [1780.0, 690.6666666666666], [1748.0, 724.5], [1746.0, 908.0], [1744.0, 615.0], [1752.0, 653.3499999999999], [1754.0, 654.4615384615385], [1756.0, 701.6666666666666], [1758.0, 634.75], [1770.0, 696.5], [1766.0, 689.0], [1762.0, 617.0], [1760.0, 616.0], [1772.0, 669.1666666666667], [1774.0, 723.909090909091], [1784.0, 678.5], [1782.0, 619.0], [1786.0, 729.0], [1788.0, 624.2857142857143], [1790.0, 624.5000000000001], [1804.0, 671.5714285714286], [1796.0, 608.0], [1794.0, 682.6666666666666], [1792.0, 646.5], [1800.0, 604.0], [1802.0, 600.0], [1806.0, 598.6666666666666], [1822.0, 636.0], [1808.0, 640.0], [1810.0, 650.0], [1818.0, 663.3529411764706], [1816.0, 614.6666666666667], [1814.0, 614.0], [1812.0, 676.8095238095239], [1820.0, 644.4], [1828.0, 647.3333333333334], [1826.0, 616.2], [1824.0, 697.6428571428571], [1830.0, 644.3], [1832.0, 683.5], [1834.0, 765.5], [1838.0, 615.3333333333334], [1852.0, 698.6], [1854.0, 679.1111111111112], [1840.0, 739.5], [1842.0, 645.0], [1846.0, 679.0], [1844.0, 668.5], [1848.0, 702.7142857142857], [1850.0, 734.1851851851853], [1866.0, 630.0], [1856.0, 688.0], [1858.0, 651.2222222222222], [1860.0, 660.25], [1862.0, 647.5], [1864.0, 671.8], [1868.0, 691.3157894736842], [1872.0, 712.9999999999999], [1876.0, 680.9999999999999], [1882.0, 714.0666666666666], [1880.0, 809.0], [1878.0, 716.6666666666666], [1884.0, 653.5], [1904.0, 686.1111111111111], [1870.0, 711.5714285714287], [1906.0, 686.0], [1908.0, 645.6], [1888.0, 639.75], [1918.0, 711.1111111111111], [1916.0, 703.0], [1914.0, 669.1666666666667], [1912.0, 653.7222222222222], [1910.0, 697.88], [1894.0, 657.3076923076924], [1892.0, 652.75], [1896.0, 708.0909090909092], [1898.0, 574.2], [1900.0, 707.2857142857143], [1902.0, 756.75], [1974.0, 870.5999999999999], [1952.0, 795.0], [1954.0, 824.9166666666666], [1956.0, 882.5], [1958.0, 860.8000000000001], [1960.0, 793.2083333333334], [1962.0, 849.6666666666666], [1964.0, 902.0833333333333], [1966.0, 964.6875], [1972.0, 963.6153846153846], [1970.0, 935.090909090909], [1968.0, 1020.5490196078429], [1934.0, 669.6666666666666], [1932.0, 685.9361702127658], [1930.0, 707.0909090909091], [1926.0, 738.0], [1924.0, 697.3529411764706], [1922.0, 772.0], [1920.0, 760.2], [1950.0, 847.2608695652174], [1948.0, 747.2894736842106], [1946.0, 766.5], [1944.0, 738.1], [1942.0, 729.9722222222222], [1940.0, 864.8000000000001], [1938.0, 807.0625], [1936.0, 757.388888888889], [1976.0, 1072.5], [1982.0, 1177.3283582089548], [1980.0, 1183.3333333333333], [1978.0, 1173.7428571428568], [1988.0, 1222.6666666666665], [1996.0, 729.6550218340614], [2000.0, 859.3027884552747], [1984.0, 1188.0], [1986.0, 1232.533333333333], [1990.0, 1193.8799999999997], [1998.0, 739.46992481203], [1994.0, 790.160869565217], [1992.0, 812.9239130434783], [1083.0, 497.5], [1087.0, 498.0], [1057.0, 613.25], [1061.0, 730.0], [1059.0, 768.0], [1067.0, 490.0], [1065.0, 579.0], [1071.0, 651.0], [1069.0, 576.0], [1079.0, 496.0], [1077.0, 652.0], [1075.0, 533.0], [1073.0, 554.2], [1055.0, 653.0], [1031.0, 490.0], [1027.0, 493.6666666666667], [1039.0, 571.0], [1037.0, 484.0], [1053.0, 569.6666666666666], [1049.0, 518.6666666666666], [1045.0, 487.0], [1041.0, 486.0], [1145.0, 540.0], [1127.0, 470.0], [1125.0, 511.5], [1131.0, 538.0], [1133.0, 461.0], [1143.0, 507.6], [1117.0, 478.0], [1091.0, 502.0], [1093.0, 505.5], [1095.0, 563.0], [1099.0, 507.0], [1103.0, 555.0], [1101.0, 817.5], [1115.0, 478.0], [1113.0, 680.3333333333334], [1109.0, 529.0], [1107.0, 504.5], [1135.0, 557.75], [1209.0, 569.5], [1215.0, 476.0], [1187.0, 497.6666666666667], [1185.0, 509.0], [1189.0, 624.0], [1193.0, 472.0], [1195.0, 624.0], [1213.0, 474.0], [1211.0, 1057.0], [1201.0, 546.0], [1183.0, 471.0], [1155.0, 483.0], [1157.0, 463.0], [1161.0, 466.0], [1165.0, 467.0], [1163.0, 540.0], [1167.0, 504.5], [1179.0, 470.0], [1177.0, 521.6666666666666], [1175.0, 437.0], [1173.0, 547.75], [1171.0, 481.0], [1169.0, 520.0], [1275.0, 523.3333333333334], [1271.0, 741.5], [1255.0, 568.75], [1279.0, 496.0], [1249.0, 563.5], [1251.0, 562.0], [1253.0, 532.6], [1257.0, 538.3333333333334], [1259.0, 525.1428571428571], [1261.0, 570.0], [1277.0, 496.0], [1273.0, 808.3333333333334], [1269.0, 535.5], [1247.0, 560.5], [1219.0, 495.25], [1217.0, 580.6666666666666], [1221.0, 599.0], [1223.0, 635.0], [1227.0, 557.0], [1225.0, 479.0], [1231.0, 481.0], [1229.0, 558.0], [1245.0, 649.75], [1243.0, 565.6666666666667], [1235.0, 480.5], [1233.0, 481.0], [1335.0, 1074.0], [1343.0, 499.5], [1313.0, 619.75], [1315.0, 493.0], [1319.0, 596.75], [1321.0, 687.3333333333333], [1323.0, 524.0], [1341.0, 499.3333333333333], [1339.0, 500.0], [1337.0, 514.25], [1331.0, 699.5], [1329.0, 672.5], [1311.0, 664.0], [1283.0, 499.0], [1281.0, 551.0], [1285.0, 1375.0], [1287.0, 597.0], [1289.0, 498.0], [1291.0, 582.0], [1293.0, 584.0], [1295.0, 541.5], [1309.0, 616.5], [1307.0, 576.0], [1305.0, 644.0], [1303.0, 659.0], [1301.0, 595.4], [1299.0, 555.8571428571429], [1297.0, 562.6666666666666], [1399.0, 682.0], [1381.0, 514.5], [1377.0, 512.0], [1379.0, 596.0], [1383.0, 728.5], [1387.0, 515.0], [1391.0, 522.5], [1405.0, 574.0], [1401.0, 551.0], [1393.0, 524.0], [1359.0, 525.75], [1357.0, 587.25], [1355.0, 504.0], [1347.0, 660.6666666666666], [1345.0, 500.0], [1375.0, 941.0], [1373.0, 594.0], [1371.0, 591.0], [1369.0, 591.3333333333334], [1365.0, 611.0], [1361.0, 586.0], [1461.0, 549.0], [1471.0, 877.0], [1441.0, 556.0], [1443.0, 530.5], [1449.0, 532.0], [1453.0, 607.0], [1451.0, 532.8333333333334], [1455.0, 706.0], [1463.0, 549.0], [1459.0, 637.75], [1457.0, 605.75], [1439.0, 529.75], [1415.0, 574.8], [1417.0, 607.0], [1421.0, 525.0], [1419.0, 610.0], [1423.0, 527.5], [1437.0, 529.0], [1433.0, 528.0], [1431.0, 698.0], [1425.0, 524.0], [1525.0, 671.5], [1535.0, 560.5], [1491.0, 677.3333333333334], [1495.0, 780.6666666666666], [1497.0, 595.6666666666666], [1499.0, 569.5], [1501.0, 728.6666666666666], [1505.0, 632.5], [1507.0, 571.25], [1509.0, 661.5], [1511.0, 622.5], [1515.0, 584.0], [1519.0, 673.125], [1517.0, 668.0], [1533.0, 623.8], [1529.0, 590.0], [1527.0, 718.4], [1487.0, 563.25], [1485.0, 560.0], [1481.0, 559.5], [1479.0, 558.0], [1477.0, 605.9], [1475.0, 782.75], [1473.0, 640.5], [1547.0, 709.1428571428572], [1541.0, 688.0], [1561.0, 670.3333333333334], [1557.0, 692.0], [1555.0, 675.0], [1553.0, 610.0], [1567.0, 627.0], [1537.0, 642.5], [1539.0, 689.0], [1565.0, 625.0], [1585.0, 615.0], [1551.0, 606.0], [1549.0, 693.25], [1545.0, 681.6666666666666], [1543.0, 689.0], [1589.0, 754.2], [1599.0, 650.0], [1569.0, 638.8], [1571.0, 671.3333333333334], [1573.0, 626.0], [1575.0, 659.8333333333334], [1577.0, 694.5], [1581.0, 739.0], [1579.0, 667.0], [1583.0, 624.0], [1597.0, 661.5], [1593.0, 624.5], [1591.0, 689.0], [1609.0, 646.3333333333334], [1601.0, 676.6363636363636], [1631.0, 652.0], [1629.0, 500.75], [1627.0, 617.0], [1625.0, 695.0], [1623.0, 617.0], [1621.0, 649.2857142857143], [1619.0, 619.5], [1617.0, 831.0], [1615.0, 621.0], [1613.0, 622.0], [1611.0, 651.6666666666666], [1607.0, 995.0], [1605.0, 623.0], [1603.0, 658.75], [1649.0, 682.0], [1653.0, 872.0], [1655.0, 799.0], [1663.0, 765.0], [1633.0, 616.0], [1635.0, 713.0], [1639.0, 741.75], [1641.0, 630.0], [1645.0, 656.25], [1643.0, 709.0], [1647.0, 621.0], [1661.0, 689.1666666666666], [1659.0, 625.0], [1657.0, 696.1666666666667], [1667.0, 746.25], [1721.0, 776.6666666666666], [1675.0, 613.0], [1687.0, 655.5], [1683.0, 631.8333333333334], [1681.0, 798.0], [1689.0, 622.0], [1691.0, 710.8], [1693.0, 777.5], [1695.0, 726.0], [1669.0, 639.25], [1673.0, 599.3333333333334], [1703.0, 712.0], [1701.0, 622.0], [1699.0, 633.7142857142858], [1697.0, 656.0], [1705.0, 842.0], [1709.0, 744.4285714285714], [1711.0, 696.25], [1719.0, 699.6], [1717.0, 877.5], [1715.0, 699.0], [1713.0, 727.6999999999998], [1679.0, 676.6], [1677.0, 681.6666666666666], [1725.0, 659.5], [1723.0, 683.75], [1727.0, 82.0], [1781.0, 667.5], [1777.0, 780.75], [1789.0, 623.5714285714287], [1731.0, 626.1428571428571], [1729.0, 691.0], [1733.0, 841.0], [1735.0, 784.1666666666666], [1737.0, 675.2727272727273], [1739.0, 637.0], [1743.0, 767.75], [1779.0, 685.8333333333334], [1745.0, 694.1428571428571], [1751.0, 1040.0], [1753.0, 695.0], [1755.0, 617.0], [1757.0, 705.75], [1759.0, 754.0], [1769.0, 761.0], [1767.0, 722.5], [1765.0, 702.8], [1763.0, 639.6666666666666], [1761.0, 964.0], [1771.0, 753.0], [1773.0, 689.0], [1775.0, 691.0], [1783.0, 661.6], [1785.0, 617.75], [1787.0, 684.0], [1791.0, 611.5], [1799.0, 664.6363636363636], [1847.0, 656.0], [1821.0, 729.5], [1797.0, 652.8333333333333], [1795.0, 608.5], [1793.0, 684.0], [1801.0, 603.0], [1803.0, 606.4], [1805.0, 601.0], [1807.0, 599.0], [1823.0, 639.3333333333334], [1809.0, 712.7857142857142], [1811.0, 718.8571428571429], [1819.0, 727.6], [1817.0, 663.4], [1815.0, 683.1666666666667], [1813.0, 687.75], [1827.0, 615.5], [1825.0, 655.2222222222222], [1829.0, 690.0], [1831.0, 624.1904761904763], [1833.0, 755.0], [1837.0, 687.0], [1835.0, 673.4545454545455], [1839.0, 692.25], [1853.0, 732.75], [1855.0, 686.8333333333334], [1841.0, 665.8333333333334], [1843.0, 613.75], [1849.0, 815.3333333333334], [1851.0, 794.0], [1871.0, 657.1538461538461], [1909.0, 712.1818181818182], [1859.0, 752.8], [1857.0, 722.3478260869566], [1861.0, 694.0], [1863.0, 654.3571428571429], [1865.0, 653.3076923076924], [1875.0, 768.2], [1873.0, 714.3], [1877.0, 722.5], [1881.0, 857.0], [1879.0, 817.0], [1883.0, 624.0], [1885.0, 689.8888888888889], [1887.0, 637.6666666666666], [1889.0, 670.2222222222223], [1905.0, 683.6666666666666], [1869.0, 650.5555555555555], [1907.0, 653.8181818181818], [1919.0, 751.5454545454545], [1917.0, 763.3333333333335], [1915.0, 750.55], [1913.0, 658.3333333333334], [1911.0, 660.5], [1895.0, 672.1428571428572], [1891.0, 664.6666666666666], [1897.0, 805.3333333333334], [1899.0, 663.3333333333333], [1901.0, 751.0], [1903.0, 712.7], [1971.0, 843.5], [1973.0, 928.1935483870967], [1981.0, 1229.1758241758246], [1953.0, 847.9090909090909], [1955.0, 911.6428571428573], [1957.0, 829.7647058823528], [1959.0, 839.9285714285714], [1961.0, 891.0000000000002], [1963.0, 836.8888888888889], [1965.0, 901.6341463414637], [1967.0, 1076.5625], [1969.0, 950.8333333333333], [1935.0, 683.6842105263157], [1933.0, 676.1111111111112], [1931.0, 729.6521739130434], [1929.0, 807.7142857142858], [1927.0, 685.0], [1925.0, 628.0], [1923.0, 746.4687499999999], [1921.0, 698.25], [1951.0, 802.8695652173913], [1949.0, 941.75], [1947.0, 788.1250000000001], [1941.0, 845.5], [1939.0, 860.1666666666667], [1975.0, 1022.758620689655], [1983.0, 1184.285714285714], [1979.0, 1202.3666666666668], [1977.0, 1158.0000000000002], [1987.0, 1191.0], [1993.0, 820.0454545454547], [1985.0, 1108.0], [1989.0, 1218.7499999999998], [1999.0, 772.3152073732722], [1997.0, 744.2432432432431], [1995.0, 761.5652173913043], [1991.0, 1018.3679012345676]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1978.6920000000093, 850.6861399999922]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21134.25, "minX": 1.6667046E12, "maxY": 1307998.3166666667, "series": [{"data": [[1.6667046E12, 266910.4166666667], [1.66670472E12, 163349.53333333333], [1.66670466E12, 1307998.3166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6667046E12, 34483.5], [1.66670472E12, 21134.25], [1.66670466E12, 169359.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 754.5348663898644, "minX": 1.6667046E12, "maxY": 1165.520213875848, "series": [{"data": [[1.6667046E12, 1165.520213875848], [1.66670472E12, 754.5348663898644], [1.66670466E12, 798.5392780752233]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 754.4902587032901, "minX": 1.6667046E12, "maxY": 1165.4113849765204, "series": [{"data": [[1.6667046E12, 1165.4113849765204], [1.66670472E12, 754.4902587032901], [1.66670466E12, 798.4995416561468]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6667046E12, "maxY": 0.8470918101199721, "series": [{"data": [[1.6667046E12, 0.8470918101199721], [1.66670472E12, 0.0], [1.66670466E12, 0.004344302586653622]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6667046E12, "maxY": 3305.0, "series": [{"data": [[1.6667046E12, 3305.0], [1.66670472E12, 2076.0], [1.66670466E12, 2428.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6667046E12, 1847.0], [1.66670472E12, 1106.0], [1.66670466E12, 1094.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6667046E12, 2457.7299999999996], [1.66670472E12, 1453.0599999999995], [1.66670466E12, 1438.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6667046E12, 2092.0], [1.66670472E12, 1168.0], [1.66670466E12, 1176.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6667046E12, 1.0], [1.66670472E12, 2.0], [1.66670466E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6667046E12, 1037.0], [1.66670472E12, 718.0], [1.66670466E12, 750.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 31.5, "minX": 30.0, "maxY": 2204.0, "series": [{"data": [[554.0, 1817.5], [664.0, 1092.5], [688.0, 1629.0], [690.0, 1517.0], [677.0, 1551.0], [686.0, 1549.5], [704.0, 1069.0], [757.0, 2027.0], [770.0, 1081.0], [804.0, 755.0], [822.0, 714.5], [837.0, 1190.0], [903.0, 1099.0], [916.0, 461.0], [956.0, 1262.0], [929.0, 619.0], [965.0, 641.0], [966.0, 637.0], [963.0, 806.0], [1035.0, 786.0], [1047.0, 854.0], [1065.0, 1016.5], [1044.0, 909.5], [1053.0, 1135.0], [1141.0, 815.0], [1114.0, 828.0], [1118.0, 1127.0], [1097.0, 846.0], [1154.0, 1125.0], [1158.0, 625.0], [1211.0, 703.0], [1180.0, 788.0], [1265.0, 681.0], [1229.0, 778.0], [1231.0, 971.0], [1237.0, 777.0], [1224.0, 878.0], [1218.0, 745.0], [1252.0, 1033.5], [1248.0, 827.0], [1274.0, 808.0], [1271.0, 624.0], [1277.0, 745.0], [1244.0, 815.0], [1294.0, 726.5], [1332.0, 709.0], [1290.0, 775.0], [1293.0, 924.0], [1313.0, 737.0], [1288.0, 852.0], [1285.0, 726.0], [1312.0, 759.0], [1338.0, 972.0], [1333.0, 634.0], [1325.0, 680.0], [1326.0, 715.0], [1392.0, 671.0], [1358.0, 712.0], [1360.0, 619.0], [1405.0, 724.0], [1401.0, 965.0], [1403.0, 668.0], [1457.0, 729.0], [1466.0, 612.0], [1416.0, 772.0], [1459.0, 692.0], [1468.0, 689.0], [1499.0, 613.0], [1490.0, 731.5], [1501.0, 672.0], [1476.0, 668.0], [1480.0, 738.0], [1569.0, 640.0], [1589.0, 622.0], [1542.0, 604.0], [1550.0, 621.0], [30.0, 31.5], [44.0, 637.5], [394.0, 1193.0], [411.0, 2204.0], [498.0, 1670.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[44.0, 32.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1589.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 30.0, "maxY": 2204.0, "series": [{"data": [[554.0, 1817.5], [664.0, 1092.5], [688.0, 1629.0], [690.0, 1517.0], [677.0, 1551.0], [686.0, 1549.0], [704.0, 1069.0], [757.0, 2027.0], [770.0, 1081.0], [804.0, 755.0], [822.0, 714.5], [837.0, 1190.0], [903.0, 1099.0], [916.0, 461.0], [956.0, 1262.0], [929.0, 619.0], [965.0, 641.0], [966.0, 637.0], [963.0, 806.0], [1035.0, 786.0], [1047.0, 854.0], [1065.0, 1016.5], [1044.0, 909.0], [1053.0, 1135.0], [1141.0, 815.0], [1114.0, 828.0], [1118.0, 1127.0], [1097.0, 846.0], [1154.0, 1125.0], [1158.0, 625.0], [1211.0, 703.0], [1180.0, 788.0], [1265.0, 681.0], [1229.0, 778.0], [1231.0, 971.0], [1237.0, 777.0], [1224.0, 878.0], [1218.0, 745.0], [1252.0, 1033.5], [1248.0, 827.0], [1274.0, 808.0], [1271.0, 624.0], [1277.0, 745.0], [1244.0, 815.0], [1294.0, 726.5], [1332.0, 709.0], [1290.0, 775.0], [1293.0, 924.0], [1313.0, 737.0], [1288.0, 852.0], [1285.0, 726.0], [1312.0, 759.0], [1338.0, 972.0], [1333.0, 634.0], [1325.0, 680.0], [1326.0, 715.0], [1392.0, 671.0], [1358.0, 712.0], [1360.0, 619.0], [1405.0, 724.0], [1401.0, 965.0], [1403.0, 668.0], [1457.0, 729.0], [1466.0, 612.0], [1416.0, 772.0], [1459.0, 692.0], [1468.0, 689.0], [1499.0, 613.0], [1490.0, 731.5], [1501.0, 672.0], [1476.0, 668.0], [1480.0, 738.0], [1569.0, 640.0], [1589.0, 621.0], [1542.0, 604.0], [1550.0, 621.0], [30.0, 31.5], [44.0, 637.5], [394.0, 1193.0], [411.0, 2204.0], [498.0, 1670.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[44.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1589.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 139.88333333333333, "minX": 1.6667046E12, "maxY": 1254.5166666666667, "series": [{"data": [[1.6667046E12, 272.26666666666665], [1.66670472E12, 139.88333333333333], [1.66670466E12, 1254.5166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6667046E12, "maxY": 1254.5166666666667, "series": [{"data": [[1.6667046E12, 255.43333333333334], [1.66670472E12, 156.55], [1.66670466E12, 1254.5166666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6667046E12, 0.16666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6667046E12, "maxY": 1254.5166666666667, "series": [{"data": [[1.6667046E12, 0.16666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6667046E12, 255.43333333333334], [1.66670472E12, 156.55], [1.66670466E12, 1254.5166666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.6667046E12, "maxY": 1254.5166666666667, "series": [{"data": [[1.6667046E12, 255.43333333333334], [1.66670472E12, 156.55], [1.66670466E12, 1254.5166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6667046E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

