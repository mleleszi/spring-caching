/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 3362.0, "series": [{"data": [[0.0, 2.0], [0.1, 4.0], [0.2, 5.0], [0.3, 9.0], [0.4, 33.0], [0.5, 68.0], [0.6, 89.0], [0.7, 125.0], [0.8, 147.0], [0.9, 174.0], [1.0, 212.0], [1.1, 254.0], [1.2, 278.0], [1.3, 298.0], [1.4, 332.0], [1.5, 371.0], [1.6, 408.0], [1.7, 437.0], [1.8, 466.0], [1.9, 478.0], [2.0, 490.0], [2.1, 494.0], [2.2, 502.0], [2.3, 519.0], [2.4, 532.0], [2.5, 539.0], [2.6, 543.0], [2.7, 546.0], [2.8, 547.0], [2.9, 550.0], [3.0, 552.0], [3.1, 553.0], [3.2, 554.0], [3.3, 556.0], [3.4, 558.0], [3.5, 560.0], [3.6, 561.0], [3.7, 562.0], [3.8, 563.0], [3.9, 564.0], [4.0, 566.0], [4.1, 567.0], [4.2, 568.0], [4.3, 568.0], [4.4, 569.0], [4.5, 570.0], [4.6, 571.0], [4.7, 571.0], [4.8, 572.0], [4.9, 572.0], [5.0, 573.0], [5.1, 574.0], [5.2, 574.0], [5.3, 575.0], [5.4, 576.0], [5.5, 577.0], [5.6, 578.0], [5.7, 579.0], [5.8, 580.0], [5.9, 581.0], [6.0, 582.0], [6.1, 582.0], [6.2, 583.0], [6.3, 583.0], [6.4, 584.0], [6.5, 584.0], [6.6, 585.0], [6.7, 586.0], [6.8, 587.0], [6.9, 588.0], [7.0, 588.0], [7.1, 589.0], [7.2, 590.0], [7.3, 591.0], [7.4, 591.0], [7.5, 592.0], [7.6, 593.0], [7.7, 594.0], [7.8, 595.0], [7.9, 595.0], [8.0, 596.0], [8.1, 597.0], [8.2, 597.0], [8.3, 598.0], [8.4, 598.0], [8.5, 599.0], [8.6, 599.0], [8.7, 600.0], [8.8, 600.0], [8.9, 601.0], [9.0, 601.0], [9.1, 602.0], [9.2, 603.0], [9.3, 603.0], [9.4, 604.0], [9.5, 604.0], [9.6, 605.0], [9.7, 605.0], [9.8, 606.0], [9.9, 606.0], [10.0, 607.0], [10.1, 607.0], [10.2, 608.0], [10.3, 608.0], [10.4, 609.0], [10.5, 609.0], [10.6, 610.0], [10.7, 610.0], [10.8, 610.0], [10.9, 611.0], [11.0, 611.0], [11.1, 612.0], [11.2, 612.0], [11.3, 613.0], [11.4, 613.0], [11.5, 614.0], [11.6, 614.0], [11.7, 615.0], [11.8, 615.0], [11.9, 616.0], [12.0, 616.0], [12.1, 617.0], [12.2, 617.0], [12.3, 618.0], [12.4, 618.0], [12.5, 618.0], [12.6, 619.0], [12.7, 619.0], [12.8, 620.0], [12.9, 620.0], [13.0, 620.0], [13.1, 621.0], [13.2, 621.0], [13.3, 621.0], [13.4, 622.0], [13.5, 622.0], [13.6, 622.0], [13.7, 623.0], [13.8, 623.0], [13.9, 623.0], [14.0, 624.0], [14.1, 624.0], [14.2, 624.0], [14.3, 625.0], [14.4, 625.0], [14.5, 625.0], [14.6, 626.0], [14.7, 626.0], [14.8, 627.0], [14.9, 627.0], [15.0, 628.0], [15.1, 628.0], [15.2, 629.0], [15.3, 629.0], [15.4, 630.0], [15.5, 630.0], [15.6, 631.0], [15.7, 631.0], [15.8, 632.0], [15.9, 632.0], [16.0, 632.0], [16.1, 633.0], [16.2, 633.0], [16.3, 634.0], [16.4, 634.0], [16.5, 635.0], [16.6, 635.0], [16.7, 635.0], [16.8, 636.0], [16.9, 636.0], [17.0, 637.0], [17.1, 637.0], [17.2, 637.0], [17.3, 638.0], [17.4, 638.0], [17.5, 639.0], [17.6, 639.0], [17.7, 640.0], [17.8, 640.0], [17.9, 640.0], [18.0, 641.0], [18.1, 641.0], [18.2, 642.0], [18.3, 642.0], [18.4, 643.0], [18.5, 643.0], [18.6, 643.0], [18.7, 644.0], [18.8, 644.0], [18.9, 644.0], [19.0, 645.0], [19.1, 645.0], [19.2, 646.0], [19.3, 646.0], [19.4, 647.0], [19.5, 647.0], [19.6, 647.0], [19.7, 648.0], [19.8, 648.0], [19.9, 649.0], [20.0, 649.0], [20.1, 650.0], [20.2, 650.0], [20.3, 651.0], [20.4, 651.0], [20.5, 652.0], [20.6, 652.0], [20.7, 653.0], [20.8, 653.0], [20.9, 653.0], [21.0, 654.0], [21.1, 654.0], [21.2, 655.0], [21.3, 655.0], [21.4, 655.0], [21.5, 656.0], [21.6, 656.0], [21.7, 657.0], [21.8, 657.0], [21.9, 658.0], [22.0, 658.0], [22.1, 658.0], [22.2, 659.0], [22.3, 659.0], [22.4, 660.0], [22.5, 660.0], [22.6, 661.0], [22.7, 661.0], [22.8, 661.0], [22.9, 662.0], [23.0, 662.0], [23.1, 663.0], [23.2, 663.0], [23.3, 663.0], [23.4, 663.0], [23.5, 664.0], [23.6, 664.0], [23.7, 664.0], [23.8, 665.0], [23.9, 665.0], [24.0, 665.0], [24.1, 666.0], [24.2, 666.0], [24.3, 666.0], [24.4, 667.0], [24.5, 667.0], [24.6, 667.0], [24.7, 668.0], [24.8, 668.0], [24.9, 669.0], [25.0, 669.0], [25.1, 669.0], [25.2, 670.0], [25.3, 670.0], [25.4, 671.0], [25.5, 671.0], [25.6, 671.0], [25.7, 672.0], [25.8, 672.0], [25.9, 672.0], [26.0, 673.0], [26.1, 673.0], [26.2, 673.0], [26.3, 674.0], [26.4, 674.0], [26.5, 675.0], [26.6, 675.0], [26.7, 675.0], [26.8, 676.0], [26.9, 676.0], [27.0, 677.0], [27.1, 677.0], [27.2, 677.0], [27.3, 678.0], [27.4, 678.0], [27.5, 678.0], [27.6, 679.0], [27.7, 679.0], [27.8, 680.0], [27.9, 680.0], [28.0, 680.0], [28.1, 681.0], [28.2, 681.0], [28.3, 682.0], [28.4, 682.0], [28.5, 683.0], [28.6, 683.0], [28.7, 683.0], [28.8, 684.0], [28.9, 684.0], [29.0, 684.0], [29.1, 685.0], [29.2, 685.0], [29.3, 686.0], [29.4, 686.0], [29.5, 686.0], [29.6, 687.0], [29.7, 687.0], [29.8, 688.0], [29.9, 688.0], [30.0, 688.0], [30.1, 689.0], [30.2, 689.0], [30.3, 689.0], [30.4, 690.0], [30.5, 690.0], [30.6, 690.0], [30.7, 691.0], [30.8, 691.0], [30.9, 691.0], [31.0, 692.0], [31.1, 692.0], [31.2, 693.0], [31.3, 693.0], [31.4, 693.0], [31.5, 694.0], [31.6, 694.0], [31.7, 695.0], [31.8, 695.0], [31.9, 695.0], [32.0, 696.0], [32.1, 696.0], [32.2, 696.0], [32.3, 697.0], [32.4, 697.0], [32.5, 697.0], [32.6, 698.0], [32.7, 698.0], [32.8, 698.0], [32.9, 699.0], [33.0, 699.0], [33.1, 700.0], [33.2, 700.0], [33.3, 700.0], [33.4, 701.0], [33.5, 701.0], [33.6, 701.0], [33.7, 702.0], [33.8, 702.0], [33.9, 702.0], [34.0, 703.0], [34.1, 703.0], [34.2, 703.0], [34.3, 704.0], [34.4, 704.0], [34.5, 704.0], [34.6, 705.0], [34.7, 705.0], [34.8, 705.0], [34.9, 706.0], [35.0, 706.0], [35.1, 706.0], [35.2, 707.0], [35.3, 707.0], [35.4, 707.0], [35.5, 708.0], [35.6, 708.0], [35.7, 708.0], [35.8, 709.0], [35.9, 709.0], [36.0, 710.0], [36.1, 710.0], [36.2, 710.0], [36.3, 711.0], [36.4, 711.0], [36.5, 711.0], [36.6, 712.0], [36.7, 712.0], [36.8, 713.0], [36.9, 713.0], [37.0, 714.0], [37.1, 714.0], [37.2, 715.0], [37.3, 715.0], [37.4, 716.0], [37.5, 716.0], [37.6, 716.0], [37.7, 717.0], [37.8, 717.0], [37.9, 717.0], [38.0, 718.0], [38.1, 718.0], [38.2, 719.0], [38.3, 719.0], [38.4, 719.0], [38.5, 720.0], [38.6, 720.0], [38.7, 721.0], [38.8, 721.0], [38.9, 721.0], [39.0, 722.0], [39.1, 722.0], [39.2, 723.0], [39.3, 723.0], [39.4, 724.0], [39.5, 724.0], [39.6, 725.0], [39.7, 726.0], [39.8, 726.0], [39.9, 727.0], [40.0, 727.0], [40.1, 727.0], [40.2, 728.0], [40.3, 728.0], [40.4, 729.0], [40.5, 729.0], [40.6, 730.0], [40.7, 730.0], [40.8, 731.0], [40.9, 731.0], [41.0, 732.0], [41.1, 732.0], [41.2, 733.0], [41.3, 733.0], [41.4, 733.0], [41.5, 734.0], [41.6, 734.0], [41.7, 735.0], [41.8, 735.0], [41.9, 736.0], [42.0, 736.0], [42.1, 736.0], [42.2, 737.0], [42.3, 737.0], [42.4, 738.0], [42.5, 738.0], [42.6, 739.0], [42.7, 739.0], [42.8, 740.0], [42.9, 740.0], [43.0, 741.0], [43.1, 741.0], [43.2, 742.0], [43.3, 742.0], [43.4, 743.0], [43.5, 743.0], [43.6, 743.0], [43.7, 744.0], [43.8, 744.0], [43.9, 745.0], [44.0, 745.0], [44.1, 746.0], [44.2, 746.0], [44.3, 746.0], [44.4, 747.0], [44.5, 747.0], [44.6, 748.0], [44.7, 748.0], [44.8, 748.0], [44.9, 749.0], [45.0, 749.0], [45.1, 750.0], [45.2, 750.0], [45.3, 750.0], [45.4, 751.0], [45.5, 751.0], [45.6, 752.0], [45.7, 752.0], [45.8, 752.0], [45.9, 753.0], [46.0, 753.0], [46.1, 753.0], [46.2, 754.0], [46.3, 754.0], [46.4, 755.0], [46.5, 755.0], [46.6, 756.0], [46.7, 756.0], [46.8, 756.0], [46.9, 757.0], [47.0, 757.0], [47.1, 758.0], [47.2, 758.0], [47.3, 759.0], [47.4, 759.0], [47.5, 759.0], [47.6, 760.0], [47.7, 761.0], [47.8, 761.0], [47.9, 761.0], [48.0, 762.0], [48.1, 762.0], [48.2, 763.0], [48.3, 763.0], [48.4, 763.0], [48.5, 764.0], [48.6, 764.0], [48.7, 764.0], [48.8, 765.0], [48.9, 765.0], [49.0, 766.0], [49.1, 766.0], [49.2, 766.0], [49.3, 767.0], [49.4, 767.0], [49.5, 768.0], [49.6, 768.0], [49.7, 769.0], [49.8, 769.0], [49.9, 770.0], [50.0, 770.0], [50.1, 770.0], [50.2, 771.0], [50.3, 771.0], [50.4, 772.0], [50.5, 772.0], [50.6, 773.0], [50.7, 773.0], [50.8, 774.0], [50.9, 774.0], [51.0, 775.0], [51.1, 775.0], [51.2, 776.0], [51.3, 776.0], [51.4, 777.0], [51.5, 777.0], [51.6, 777.0], [51.7, 778.0], [51.8, 779.0], [51.9, 779.0], [52.0, 780.0], [52.1, 780.0], [52.2, 780.0], [52.3, 781.0], [52.4, 781.0], [52.5, 782.0], [52.6, 782.0], [52.7, 783.0], [52.8, 783.0], [52.9, 783.0], [53.0, 784.0], [53.1, 784.0], [53.2, 785.0], [53.3, 785.0], [53.4, 785.0], [53.5, 786.0], [53.6, 786.0], [53.7, 787.0], [53.8, 787.0], [53.9, 788.0], [54.0, 788.0], [54.1, 789.0], [54.2, 789.0], [54.3, 790.0], [54.4, 790.0], [54.5, 790.0], [54.6, 791.0], [54.7, 791.0], [54.8, 792.0], [54.9, 792.0], [55.0, 793.0], [55.1, 793.0], [55.2, 794.0], [55.3, 794.0], [55.4, 795.0], [55.5, 795.0], [55.6, 796.0], [55.7, 796.0], [55.8, 797.0], [55.9, 797.0], [56.0, 798.0], [56.1, 798.0], [56.2, 799.0], [56.3, 800.0], [56.4, 800.0], [56.5, 801.0], [56.6, 801.0], [56.7, 802.0], [56.8, 803.0], [56.9, 803.0], [57.0, 804.0], [57.1, 805.0], [57.2, 805.0], [57.3, 806.0], [57.4, 807.0], [57.5, 807.0], [57.6, 808.0], [57.7, 808.0], [57.8, 809.0], [57.9, 809.0], [58.0, 810.0], [58.1, 810.0], [58.2, 811.0], [58.3, 811.0], [58.4, 812.0], [58.5, 812.0], [58.6, 813.0], [58.7, 814.0], [58.8, 814.0], [58.9, 815.0], [59.0, 816.0], [59.1, 816.0], [59.2, 817.0], [59.3, 818.0], [59.4, 818.0], [59.5, 819.0], [59.6, 820.0], [59.7, 820.0], [59.8, 821.0], [59.9, 822.0], [60.0, 822.0], [60.1, 823.0], [60.2, 823.0], [60.3, 824.0], [60.4, 824.0], [60.5, 825.0], [60.6, 826.0], [60.7, 826.0], [60.8, 827.0], [60.9, 828.0], [61.0, 828.0], [61.1, 829.0], [61.2, 829.0], [61.3, 830.0], [61.4, 831.0], [61.5, 831.0], [61.6, 832.0], [61.7, 833.0], [61.8, 833.0], [61.9, 834.0], [62.0, 834.0], [62.1, 835.0], [62.2, 835.0], [62.3, 836.0], [62.4, 837.0], [62.5, 838.0], [62.6, 838.0], [62.7, 839.0], [62.8, 840.0], [62.9, 841.0], [63.0, 841.0], [63.1, 842.0], [63.2, 843.0], [63.3, 844.0], [63.4, 844.0], [63.5, 845.0], [63.6, 846.0], [63.7, 847.0], [63.8, 848.0], [63.9, 848.0], [64.0, 849.0], [64.1, 850.0], [64.2, 851.0], [64.3, 851.0], [64.4, 852.0], [64.5, 853.0], [64.6, 853.0], [64.7, 854.0], [64.8, 855.0], [64.9, 856.0], [65.0, 857.0], [65.1, 857.0], [65.2, 858.0], [65.3, 859.0], [65.4, 860.0], [65.5, 861.0], [65.6, 862.0], [65.7, 863.0], [65.8, 863.0], [65.9, 864.0], [66.0, 865.0], [66.1, 866.0], [66.2, 867.0], [66.3, 868.0], [66.4, 869.0], [66.5, 870.0], [66.6, 870.0], [66.7, 871.0], [66.8, 872.0], [66.9, 873.0], [67.0, 874.0], [67.1, 875.0], [67.2, 876.0], [67.3, 876.0], [67.4, 877.0], [67.5, 878.0], [67.6, 879.0], [67.7, 879.0], [67.8, 880.0], [67.9, 881.0], [68.0, 881.0], [68.1, 882.0], [68.2, 883.0], [68.3, 884.0], [68.4, 884.0], [68.5, 885.0], [68.6, 886.0], [68.7, 886.0], [68.8, 887.0], [68.9, 888.0], [69.0, 888.0], [69.1, 889.0], [69.2, 890.0], [69.3, 891.0], [69.4, 891.0], [69.5, 892.0], [69.6, 893.0], [69.7, 894.0], [69.8, 895.0], [69.9, 896.0], [70.0, 897.0], [70.1, 898.0], [70.2, 898.0], [70.3, 899.0], [70.4, 900.0], [70.5, 902.0], [70.6, 903.0], [70.7, 904.0], [70.8, 906.0], [70.9, 907.0], [71.0, 908.0], [71.1, 910.0], [71.2, 911.0], [71.3, 912.0], [71.4, 913.0], [71.5, 914.0], [71.6, 915.0], [71.7, 916.0], [71.8, 917.0], [71.9, 919.0], [72.0, 920.0], [72.1, 921.0], [72.2, 923.0], [72.3, 924.0], [72.4, 926.0], [72.5, 927.0], [72.6, 929.0], [72.7, 931.0], [72.8, 932.0], [72.9, 934.0], [73.0, 936.0], [73.1, 937.0], [73.2, 938.0], [73.3, 940.0], [73.4, 941.0], [73.5, 943.0], [73.6, 944.0], [73.7, 945.0], [73.8, 946.0], [73.9, 948.0], [74.0, 949.0], [74.1, 951.0], [74.2, 952.0], [74.3, 953.0], [74.4, 954.0], [74.5, 955.0], [74.6, 956.0], [74.7, 957.0], [74.8, 959.0], [74.9, 960.0], [75.0, 961.0], [75.1, 962.0], [75.2, 963.0], [75.3, 965.0], [75.4, 966.0], [75.5, 967.0], [75.6, 968.0], [75.7, 969.0], [75.8, 971.0], [75.9, 973.0], [76.0, 975.0], [76.1, 977.0], [76.2, 978.0], [76.3, 980.0], [76.4, 981.0], [76.5, 983.0], [76.6, 985.0], [76.7, 987.0], [76.8, 988.0], [76.9, 990.0], [77.0, 991.0], [77.1, 993.0], [77.2, 995.0], [77.3, 996.0], [77.4, 998.0], [77.5, 1000.0], [77.6, 1001.0], [77.7, 1002.0], [77.8, 1004.0], [77.9, 1006.0], [78.0, 1008.0], [78.1, 1010.0], [78.2, 1011.0], [78.3, 1012.0], [78.4, 1014.0], [78.5, 1016.0], [78.6, 1018.0], [78.7, 1019.0], [78.8, 1020.0], [78.9, 1021.0], [79.0, 1023.0], [79.1, 1024.0], [79.2, 1025.0], [79.3, 1027.0], [79.4, 1029.0], [79.5, 1030.0], [79.6, 1031.0], [79.7, 1033.0], [79.8, 1034.0], [79.9, 1036.0], [80.0, 1037.0], [80.1, 1039.0], [80.2, 1041.0], [80.3, 1043.0], [80.4, 1045.0], [80.5, 1047.0], [80.6, 1049.0], [80.7, 1051.0], [80.8, 1053.0], [80.9, 1055.0], [81.0, 1057.0], [81.1, 1059.0], [81.2, 1060.0], [81.3, 1062.0], [81.4, 1063.0], [81.5, 1065.0], [81.6, 1066.0], [81.7, 1068.0], [81.8, 1070.0], [81.9, 1072.0], [82.0, 1074.0], [82.1, 1076.0], [82.2, 1078.0], [82.3, 1080.0], [82.4, 1082.0], [82.5, 1084.0], [82.6, 1087.0], [82.7, 1089.0], [82.8, 1092.0], [82.9, 1094.0], [83.0, 1096.0], [83.1, 1097.0], [83.2, 1099.0], [83.3, 1100.0], [83.4, 1101.0], [83.5, 1102.0], [83.6, 1104.0], [83.7, 1105.0], [83.8, 1106.0], [83.9, 1108.0], [84.0, 1109.0], [84.1, 1110.0], [84.2, 1112.0], [84.3, 1114.0], [84.4, 1116.0], [84.5, 1117.0], [84.6, 1118.0], [84.7, 1120.0], [84.8, 1121.0], [84.9, 1122.0], [85.0, 1123.0], [85.1, 1125.0], [85.2, 1127.0], [85.3, 1128.0], [85.4, 1129.0], [85.5, 1131.0], [85.6, 1132.0], [85.7, 1133.0], [85.8, 1135.0], [85.9, 1136.0], [86.0, 1137.0], [86.1, 1139.0], [86.2, 1140.0], [86.3, 1142.0], [86.4, 1143.0], [86.5, 1145.0], [86.6, 1146.0], [86.7, 1148.0], [86.8, 1150.0], [86.9, 1152.0], [87.0, 1154.0], [87.1, 1156.0], [87.2, 1158.0], [87.3, 1160.0], [87.4, 1161.0], [87.5, 1163.0], [87.6, 1164.0], [87.7, 1166.0], [87.8, 1168.0], [87.9, 1169.0], [88.0, 1171.0], [88.1, 1173.0], [88.2, 1176.0], [88.3, 1178.0], [88.4, 1180.0], [88.5, 1182.0], [88.6, 1185.0], [88.7, 1187.0], [88.8, 1190.0], [88.9, 1193.0], [89.0, 1195.0], [89.1, 1196.0], [89.2, 1198.0], [89.3, 1200.0], [89.4, 1202.0], [89.5, 1205.0], [89.6, 1208.0], [89.7, 1211.0], [89.8, 1214.0], [89.9, 1217.0], [90.0, 1221.0], [90.1, 1224.0], [90.2, 1228.0], [90.3, 1231.0], [90.4, 1236.0], [90.5, 1239.0], [90.6, 1243.0], [90.7, 1247.0], [90.8, 1251.0], [90.9, 1255.0], [91.0, 1259.0], [91.1, 1263.0], [91.2, 1267.0], [91.3, 1270.0], [91.4, 1275.0], [91.5, 1278.0], [91.6, 1282.0], [91.7, 1288.0], [91.8, 1292.0], [91.9, 1297.0], [92.0, 1301.0], [92.1, 1307.0], [92.2, 1313.0], [92.3, 1318.0], [92.4, 1323.0], [92.5, 1327.0], [92.6, 1332.0], [92.7, 1338.0], [92.8, 1343.0], [92.9, 1351.0], [93.0, 1356.0], [93.1, 1363.0], [93.2, 1369.0], [93.3, 1376.0], [93.4, 1382.0], [93.5, 1387.0], [93.6, 1394.0], [93.7, 1402.0], [93.8, 1409.0], [93.9, 1415.0], [94.0, 1422.0], [94.1, 1427.0], [94.2, 1433.0], [94.3, 1442.0], [94.4, 1448.0], [94.5, 1454.0], [94.6, 1461.0], [94.7, 1467.0], [94.8, 1474.0], [94.9, 1482.0], [95.0, 1490.0], [95.1, 1495.0], [95.2, 1503.0], [95.3, 1509.0], [95.4, 1516.0], [95.5, 1523.0], [95.6, 1530.0], [95.7, 1541.0], [95.8, 1549.0], [95.9, 1555.0], [96.0, 1561.0], [96.1, 1566.0], [96.2, 1574.0], [96.3, 1583.0], [96.4, 1596.0], [96.5, 1605.0], [96.6, 1614.0], [96.7, 1626.0], [96.8, 1636.0], [96.9, 1642.0], [97.0, 1647.0], [97.1, 1657.0], [97.2, 1669.0], [97.3, 1684.0], [97.4, 1695.0], [97.5, 1706.0], [97.6, 1716.0], [97.7, 1731.0], [97.8, 1751.0], [97.9, 1763.0], [98.0, 1776.0], [98.1, 1795.0], [98.2, 1819.0], [98.3, 1830.0], [98.4, 1851.0], [98.5, 1876.0], [98.6, 1895.0], [98.7, 1920.0], [98.8, 1962.0], [98.9, 1995.0], [99.0, 2023.0], [99.1, 2061.0], [99.2, 2106.0], [99.3, 2127.0], [99.4, 2149.0], [99.5, 2182.0], [99.6, 2234.0], [99.7, 2315.0], [99.8, 2374.0], [99.9, 2552.0], [100.0, 3362.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24448.0, "series": [{"data": [[0.0, 632.0], [600.0, 24448.0], [700.0, 23207.0], [800.0, 14019.0], [900.0, 7162.0], [1000.0, 5763.0], [1100.0, 6045.0], [1200.0, 2680.0], [1300.0, 1710.0], [1400.0, 1478.0], [1500.0, 1291.0], [100.0, 341.0], [1600.0, 1002.0], [1700.0, 674.0], [1800.0, 503.0], [1900.0, 294.0], [2000.0, 274.0], [2100.0, 347.0], [2300.0, 142.0], [2200.0, 144.0], [2400.0, 46.0], [2500.0, 63.0], [2600.0, 27.0], [2700.0, 21.0], [2800.0, 14.0], [2900.0, 1.0], [3000.0, 4.0], [3100.0, 4.0], [200.0, 332.0], [3300.0, 1.0], [300.0, 267.0], [400.0, 591.0], [500.0, 6473.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 92981.0, "series": [{"data": [[0.0, 2161.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 92981.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4842.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 876.5354232575961, "minX": 1.6667046E12, "maxY": 1000.0, "series": [{"data": [[1.6667046E12, 999.0217031694593], [1.66670472E12, 876.5354232575961], [1.66670466E12, 1000.0]], "isOverall": false, "label": "Change employee name", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 1321.5357142857147, "series": [{"data": [[2.0, 2.0], [3.0, 3.0], [4.0, 3.0], [5.0, 5.0], [7.0, 8.75], [8.0, 24.0], [9.0, 18.0], [10.0, 8.0], [13.0, 10.0], [14.0, 10.5], [15.0, 15.0], [18.0, 43.0], [19.0, 41.333333333333336], [20.0, 291.0], [21.0, 26.0], [23.0, 22.0], [24.0, 56.0], [25.0, 24.0], [27.0, 350.0], [28.0, 53.0], [30.0, 164.66666666666666], [31.0, 28.0], [33.0, 28.0], [32.0, 57.5], [35.0, 4.0], [34.0, 28.0], [37.0, 64.0], [36.0, 58.0], [38.0, 5.0], [41.0, 423.0], [43.0, 151.5], [42.0, 38.0], [45.0, 282.6666666666667], [47.0, 37.5], [48.0, 295.0], [51.0, 38.0], [50.0, 6.0], [55.0, 41.0], [54.0, 40.0], [57.0, 47.5], [56.0, 45.0], [59.0, 46.0], [58.0, 318.0], [61.0, 106.0], [63.0, 55.0], [62.0, 170.0], [66.0, 30.5], [71.0, 57.0], [70.0, 55.0], [74.0, 128.5], [73.0, 270.5], [72.0, 56.0], [79.0, 205.0], [78.0, 62.0], [77.0, 3.0], [76.0, 4.0], [83.0, 67.0], [82.0, 263.0], [81.0, 64.0], [87.0, 186.5], [86.0, 67.0], [85.0, 172.0], [84.0, 4.0], [91.0, 155.0], [89.0, 41.0], [88.0, 70.66666666666667], [95.0, 83.66666666666667], [92.0, 154.5], [99.0, 321.5], [97.0, 90.0], [96.0, 313.5], [103.0, 94.0], [102.0, 316.5], [101.0, 93.0], [106.0, 97.0], [104.0, 94.0], [110.0, 3.0], [113.0, 100.0], [119.0, 251.0], [118.0, 52.5], [117.0, 250.0], [116.0, 102.0], [122.0, 4.0], [121.0, 103.66666666666667], [126.0, 380.5], [125.0, 184.5], [124.0, 109.0], [133.0, 119.0], [132.0, 197.0], [131.0, 148.8], [143.0, 281.0], [142.0, 124.0], [141.0, 4.5], [140.0, 279.0], [138.0, 338.8], [151.0, 556.0], [150.0, 133.0], [149.0, 556.0], [148.0, 126.0], [147.0, 125.0], [146.0, 6.0], [145.0, 176.33333333333334], [159.0, 136.25], [154.0, 133.0], [153.0, 70.5], [167.0, 73.5], [165.0, 143.0], [163.0, 48.333333333333336], [162.0, 448.0], [160.0, 136.5], [173.0, 147.0], [172.0, 227.0], [171.0, 455.0], [170.0, 282.66666666666663], [169.0, 295.0], [168.0, 143.5], [182.0, 75.5], [180.0, 284.5], [178.0, 312.0], [177.0, 153.0], [191.0, 271.5], [190.0, 161.0], [188.0, 298.8333333333333], [186.0, 329.0], [184.0, 158.5], [199.0, 472.0], [198.0, 220.0], [197.0, 6.0], [196.0, 4.0], [195.0, 158.0], [194.0, 213.33333333333334], [193.0, 321.0], [192.0, 3.0], [205.0, 96.5], [204.0, 176.16666666666669], [203.0, 66.0], [202.0, 15.0], [201.0, 243.5], [200.0, 160.0], [215.0, 33.0], [214.0, 174.0], [213.0, 339.0], [212.0, 27.5], [209.0, 96.0], [223.0, 179.0], [222.0, 174.0], [221.0, 179.0], [220.0, 182.0], [219.0, 32.0], [217.0, 174.0], [216.0, 175.5], [231.0, 85.0], [230.0, 475.0], [227.0, 33.0], [225.0, 184.0], [224.0, 33.0], [239.0, 116.0], [237.0, 201.66666666666666], [234.0, 190.0], [233.0, 190.66666666666666], [247.0, 207.0], [244.0, 151.0], [243.0, 203.0], [242.0, 197.0], [241.0, 275.5], [255.0, 52.0], [254.0, 55.0], [253.0, 208.0], [252.0, 209.0], [251.0, 53.0], [249.0, 207.0], [248.0, 266.5], [269.0, 67.0], [259.0, 298.0], [267.0, 325.0], [266.0, 217.0], [265.0, 63.5], [264.0, 216.0], [263.0, 378.0], [262.0, 273.0], [258.0, 215.0], [286.0, 234.0], [282.0, 58.0], [274.0, 44.5], [272.0, 223.5], [275.0, 589.0], [277.0, 73.0], [276.0, 354.75], [283.0, 75.28571428571429], [287.0, 245.0], [285.0, 388.0], [284.0, 721.0], [281.0, 436.5], [280.0, 492.0], [291.0, 159.83333333333334], [301.0, 88.0], [300.0, 294.0], [290.0, 495.0], [288.0, 235.0], [298.0, 167.0], [297.0, 84.0], [296.0, 81.0], [295.0, 82.0], [294.0, 82.0], [293.0, 85.0], [292.0, 136.33333333333334], [318.0, 284.0], [319.0, 93.0], [316.0, 252.0], [314.0, 165.5], [312.0, 247.5], [309.0, 245.0], [308.0, 600.0], [307.0, 621.0], [305.0, 171.5], [323.0, 99.0], [334.0, 443.4], [335.0, 450.66666666666663], [332.0, 214.0], [330.0, 499.0], [329.0, 101.0], [326.0, 427.0], [324.0, 98.0], [322.0, 338.0], [320.0, 250.5], [339.0, 114.0], [351.0, 295.0], [350.0, 350.0], [346.0, 204.5], [345.0, 207.5], [344.0, 199.5], [343.0, 287.0], [342.0, 275.0], [341.0, 451.0], [338.0, 610.0], [337.0, 116.0], [336.0, 388.0], [355.0, 135.0], [365.0, 306.0], [364.0, 305.0], [363.0, 307.0], [362.0, 287.3333333333333], [360.0, 244.33333333333334], [358.0, 354.0], [357.0, 274.5], [354.0, 303.0], [353.0, 302.0], [352.0, 411.5], [381.0, 424.0], [380.0, 154.0], [371.0, 309.0], [370.0, 148.0], [379.0, 234.5], [378.0, 149.0], [377.0, 287.0], [376.0, 311.5], [375.0, 257.5], [374.0, 308.0], [373.0, 334.5], [372.0, 229.0], [397.0, 315.0], [399.0, 391.0], [396.0, 164.0], [395.0, 167.0], [394.0, 163.0], [393.0, 240.75], [388.0, 342.5], [387.0, 299.0], [386.0, 453.33333333333337], [384.0, 244.66666666666666], [414.0, 189.0], [415.0, 325.3333333333333], [412.0, 450.75], [411.0, 178.0], [410.0, 368.75], [409.0, 481.0], [406.0, 678.0], [404.0, 184.0], [403.0, 192.0], [402.0, 328.25], [401.0, 608.0], [419.0, 436.0], [430.0, 536.0], [429.0, 190.0], [417.0, 347.0], [416.0, 253.0], [427.0, 209.0], [426.0, 431.0], [424.0, 193.0], [423.0, 431.0], [422.0, 278.5], [421.0, 273.5], [420.0, 355.0], [435.0, 416.3333333333333], [446.0, 314.0], [445.0, 340.5], [443.0, 334.5], [441.0, 377.0], [439.0, 221.0], [438.0, 389.25], [436.0, 441.0], [433.0, 216.0], [432.0, 212.5], [462.0, 585.0], [461.0, 242.0], [458.0, 413.0], [457.0, 240.0], [456.0, 408.0], [453.0, 289.0], [452.0, 463.75], [449.0, 404.0], [448.0, 292.5], [476.0, 357.0], [478.0, 357.0], [479.0, 358.0], [477.0, 250.0], [474.0, 246.0], [473.0, 245.0], [471.0, 245.0], [470.0, 246.0], [467.0, 280.3333333333333], [466.0, 385.6666666666667], [465.0, 241.0], [464.0, 279.0], [493.0, 250.66666666666666], [495.0, 306.0], [492.0, 358.0], [491.0, 728.0], [490.0, 308.0], [489.0, 475.25], [485.0, 306.0], [483.0, 357.0], [482.0, 357.0], [510.0, 294.0], [511.0, 365.5], [508.0, 260.0], [498.0, 362.0], [497.0, 252.0], [496.0, 360.5], [506.0, 261.0], [505.0, 606.0], [504.0, 424.0], [503.0, 255.0], [502.0, 358.5], [501.0, 309.0], [500.0, 256.0], [530.0, 319.8], [540.0, 254.85714285714286], [543.0, 362.0], [528.0, 353.0], [539.0, 357.0], [538.0, 356.0], [537.0, 263.0], [519.0, 269.0], [518.0, 264.0], [517.0, 269.0], [516.0, 499.0], [515.0, 263.0], [514.0, 466.0], [525.0, 261.0], [524.0, 314.25], [522.0, 263.0], [521.0, 428.5], [535.0, 401.0], [532.0, 306.5], [531.0, 261.0], [571.0, 320.0], [561.0, 453.3333333333333], [574.0, 370.5], [575.0, 272.0], [560.0, 269.0], [572.0, 371.0], [568.0, 560.0], [551.0, 368.0], [549.0, 634.0], [548.0, 363.0], [546.0, 363.0], [545.0, 367.0], [544.0, 263.0], [558.0, 420.0], [557.0, 274.6666666666667], [556.0, 497.3333333333333], [553.0, 314.3333333333333], [552.0, 405.3333333333333], [566.0, 371.0], [564.0, 435.5], [562.0, 368.0], [604.0, 327.0], [607.0, 375.0], [592.0, 498.0], [595.0, 378.0], [593.0, 643.0], [597.0, 393.6666666666667], [596.0, 641.0], [606.0, 326.0], [605.0, 275.0], [603.0, 276.0], [602.0, 619.5], [601.0, 22.0], [600.0, 277.0], [591.0, 510.0], [578.0, 500.0], [576.0, 373.0], [581.0, 273.0], [580.0, 373.5], [589.0, 531.0], [588.0, 458.5], [586.0, 399.5], [585.0, 414.6666666666667], [584.0, 276.0], [599.0, 278.0], [598.0, 336.0], [633.0, 341.5], [638.0, 654.0], [639.0, 326.0], [626.0, 393.0], [625.0, 315.6666666666667], [637.0, 285.0], [636.0, 652.0], [635.0, 658.6666666666666], [632.0, 283.0], [615.0, 275.0], [614.0, 381.0], [613.0, 329.0], [612.0, 467.3333333333333], [611.0, 276.0], [608.0, 276.0], [622.0, 278.0], [621.0, 391.0], [619.0, 383.0], [618.0, 645.0], [617.0, 625.3333333333334], [616.0, 730.0], [629.0, 366.25], [627.0, 319.3333333333333], [664.0, 557.0], [670.0, 452.0], [671.0, 321.0], [658.0, 292.3333333333333], [657.0, 290.5], [668.0, 558.0], [667.0, 653.0], [665.0, 290.0], [655.0, 499.3333333333333], [641.0, 407.0], [640.0, 288.5], [643.0, 291.0], [642.0, 291.0], [645.0, 421.3333333333333], [644.0, 424.0], [654.0, 290.0], [653.0, 290.0], [652.0, 560.0], [651.0, 291.0], [649.0, 533.0], [648.0, 348.0], [663.0, 409.0], [662.0, 483.0], [661.0, 3.0], [659.0, 555.0], [700.0, 293.0], [703.0, 293.5], [698.0, 353.0], [697.0, 571.0], [696.0, 758.0], [679.0, 293.0], [676.0, 292.0], [675.0, 292.0], [674.0, 290.0], [672.0, 288.2], [687.0, 352.5], [686.0, 359.0], [685.0, 650.0], [683.0, 479.0], [681.0, 293.0], [695.0, 610.0], [691.0, 331.3333333333333], [690.0, 487.5], [689.0, 426.0], [729.0, 417.3333333333333], [723.0, 396.6666666666667], [731.0, 401.6666666666667], [734.0, 470.0], [721.0, 378.6], [720.0, 382.5], [730.0, 1078.0], [728.0, 319.0], [711.0, 503.0], [710.0, 371.0], [709.0, 556.0], [708.0, 372.0], [707.0, 357.5], [706.0, 297.0], [704.0, 295.0], [719.0, 504.6666666666667], [718.0, 304.0], [717.0, 379.5], [716.0, 451.0], [714.0, 559.0], [713.0, 470.8], [727.0, 316.0], [726.0, 376.25], [724.0, 654.0], [765.0, 335.0], [766.0, 434.0], [754.0, 767.0], [753.0, 477.0], [764.0, 336.0], [762.0, 451.0], [761.0, 333.0], [760.0, 334.6666666666667], [751.0, 447.125], [738.0, 404.3333333333333], [743.0, 472.0], [741.0, 396.5], [750.0, 333.0], [749.0, 402.5], [748.0, 568.0], [747.0, 327.0], [746.0, 327.0], [745.0, 400.0], [759.0, 334.0], [757.0, 332.0], [756.0, 332.75], [755.0, 332.0], [792.0, 650.25], [798.0, 488.0], [799.0, 395.0], [784.0, 570.0], [796.0, 545.0], [795.0, 386.0], [793.0, 505.75], [783.0, 570.0], [768.0, 523.0], [770.0, 340.0], [769.0, 338.0], [773.0, 483.0], [771.0, 481.0], [775.0, 414.0], [774.0, 418.0], [782.0, 483.0], [780.0, 617.8333333333334], [779.0, 687.0], [777.0, 456.0], [790.0, 378.5], [788.0, 790.5], [787.0, 568.0], [785.0, 667.6666666666666], [827.0, 496.0], [820.0, 497.0], [829.0, 407.0], [830.0, 407.0], [818.0, 449.5], [817.0, 494.0], [828.0, 499.0], [826.0, 498.0], [806.0, 436.2857142857143], [805.0, 396.5], [803.0, 584.0], [801.0, 579.0], [800.0, 394.0], [815.0, 404.0], [814.0, 450.75], [813.0, 477.8], [812.0, 586.0], [811.0, 595.0], [810.0, 511.00000000000006], [809.0, 526.6666666666666], [808.0, 513.7777777777778], [823.0, 428.5], [822.0, 695.5], [821.0, 404.0], [861.0, 426.0], [852.0, 423.0], [862.0, 470.5], [848.0, 417.0], [851.0, 455.0], [849.0, 642.5], [860.0, 511.0], [859.0, 510.3333333333333], [858.0, 600.0], [839.0, 554.5], [838.0, 510.0], [836.0, 408.0], [833.0, 452.5], [832.0, 675.0], [847.0, 678.0], [846.0, 416.0], [845.0, 472.6666666666667], [844.0, 514.5], [843.0, 413.0], [842.0, 556.5], [840.0, 411.0], [855.0, 422.5], [854.0, 545.0], [853.0, 643.5], [889.0, 498.3333333333333], [884.0, 611.5714285714286], [894.0, 558.75], [895.0, 486.5], [881.0, 689.5], [880.0, 432.0], [892.0, 438.0], [888.0, 818.0], [871.0, 426.0], [868.0, 471.0], [867.0, 424.5], [866.0, 427.0], [865.0, 669.0], [864.0, 424.0], [879.0, 610.0], [878.0, 478.0], [877.0, 522.5], [875.0, 713.0], [874.0, 429.0], [873.0, 427.3333333333333], [887.0, 433.0], [886.0, 663.0], [885.0, 432.0], [925.0, 565.0], [926.0, 626.5], [920.0, 442.0], [903.0, 636.3333333333334], [901.0, 437.0], [900.0, 536.5], [898.0, 574.3333333333334], [897.0, 437.0], [896.0, 583.0], [919.0, 487.6], [916.0, 745.6666666666666], [915.0, 438.0], [914.0, 551.0], [911.0, 440.0], [909.0, 879.0], [907.0, 438.25], [904.0, 545.0], [947.0, 729.0], [957.0, 709.0], [959.0, 467.0], [945.0, 669.8], [944.0, 514.0], [954.0, 610.1666666666667], [953.0, 521.6666666666666], [952.0, 714.3333333333334], [934.0, 505.5], [932.0, 643.0], [931.0, 663.5], [930.0, 547.0], [929.0, 546.0], [928.0, 447.0], [943.0, 449.0], [940.0, 659.0], [939.0, 629.5], [937.0, 448.3333333333333], [951.0, 670.6666666666666], [950.0, 781.0], [948.0, 726.0], [979.0, 809.0], [989.0, 679.0], [991.0, 489.0], [978.0, 522.0], [976.0, 521.0], [987.0, 599.0], [986.0, 484.0], [985.0, 646.5], [967.0, 568.0], [966.0, 476.0], [964.0, 520.0], [963.0, 534.0], [962.0, 565.0], [960.0, 601.5], [975.0, 568.75], [971.0, 734.0], [970.0, 572.0], [983.0, 693.75], [981.0, 657.0], [980.0, 730.0], [1009.0, 493.5], [1022.0, 692.0], [1023.0, 491.0], [1008.0, 493.5], [1021.0, 655.5], [1020.0, 494.0], [1016.0, 493.0], [999.0, 575.0], [998.0, 676.25], [995.0, 505.42857142857144], [993.0, 544.375], [1006.0, 509.4], [1005.0, 493.0], [1003.0, 495.0], [1002.0, 494.0], [1001.0, 494.0], [1000.0, 550.0], [1014.0, 493.0], [1013.0, 493.5], [1012.0, 493.6666666666667], [1076.0, 512.25], [1082.0, 496.0], [1056.0, 491.0], [1062.0, 492.5], [1060.0, 732.0], [1066.0, 558.8], [1070.0, 491.0], [1080.0, 616.0], [1078.0, 544.875], [1072.0, 572.6666666666666], [1054.0, 609.0], [1026.0, 496.0], [1024.0, 524.6], [1028.0, 488.0], [1030.0, 649.5], [1034.0, 640.625], [1032.0, 488.0], [1036.0, 555.2], [1052.0, 489.0], [1050.0, 806.0], [1046.0, 535.5], [1044.0, 488.5], [1042.0, 489.0], [1040.0, 538.4], [1142.0, 461.0], [1126.0, 529.25], [1146.0, 572.3333333333334], [1122.0, 478.5], [1124.0, 474.0], [1130.0, 607.6666666666666], [1128.0, 581.75], [1134.0, 512.6666666666666], [1144.0, 514.0], [1140.0, 491.0], [1138.0, 511.0], [1100.0, 509.0], [1098.0, 505.5], [1096.0, 509.0], [1094.0, 507.0], [1092.0, 503.0], [1090.0, 502.5], [1088.0, 538.0], [1112.0, 506.5], [1110.0, 519.8], [1104.0, 662.0], [1202.0, 473.0], [1190.0, 580.0], [1210.0, 476.0], [1184.0, 523.0], [1192.0, 549.0], [1194.0, 547.0], [1196.0, 472.0], [1198.0, 548.0], [1206.0, 475.0], [1200.0, 515.0], [1182.0, 546.0], [1152.0, 465.0], [1156.0, 568.6666666666666], [1160.0, 543.0], [1162.0, 542.5], [1164.0, 469.0], [1166.0, 466.0], [1180.0, 473.0], [1178.0, 471.0], [1176.0, 547.5], [1168.0, 598.6666666666666], [1248.0, 486.0], [1272.0, 746.0], [1250.0, 486.0], [1256.0, 567.6666666666666], [1258.0, 571.0], [1262.0, 517.6666666666666], [1274.0, 549.6666666666666], [1268.0, 520.3333333333334], [1266.0, 542.5], [1264.0, 581.75], [1230.0, 558.0], [1222.0, 572.5], [1220.0, 593.5], [1218.0, 597.1666666666667], [1216.0, 501.3333333333333], [1246.0, 562.0], [1244.0, 566.0], [1240.0, 648.5], [1336.0, 496.0], [1340.0, 500.0], [1312.0, 601.6666666666666], [1316.0, 741.0], [1314.0, 688.1666666666667], [1318.0, 662.8], [1320.0, 658.5], [1326.0, 597.25], [1342.0, 500.0], [1338.0, 783.0], [1334.0, 737.5], [1332.0, 656.5], [1330.0, 660.0], [1282.0, 581.0], [1284.0, 503.5], [1286.0, 638.6666666666666], [1290.0, 583.0], [1292.0, 553.3333333333334], [1294.0, 585.0], [1310.0, 723.0], [1308.0, 782.5], [1306.0, 491.0], [1304.0, 582.8571428571429], [1302.0, 608.2], [1400.0, 526.0], [1404.0, 525.0], [1376.0, 554.5], [1378.0, 597.0], [1382.0, 531.0], [1386.0, 681.0], [1388.0, 617.7], [1390.0, 575.0], [1406.0, 552.5], [1402.0, 609.3333333333334], [1398.0, 526.0], [1396.0, 525.0], [1394.0, 523.0], [1358.0, 507.0], [1356.0, 662.0], [1354.0, 503.5], [1352.0, 619.2727272727274], [1350.0, 502.0], [1348.0, 654.4444444444445], [1346.0, 739.0], [1344.0, 568.6666666666666], [1374.0, 592.0], [1370.0, 510.0], [1368.0, 592.0], [1366.0, 744.6666666666666], [1364.0, 564.5714285714286], [1362.0, 577.6666666666666], [1464.0, 657.75], [1448.0, 615.5], [1468.0, 559.0], [1442.0, 612.0], [1444.0, 531.0], [1450.0, 592.0], [1452.0, 623.0], [1454.0, 535.0], [1470.0, 550.0], [1466.0, 661.5555555555555], [1460.0, 579.1666666666666], [1458.0, 630.0], [1456.0, 622.6666666666666], [1422.0, 696.0], [1418.0, 609.5], [1416.0, 650.5], [1414.0, 525.6666666666666], [1412.0, 607.0], [1410.0, 608.5], [1408.0, 624.4], [1438.0, 570.0], [1436.0, 592.6153846153845], [1434.0, 611.0], [1432.0, 570.75], [1430.0, 613.0], [1424.0, 527.0], [1530.0, 826.0], [1510.0, 662.1818181818181], [1504.0, 682.3333333333334], [1508.0, 633.3333333333334], [1514.0, 668.0], [1512.0, 582.0], [1516.0, 695.6666666666666], [1518.0, 900.0], [1532.0, 591.0], [1528.0, 672.5], [1526.0, 667.0], [1524.0, 691.8000000000001], [1484.0, 1305.0], [1482.0, 638.4545454545455], [1480.0, 889.0], [1478.0, 645.25], [1474.0, 672.6], [1502.0, 578.0], [1500.0, 612.5], [1496.0, 613.0], [1494.0, 652.0], [1492.0, 762.5], [1488.0, 664.25], [1594.0, 876.5], [1576.0, 775.5], [1570.0, 626.0], [1572.0, 667.0], [1574.0, 678.75], [1578.0, 696.0], [1580.0, 625.0], [1582.0, 626.0], [1598.0, 765.0], [1592.0, 625.0], [1590.0, 642.875], [1588.0, 775.0], [1586.0, 625.5], [1584.0, 626.0], [1550.0, 743.1111111111111], [1546.0, 603.0], [1544.0, 657.5], [1540.0, 596.0], [1538.0, 593.0], [1536.0, 642.0], [1566.0, 625.6666666666666], [1564.0, 744.0], [1562.0, 623.0], [1554.0, 748.75], [1552.0, 717.4], [1614.0, 668.7], [1658.0, 727.5], [1662.0, 761.5], [1620.0, 618.0], [1618.0, 619.5], [1626.0, 618.5], [1624.0, 900.5], [1628.0, 654.0], [1630.0, 779.3333333333334], [1648.0, 759.0], [1610.0, 547.2], [1606.0, 784.5], [1600.0, 664.7777777777778], [1650.0, 693.7142857142857], [1652.0, 760.5], [1656.0, 662.5], [1638.0, 666.0], [1644.0, 673.6666666666666], [1640.0, 875.6666666666666], [1646.0, 760.0], [1632.0, 688.0], [1634.0, 766.5789473684209], [1636.0, 755.0], [1660.0, 694.5], [1676.0, 688.0], [1720.0, 688.8], [1664.0, 668.0], [1670.0, 685.0], [1668.0, 764.5], [1666.0, 760.0], [1674.0, 759.0], [1678.0, 623.5], [1712.0, 717.75], [1716.0, 700.0], [1718.0, 910.0], [1688.0, 648.0], [1686.0, 720.6666666666666], [1684.0, 626.0], [1682.0, 712.6666666666666], [1680.0, 696.0], [1690.0, 655.0], [1692.0, 580.0], [1694.0, 655.0], [1706.0, 698.3333333333334], [1704.0, 632.0], [1702.0, 732.0], [1698.0, 672.0], [1696.0, 625.0], [1708.0, 618.0], [1710.0, 681.0], [1724.0, 674.25], [1722.0, 776.3333333333334], [1732.0, 666.2777777777777], [1776.0, 630.5], [1748.0, 720.0], [1744.0, 694.1250000000001], [1752.0, 648.6666666666666], [1750.0, 831.0], [1754.0, 688.7857142857142], [1758.0, 704.6666666666666], [1756.0, 689.5], [1728.0, 681.1666666666666], [1734.0, 665.4], [1736.0, 744.5454545454545], [1738.0, 770.0], [1740.0, 3.0], [1742.0, 640.0], [1780.0, 690.3333333333334], [1782.0, 690.5], [1790.0, 659.2727272727273], [1760.0, 617.0], [1762.0, 617.5], [1766.0, 687.3333333333333], [1768.0, 877.3333333333334], [1770.0, 749.1666666666666], [1772.0, 692.6666666666666], [1774.0, 771.125], [1788.0, 662.888888888889], [1784.0, 620.3333333333334], [1794.0, 678.3333333333334], [1848.0, 682.0526315789473], [1810.0, 646.2857142857142], [1808.0, 657.75], [1812.0, 683.2962962962963], [1814.0, 615.0], [1816.0, 686.5], [1818.0, 681.4782608695651], [1820.0, 671.4], [1792.0, 685.5], [1822.0, 704.0], [1838.0, 699.4000000000001], [1834.0, 632.3333333333334], [1830.0, 629.3333333333334], [1828.0, 616.0], [1826.0, 629.8333333333333], [1824.0, 644.7272727272727], [1854.0, 687.0], [1852.0, 620.0], [1850.0, 703.7142857142858], [1846.0, 679.5], [1844.0, 672.0000000000001], [1842.0, 614.5], [1840.0, 731.6666666666666], [1806.0, 600.0], [1804.0, 650.9333333333333], [1802.0, 601.0], [1800.0, 604.5], [1796.0, 608.6666666666667], [1862.0, 884.0], [1870.0, 664.4000000000001], [1914.0, 699.5454545454545], [1860.0, 672.8333333333333], [1858.0, 699.6666666666667], [1856.0, 740.4], [1864.0, 692.0], [1868.0, 643.7777777777778], [1904.0, 763.090909090909], [1872.0, 715.0000000000001], [1876.0, 717.9090909090909], [1878.0, 704.0], [1880.0, 747.4285714285714], [1882.0, 672.7083333333333], [1884.0, 624.5], [1886.0, 688.3333333333334], [1890.0, 689.3333333333334], [1892.0, 672.6363636363635], [1898.0, 683.75], [1896.0, 772.3333333333334], [1894.0, 668.6], [1900.0, 757.7058823529412], [1902.0, 720.0], [1906.0, 714.0], [1910.0, 701.88], [1908.0, 617.0], [1912.0, 627.0357142857143], [1916.0, 759.5], [1888.0, 667.3333333333334], [1918.0, 810.7692307692307], [1926.0, 738.0], [1922.0, 771.0], [1920.0, 697.3333333333334], [1924.0, 710.8421052631579], [1928.0, 629.0], [1930.0, 770.1818181818182], [1932.0, 681.568181818182], [1934.0, 726.8571428571429], [1968.0, 1013.9384615384616], [1970.0, 893.9411764705882], [1972.0, 852.25], [1974.0, 962.6666666666666], [1976.0, 879.25], [1978.0, 1201.1792452830189], [1980.0, 1221.25], [1952.0, 808.5217391304348], [1982.0, 1178.1249999999993], [1936.0, 796.5111111111111], [1938.0, 759.5454545454545], [1940.0, 835.8055555555557], [1944.0, 741.0], [1942.0, 779.7209302325581], [1946.0, 821.3333333333334], [1948.0, 818.0535714285713], [1950.0, 833.4761904761904], [1958.0, 799.8333333333334], [1956.0, 966.125], [1954.0, 899.75], [1960.0, 883.0769230769231], [1962.0, 751.0], [1966.0, 1017.8461538461538], [1964.0, 1037.5384615384614], [1988.0, 1199.388235294117], [1986.0, 1156.4], [1992.0, 805.1428571428572], [1990.0, 1218.8874999999991], [1994.0, 811.2530120481924], [2000.0, 869.9909835705529], [1984.0, 1240.2857142857144], [1998.0, 751.2408163265314], [1996.0, 748.0482456140348], [1057.0, 492.0], [1087.0, 517.0], [1065.0, 494.0], [1063.0, 491.5], [1069.0, 492.0], [1071.0, 489.0], [1085.0, 500.0], [1083.0, 495.0], [1081.0, 655.0], [1077.0, 491.0], [1075.0, 545.0], [1073.0, 491.0], [1031.0, 533.25], [1027.0, 807.0], [1025.0, 491.0], [1035.0, 488.0], [1039.0, 567.2], [1037.0, 576.0], [1049.0, 512.25], [1047.0, 491.0], [1145.0, 503.5], [1151.0, 466.0], [1123.0, 474.0], [1125.0, 567.5], [1127.0, 470.6666666666667], [1133.0, 500.0], [1131.0, 462.0], [1135.0, 492.4], [1149.0, 576.0], [1147.0, 541.0], [1143.0, 577.4285714285714], [1141.0, 462.0], [1139.0, 460.0], [1137.0, 500.0], [1103.0, 505.6666666666667], [1099.0, 582.0], [1095.0, 509.0], [1093.0, 599.75], [1091.0, 508.0], [1119.0, 477.6666666666667], [1117.0, 479.3333333333333], [1115.0, 516.3333333333333], [1113.0, 813.0], [1111.0, 578.0], [1109.0, 581.0], [1107.0, 535.8], [1209.0, 551.3333333333334], [1215.0, 497.0], [1187.0, 574.0], [1185.0, 473.0], [1195.0, 546.0], [1197.0, 546.0], [1199.0, 727.0], [1213.0, 639.0], [1211.0, 476.0], [1207.0, 598.5], [1201.0, 509.5], [1155.0, 465.0], [1153.0, 541.0], [1157.0, 581.5], [1161.0, 542.4285714285714], [1163.0, 545.0], [1165.0, 666.0], [1167.0, 543.0], [1181.0, 509.5], [1179.0, 470.0], [1177.0, 592.0], [1175.0, 548.0], [1173.0, 482.0], [1171.0, 598.6666666666666], [1169.0, 467.0], [1269.0, 535.0], [1253.0, 605.3333333333334], [1277.0, 497.0], [1251.0, 485.5], [1255.0, 606.6666666666666], [1257.0, 569.5714285714286], [1261.0, 902.0], [1263.0, 493.0], [1275.0, 536.5], [1271.0, 512.2], [1267.0, 551.0], [1265.0, 576.0], [1229.0, 480.2], [1227.0, 641.0], [1225.0, 529.6666666666666], [1223.0, 546.6666666666666], [1219.0, 641.5], [1217.0, 482.0], [1247.0, 486.0], [1245.0, 566.0], [1243.0, 588.076923076923], [1239.0, 420.75], [1237.0, 481.5], [1235.0, 729.0], [1233.0, 560.0], [1339.0, 579.5], [1331.0, 633.2], [1343.0, 501.0], [1313.0, 491.0], [1317.0, 662.0], [1319.0, 574.2], [1323.0, 678.25], [1321.0, 617.8], [1327.0, 659.0], [1341.0, 500.0], [1337.0, 574.0], [1333.0, 672.6666666666666], [1329.0, 756.6666666666666], [1311.0, 490.0], [1281.0, 558.5], [1283.0, 544.25], [1285.0, 539.0], [1287.0, 547.5], [1291.0, 539.8333333333333], [1295.0, 585.5], [1309.0, 603.5], [1307.0, 490.3333333333333], [1305.0, 573.3333333333334], [1301.0, 716.4999999999999], [1299.0, 594.5], [1297.0, 495.5], [1401.0, 659.2], [1399.0, 564.0], [1381.0, 618.25], [1407.0, 524.0], [1377.0, 513.0], [1379.0, 541.1666666666666], [1383.0, 197.0], [1387.0, 600.0], [1391.0, 523.0], [1405.0, 618.0], [1359.0, 506.0], [1357.0, 600.1666666666666], [1355.0, 663.0], [1353.0, 502.0], [1375.0, 678.0], [1373.0, 663.5], [1371.0, 594.0], [1369.0, 565.3333333333334], [1367.0, 681.0], [1365.0, 653.8], [1361.0, 506.0], [1467.0, 646.0], [1463.0, 552.0], [1471.0, 721.2], [1441.0, 613.75], [1443.0, 480.14285714285717], [1447.0, 530.0], [1449.0, 659.8333333333333], [1451.0, 704.8], [1453.0, 615.8571428571429], [1455.0, 706.0], [1469.0, 641.0], [1459.0, 629.25], [1457.0, 622.5294117647059], [1423.0, 608.0], [1421.0, 591.4], [1419.0, 554.0], [1415.0, 526.6], [1413.0, 637.3333333333334], [1439.0, 815.6666666666666], [1437.0, 609.5], [1435.0, 529.0], [1429.0, 680.25], [1427.0, 612.0], [1485.0, 558.0], [1535.0, 747.5], [1507.0, 604.3333333333334], [1511.0, 736.0], [1517.0, 587.0], [1519.0, 659.8888888888889], [1533.0, 662.5], [1527.0, 661.6], [1523.0, 676.6666666666666], [1487.0, 697.0], [1483.0, 561.0], [1479.0, 645.5], [1477.0, 665.3333333333333], [1475.0, 550.6666666666666], [1473.0, 683.0], [1501.0, 705.5714285714287], [1499.0, 680.0], [1497.0, 570.0], [1495.0, 651.0], [1491.0, 566.0], [1597.0, 657.0], [1599.0, 627.25], [1569.0, 626.1666666666666], [1571.0, 693.0], [1575.0, 744.3000000000001], [1577.0, 695.0], [1579.0, 655.6], [1581.0, 616.0], [1583.0, 647.0], [1593.0, 699.5], [1591.0, 680.0], [1589.0, 700.5], [1585.0, 706.2], [1547.0, 713.0], [1545.0, 624.0], [1541.0, 651.6], [1537.0, 626.3333333333334], [1567.0, 627.0], [1565.0, 717.6666666666666], [1563.0, 626.0], [1561.0, 695.4], [1555.0, 727.25], [1553.0, 763.6666666666666], [1609.0, 679.25], [1649.0, 691.3333333333334], [1623.0, 653.5], [1621.0, 673.0], [1619.0, 639.25], [1617.0, 619.25], [1627.0, 617.0], [1629.0, 685.6666666666666], [1615.0, 635.4], [1611.0, 624.0], [1607.0, 623.75], [1605.0, 750.4], [1603.0, 659.3333333333334], [1601.0, 603.9166666666666], [1631.0, 615.0], [1651.0, 698.0], [1655.0, 695.25], [1653.0, 692.5], [1657.0, 783.0], [1643.0, 690.5], [1641.0, 622.0], [1639.0, 706.0], [1645.0, 672.6], [1647.0, 690.0], [1663.0, 691.0], [1633.0, 706.9285714285716], [1635.0, 738.3333333333334], [1661.0, 721.2857142857143], [1659.0, 626.0], [1673.0, 622.5], [1671.0, 694.3333333333334], [1669.0, 624.0], [1667.0, 624.0], [1665.0, 621.6666666666666], [1677.0, 645.6666666666666], [1679.0, 680.5], [1715.0, 818.0], [1713.0, 681.6], [1717.0, 650.3333333333334], [1719.0, 646.25], [1683.0, 641.8518518518518], [1681.0, 669.3333333333334], [1691.0, 709.5], [1693.0, 683.7142857142857], [1695.0, 714.0], [1701.0, 817.0], [1699.0, 701.6666666666666], [1709.0, 768.5], [1711.0, 698.6666666666666], [1727.0, 820.6666666666666], [1725.0, 626.0], [1723.0, 783.8333333333333], [1735.0, 694.0833333333334], [1785.0, 710.4285714285713], [1745.0, 672.8333333333334], [1753.0, 690.0], [1755.0, 753.0], [1757.0, 617.0], [1759.0, 617.0], [1731.0, 670.1111111111112], [1729.0, 642.5], [1733.0, 779.3333333333333], [1737.0, 676.5], [1739.0, 846.0], [1741.0, 728.0], [1743.0, 912.0], [1777.0, 675.0], [1779.0, 691.9285714285714], [1781.0, 621.0], [1761.0, 793.5], [1765.0, 665.9166666666666], [1763.0, 794.3333333333334], [1767.0, 969.5], [1769.0, 635.0], [1771.0, 622.0], [1773.0, 649.8], [1775.0, 758.0], [1789.0, 614.8], [1783.0, 667.1666666666667], [1793.0, 611.5], [1811.0, 661.6315789473682], [1809.0, 627.8333333333334], [1813.0, 614.3333333333334], [1815.0, 642.8], [1817.0, 687.5384615384614], [1819.0, 670.6666666666666], [1823.0, 684.0], [1839.0, 712.0], [1835.0, 692.3076923076923], [1833.0, 635.25], [1831.0, 667.1538461538463], [1827.0, 618.0], [1825.0, 663.2631578947367], [1855.0, 736.5], [1853.0, 672.6666666666666], [1849.0, 615.0], [1843.0, 667.4], [1841.0, 664.1428571428572], [1807.0, 601.0], [1803.0, 645.5333333333333], [1801.0, 602.5], [1799.0, 642.75], [1797.0, 631.3333333333334], [1795.0, 608.5], [1865.0, 664.7142857142858], [1889.0, 669.1052631578948], [1861.0, 668.6666666666666], [1859.0, 701.8], [1857.0, 691.5172413793101], [1863.0, 647.2916666666667], [1869.0, 595.2500000000001], [1871.0, 670.3333333333334], [1905.0, 689.3888888888888], [1875.0, 748.5714285714286], [1873.0, 712.5416666666669], [1877.0, 711.4], [1879.0, 669.5], [1881.0, 782.0], [1883.0, 716.0], [1885.0, 704.1818181818182], [1887.0, 671.1428571428571], [1891.0, 623.0], [1899.0, 744.875], [1895.0, 643.1176470588234], [1901.0, 612.0], [1903.0, 756.0], [1911.0, 713.7777777777778], [1909.0, 656.090909090909], [1907.0, 644.3749999999999], [1913.0, 681.25], [1915.0, 721.625], [1917.0, 765.0000000000001], [1919.0, 711.1428571428571], [1929.0, 863.0], [1975.0, 1081.75], [1925.0, 769.5], [1923.0, 753.6666666666666], [1921.0, 679.5], [1927.0, 736.25], [1931.0, 726.1666666666667], [1933.0, 688.2105263157895], [1935.0, 695.5348837209303], [1969.0, 1038.4], [1971.0, 1006.5999999999999], [1973.0, 1005.810810810811], [1977.0, 1172.2352941176468], [1979.0, 1321.5357142857147], [1981.0, 1251.9270833333335], [1983.0, 1186.958333333334], [1937.0, 772.0], [1939.0, 813.0], [1941.0, 845.3333333333335], [1945.0, 788.0], [1947.0, 751.75], [1949.0, 815.1111111111111], [1951.0, 813.6666666666666], [1953.0, 807.0666666666667], [1959.0, 860.125], [1957.0, 878.1999999999999], [1955.0, 858.4], [1961.0, 947.3846153846155], [1963.0, 838.1153846153845], [1967.0, 918.5], [1965.0, 858.657142857143], [1989.0, 1211.3999999999992], [1995.0, 764.2457142857145], [1987.0, 1255.2], [1993.0, 832.0], [1991.0, 1029.2175066312996], [1997.0, 722.925], [1999.0, 778.1529411764704], [1985.0, 1191.5], [1.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1966.557549999974, 856.5449999999882]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 44331.75, "minX": 1.6667046E12, "maxY": 1293731.25, "series": [{"data": [[1.6667046E12, 263269.76666666666], [1.66670472E12, 181401.15], [1.66670466E12, 1293731.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6667046E12, 64162.25], [1.66670472E12, 44331.75], [1.66670466E12, 316438.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 728.0544530725754, "minX": 1.6667046E12, "maxY": 1187.4060742407182, "series": [{"data": [[1.6667046E12, 1187.4060742407182], [1.66670472E12, 728.0544530725754], [1.66670466E12, 807.388202428277]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 728.0085322596115, "minX": 1.6667046E12, "maxY": 1187.2895520412849, "series": [{"data": [[1.6667046E12, 1187.2895520412849], [1.66670472E12, 728.0085322596115], [1.66670466E12, 807.3458284087163]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6667046E12, "maxY": 1.3261430556474492, "series": [{"data": [[1.6667046E12, 1.3261430556474492], [1.66670472E12, 0.0], [1.66670466E12, 0.004284409584183993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.6667046E12, "maxY": 3362.0, "series": [{"data": [[1.6667046E12, 3362.0], [1.66670472E12, 2038.0], [1.66670466E12, 2698.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6667046E12, 1852.0], [1.66670472E12, 1102.0], [1.66670466E12, 1099.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6667046E12, 2470.040000000001], [1.66670472E12, 1466.0], [1.66670466E12, 1429.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6667046E12, 2113.0], [1.66670472E12, 1173.0], [1.66670466E12, 1198.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6667046E12, 2.0], [1.66670472E12, 2.0], [1.66670466E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6667046E12, 1065.0], [1.66670472E12, 709.0], [1.66670466E12, 757.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 30.0, "maxY": 2301.0, "series": [{"data": [[532.0, 1197.0], [559.0, 1829.0], [599.0, 1585.0], [598.0, 1556.0], [669.0, 1093.0], [667.0, 1069.0], [675.0, 1626.0], [742.0, 903.0], [769.0, 1563.0], [780.0, 2058.5], [828.0, 1203.0], [816.0, 717.0], [889.0, 623.0], [892.0, 1101.0], [913.0, 1264.0], [952.0, 658.5], [971.0, 646.0], [964.0, 823.0], [1009.0, 862.0], [1034.0, 787.0], [1054.0, 1070.0], [1060.0, 911.0], [1083.0, 1103.0], [1081.0, 854.0], [1104.0, 829.0], [1098.0, 830.0], [1120.0, 629.5], [1186.0, 986.0], [1209.0, 787.0], [1212.0, 940.0], [1156.0, 1135.5], [1167.0, 1130.0], [1190.0, 703.0], [1198.0, 697.0], [1158.0, 793.0], [1224.0, 682.0], [1219.0, 880.0], [1223.0, 853.0], [1240.0, 1049.5], [1264.0, 777.0], [1253.0, 882.0], [1227.0, 816.0], [1225.0, 750.0], [1262.0, 803.5], [1263.0, 738.0], [1260.0, 831.0], [1306.0, 760.0], [1332.0, 722.0], [1303.0, 770.0], [1324.0, 621.0], [1296.0, 692.5], [1298.0, 731.0], [1304.0, 741.0], [1305.0, 723.0], [1316.0, 970.0], [1328.0, 681.0], [1291.0, 811.0], [1288.0, 924.0], [1352.0, 673.0], [1360.0, 714.0], [1376.0, 772.0], [1375.0, 729.0], [1349.0, 637.0], [1391.0, 724.0], [1433.0, 735.0], [1454.0, 627.5], [1427.0, 692.0], [1470.0, 664.0], [1419.0, 967.0], [1434.0, 705.0], [1417.0, 636.0], [1523.0, 746.0], [1530.0, 642.0], [1474.0, 615.5], [1506.0, 673.0], [1507.0, 632.0], [1520.0, 624.0], [1496.0, 740.0], [1473.0, 690.0], [1521.0, 625.0], [1559.0, 623.0], [1590.0, 431.0], [30.0, 693.0], [87.0, 38.0], [379.0, 2301.0], [467.0, 1668.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[30.0, 36.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1590.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 30.0, "maxY": 2301.0, "series": [{"data": [[532.0, 1197.0], [559.0, 1829.0], [599.0, 1585.0], [598.0, 1555.5], [669.0, 1093.0], [667.0, 1069.0], [675.0, 1626.0], [742.0, 903.0], [769.0, 1563.0], [780.0, 2058.5], [828.0, 1203.0], [816.0, 717.0], [889.0, 623.0], [892.0, 1101.0], [913.0, 1264.0], [952.0, 658.5], [971.0, 646.0], [964.0, 823.0], [1009.0, 862.0], [1034.0, 786.5], [1054.0, 1070.0], [1060.0, 911.0], [1083.0, 1103.0], [1081.0, 854.0], [1104.0, 829.0], [1098.0, 830.0], [1120.0, 629.5], [1186.0, 986.0], [1209.0, 787.0], [1212.0, 940.0], [1156.0, 1135.5], [1167.0, 1130.0], [1190.0, 703.0], [1198.0, 696.5], [1158.0, 793.0], [1224.0, 682.0], [1219.0, 880.0], [1223.0, 853.0], [1240.0, 1049.5], [1264.0, 777.0], [1253.0, 882.0], [1227.0, 816.0], [1225.0, 750.0], [1262.0, 803.5], [1263.0, 738.0], [1260.0, 831.0], [1306.0, 760.0], [1332.0, 722.0], [1303.0, 770.0], [1324.0, 621.0], [1296.0, 692.5], [1298.0, 731.0], [1304.0, 741.0], [1305.0, 723.0], [1316.0, 970.0], [1328.0, 681.0], [1291.0, 811.0], [1288.0, 924.0], [1352.0, 673.0], [1360.0, 714.0], [1376.0, 771.5], [1375.0, 729.0], [1349.0, 637.0], [1391.0, 724.0], [1433.0, 735.0], [1454.0, 627.5], [1427.0, 692.0], [1470.0, 664.0], [1419.0, 967.0], [1434.0, 705.0], [1417.0, 636.0], [1523.0, 746.0], [1530.0, 642.0], [1474.0, 615.5], [1506.0, 673.0], [1507.0, 632.0], [1520.0, 624.0], [1496.0, 740.0], [1473.0, 690.0], [1521.0, 625.0], [1559.0, 623.0], [1590.0, 431.0], [30.0, 693.0], [87.0, 38.0], [379.0, 2301.0], [467.0, 1668.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[30.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1590.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 157.2, "minX": 1.6667046E12, "maxY": 1240.9166666666667, "series": [{"data": [[1.6667046E12, 268.55], [1.66670472E12, 157.2], [1.66670466E12, 1240.9166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.6667046E12, "maxY": 1240.9333333333334, "series": [{"data": [[1.6667046E12, 251.61666666666667], [1.66670472E12, 173.85], [1.66670466E12, 1240.9333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6667046E12, 0.26666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66670472E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.6667046E12, "maxY": 1240.9333333333334, "series": [{"data": [[1.6667046E12, 0.26666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6667046E12, 251.61666666666667], [1.66670472E12, 173.85], [1.66670466E12, 1240.9333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.6667046E12, "maxY": 1240.9333333333334, "series": [{"data": [[1.6667046E12, 251.61666666666667], [1.66670472E12, 173.85], [1.66670466E12, 1240.9333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6667046E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66670472E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

